<?php
/**
 * GetClassesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetClassesRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetClassesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetClassesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'class_description_ids' => 'int[]',
        'class_ids' => 'int[]',
        'staff_ids' => 'int[]',
        'start_date_time' => '\DateTime',
        'end_date_time' => '\DateTime',
        'client_id' => 'string',
        'program_ids' => 'int[]',
        'session_type_ids' => 'int[]',
        'location_ids' => 'int[]',
        'semester_ids' => 'int[]',
        'hide_canceled_classes' => 'bool',
        'scheduling_window' => 'bool',
        'last_modified_date' => '\DateTime',
        'limit' => 'int',
        'offset' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'class_description_ids' => 'int32',
        'class_ids' => 'int32',
        'staff_ids' => 'int64',
        'start_date_time' => 'date-time',
        'end_date_time' => 'date-time',
        'client_id' => null,
        'program_ids' => 'int32',
        'session_type_ids' => 'int32',
        'location_ids' => 'int32',
        'semester_ids' => 'int32',
        'hide_canceled_classes' => null,
        'scheduling_window' => null,
        'last_modified_date' => 'date-time',
        'limit' => 'int32',
        'offset' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'class_description_ids' => 'ClassDescriptionIds',
        'class_ids' => 'ClassIds',
        'staff_ids' => 'StaffIds',
        'start_date_time' => 'StartDateTime',
        'end_date_time' => 'EndDateTime',
        'client_id' => 'ClientId',
        'program_ids' => 'ProgramIds',
        'session_type_ids' => 'SessionTypeIds',
        'location_ids' => 'LocationIds',
        'semester_ids' => 'SemesterIds',
        'hide_canceled_classes' => 'HideCanceledClasses',
        'scheduling_window' => 'SchedulingWindow',
        'last_modified_date' => 'LastModifiedDate',
        'limit' => 'Limit',
        'offset' => 'Offset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'class_description_ids' => 'setClassDescriptionIds',
        'class_ids' => 'setClassIds',
        'staff_ids' => 'setStaffIds',
        'start_date_time' => 'setStartDateTime',
        'end_date_time' => 'setEndDateTime',
        'client_id' => 'setClientId',
        'program_ids' => 'setProgramIds',
        'session_type_ids' => 'setSessionTypeIds',
        'location_ids' => 'setLocationIds',
        'semester_ids' => 'setSemesterIds',
        'hide_canceled_classes' => 'setHideCanceledClasses',
        'scheduling_window' => 'setSchedulingWindow',
        'last_modified_date' => 'setLastModifiedDate',
        'limit' => 'setLimit',
        'offset' => 'setOffset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'class_description_ids' => 'getClassDescriptionIds',
        'class_ids' => 'getClassIds',
        'staff_ids' => 'getStaffIds',
        'start_date_time' => 'getStartDateTime',
        'end_date_time' => 'getEndDateTime',
        'client_id' => 'getClientId',
        'program_ids' => 'getProgramIds',
        'session_type_ids' => 'getSessionTypeIds',
        'location_ids' => 'getLocationIds',
        'semester_ids' => 'getSemesterIds',
        'hide_canceled_classes' => 'getHideCanceledClasses',
        'scheduling_window' => 'getSchedulingWindow',
        'last_modified_date' => 'getLastModifiedDate',
        'limit' => 'getLimit',
        'offset' => 'getOffset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['class_description_ids'] = isset($data['class_description_ids']) ? $data['class_description_ids'] : null;
        $this->container['class_ids'] = isset($data['class_ids']) ? $data['class_ids'] : null;
        $this->container['staff_ids'] = isset($data['staff_ids']) ? $data['staff_ids'] : null;
        $this->container['start_date_time'] = isset($data['start_date_time']) ? $data['start_date_time'] : null;
        $this->container['end_date_time'] = isset($data['end_date_time']) ? $data['end_date_time'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['program_ids'] = isset($data['program_ids']) ? $data['program_ids'] : null;
        $this->container['session_type_ids'] = isset($data['session_type_ids']) ? $data['session_type_ids'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
        $this->container['semester_ids'] = isset($data['semester_ids']) ? $data['semester_ids'] : null;
        $this->container['hide_canceled_classes'] = isset($data['hide_canceled_classes']) ? $data['hide_canceled_classes'] : null;
        $this->container['scheduling_window'] = isset($data['scheduling_window']) ? $data['scheduling_window'] : null;
        $this->container['last_modified_date'] = isset($data['last_modified_date']) ? $data['last_modified_date'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets class_description_ids
     *
     * @return int[]
     */
    public function getClassDescriptionIds()
    {
        return $this->container['class_description_ids'];
    }

    /**
     * Sets class_description_ids
     *
     * @param int[] $class_description_ids The requested class description IDs.
     *
     * @return $this
     */
    public function setClassDescriptionIds($class_description_ids)
    {
        $this->container['class_description_ids'] = $class_description_ids;

        return $this;
    }

    /**
     * Gets class_ids
     *
     * @return int[]
     */
    public function getClassIds()
    {
        return $this->container['class_ids'];
    }

    /**
     * Sets class_ids
     *
     * @param int[] $class_ids The requested class IDs.
     *
     * @return $this
     */
    public function setClassIds($class_ids)
    {
        $this->container['class_ids'] = $class_ids;

        return $this;
    }

    /**
     * Gets staff_ids
     *
     * @return int[]
     */
    public function getStaffIds()
    {
        return $this->container['staff_ids'];
    }

    /**
     * Sets staff_ids
     *
     * @param int[] $staff_ids The requested IDs of the teaching staff members.
     *
     * @return $this
     */
    public function setStaffIds($staff_ids)
    {
        $this->container['staff_ids'] = $staff_ids;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime $start_date_time The requested start date for filtering.   <br />Default: **today’s date**
     *
     * @return $this
     */
    public function setStartDateTime($start_date_time)
    {
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \DateTime
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \DateTime $end_date_time The requested end date for filtering.  <br />Default: **today’s date**
     *
     * @return $this
     */
    public function setEndDateTime($end_date_time)
    {
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets program_ids
     *
     * @return int[]
     */
    public function getProgramIds()
    {
        return $this->container['program_ids'];
    }

    /**
     * Sets program_ids
     *
     * @param int[] $program_ids A list of program IDs on which to base the search.
     *
     * @return $this
     */
    public function setProgramIds($program_ids)
    {
        $this->container['program_ids'] = $program_ids;

        return $this;
    }

    /**
     * Gets session_type_ids
     *
     * @return int[]
     */
    public function getSessionTypeIds()
    {
        return $this->container['session_type_ids'];
    }

    /**
     * Sets session_type_ids
     *
     * @param int[] $session_type_ids A list of session type IDs on which to base the search.
     *
     * @return $this
     */
    public function setSessionTypeIds($session_type_ids)
    {
        $this->container['session_type_ids'] = $session_type_ids;

        return $this;
    }

    /**
     * Gets location_ids
     *
     * @return int[]
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     *
     * @param int[] $location_ids A list of location IDs on which to base the search.
     *
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }

    /**
     * Gets semester_ids
     *
     * @return int[]
     */
    public function getSemesterIds()
    {
        return $this->container['semester_ids'];
    }

    /**
     * Sets semester_ids
     *
     * @param int[] $semester_ids A list of semester IDs on which to base the search.
     *
     * @return $this
     */
    public function setSemesterIds($semester_ids)
    {
        $this->container['semester_ids'] = $semester_ids;

        return $this;
    }

    /**
     * Gets hide_canceled_classes
     *
     * @return bool
     */
    public function getHideCanceledClasses()
    {
        return $this->container['hide_canceled_classes'];
    }

    /**
     * Sets hide_canceled_classes
     *
     * @param bool $hide_canceled_classes When `true`, canceled classes are removed from the response.<br />  When `false`, canceled classes are included in the response.<br />  Default: **false**
     *
     * @return $this
     */
    public function setHideCanceledClasses($hide_canceled_classes)
    {
        $this->container['hide_canceled_classes'] = $hide_canceled_classes;

        return $this;
    }

    /**
     * Gets scheduling_window
     *
     * @return bool
     */
    public function getSchedulingWindow()
    {
        return $this->container['scheduling_window'];
    }

    /**
     * Sets scheduling_window
     *
     * @param bool $scheduling_window When `true`, classes outside scheduling window are removed from the response.<br />  When `false`, classes are included in the response, regardless of the scheduling window.<br />  Default: **false**
     *
     * @return $this
     */
    public function setSchedulingWindow($scheduling_window)
    {
        $this->container['scheduling_window'] = $scheduling_window;

        return $this;
    }

    /**
     * Gets last_modified_date
     *
     * @return \DateTime
     */
    public function getLastModifiedDate()
    {
        return $this->container['last_modified_date'];
    }

    /**
     * Sets last_modified_date
     *
     * @param \DateTime $last_modified_date When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.
     *
     * @return $this
     */
    public function setLastModifiedDate($last_modified_date)
    {
        $this->container['last_modified_date'] = $last_modified_date;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit Number of results to include, defaults to 100
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int $offset Page offset, defaults to 0.
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


