<?php
/**
 * Sale
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Sale Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Sale implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Sale';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'sale_date' => '\DateTime',
        'sale_time' => 'string',
        'sale_date_time' => '\DateTime',
        'client_id' => 'string',
        'purchased_items' => '\Swagger\Client\Model\PurchasedItem[]',
        'location_id' => 'int',
        'payments' => '\Swagger\Client\Model\SalePayment[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'sale_date' => 'date-time',
        'sale_time' => null,
        'sale_date_time' => 'date-time',
        'client_id' => null,
        'purchased_items' => null,
        'location_id' => 'int32',
        'payments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'sale_date' => 'SaleDate',
        'sale_time' => 'SaleTime',
        'sale_date_time' => 'SaleDateTime',
        'client_id' => 'ClientId',
        'purchased_items' => 'PurchasedItems',
        'location_id' => 'LocationId',
        'payments' => 'Payments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'sale_date' => 'setSaleDate',
        'sale_time' => 'setSaleTime',
        'sale_date_time' => 'setSaleDateTime',
        'client_id' => 'setClientId',
        'purchased_items' => 'setPurchasedItems',
        'location_id' => 'setLocationId',
        'payments' => 'setPayments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'sale_date' => 'getSaleDate',
        'sale_time' => 'getSaleTime',
        'sale_date_time' => 'getSaleDateTime',
        'client_id' => 'getClientId',
        'purchased_items' => 'getPurchasedItems',
        'location_id' => 'getLocationId',
        'payments' => 'getPayments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['sale_date'] = isset($data['sale_date']) ? $data['sale_date'] : null;
        $this->container['sale_time'] = isset($data['sale_time']) ? $data['sale_time'] : null;
        $this->container['sale_date_time'] = isset($data['sale_date_time']) ? $data['sale_date_time'] : null;
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['purchased_items'] = isset($data['purchased_items']) ? $data['purchased_items'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['payments'] = isset($data['payments']) ? $data['payments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The sale ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets sale_date
     *
     * @return \DateTime
     */
    public function getSaleDate()
    {
        return $this->container['sale_date'];
    }

    /**
     * Sets sale_date
     *
     * @param \DateTime $sale_date The date the item was sold.
     *
     * @return $this
     */
    public function setSaleDate($sale_date)
    {
        $this->container['sale_date'] = $sale_date;

        return $this;
    }

    /**
     * Gets sale_time
     *
     * @return string
     */
    public function getSaleTime()
    {
        return $this->container['sale_time'];
    }

    /**
     * Sets sale_time
     *
     * @param string $sale_time The time the item was sold.
     *
     * @return $this
     */
    public function setSaleTime($sale_time)
    {
        $this->container['sale_time'] = $sale_time;

        return $this;
    }

    /**
     * Gets sale_date_time
     *
     * @return \DateTime
     */
    public function getSaleDateTime()
    {
        return $this->container['sale_date_time'];
    }

    /**
     * Sets sale_date_time
     *
     * @param \DateTime $sale_date_time The date and time the item was sold.
     *
     * @return $this
     */
    public function setSaleDateTime($sale_date_time)
    {
        $this->container['sale_date_time'] = $sale_date_time;

        return $this;
    }

    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id The ID of the client who made the purchase.
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets purchased_items
     *
     * @return \Swagger\Client\Model\PurchasedItem[]
     */
    public function getPurchasedItems()
    {
        return $this->container['purchased_items'];
    }

    /**
     * Sets purchased_items
     *
     * @param \Swagger\Client\Model\PurchasedItem[] $purchased_items Contains information that describes the purchased items.
     *
     * @return $this
     */
    public function setPurchasedItems($purchased_items)
    {
        $this->container['purchased_items'] = $purchased_items;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id The ID of the location where the sale takes place.
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \Swagger\Client\Model\SalePayment[]
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \Swagger\Client\Model\SalePayment[] $payments Contains information that describes the payments that contributed to this sale.
     *
     * @return $this
     */
    public function setPayments($payments)
    {
        $this->container['payments'] = $payments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


