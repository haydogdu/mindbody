<?php
/**
 * AddClientRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AddClientRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddClientRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddClientRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'account_balance' => 'double',
        'action' => 'string',
        'active' => 'bool',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'appt_gender_pref_male' => 'bool',
        'birth_date' => '\DateTime',
        'city' => 'string',
        'client_credit_card' => '\Swagger\Client\Model\ClientCreditCard',
        'client_indexes' => '\Swagger\Client\Model\AssignedClientIndex[]',
        'client_relationships' => '\Swagger\Client\Model\ClientRelationship[]',
        'country' => 'string',
        'creation_date' => '\DateTime',
        'custom_client_fields' => '\Swagger\Client\Model\CustomClientFieldValue[]',
        'email' => 'string',
        'emergency_contact_info_email' => 'string',
        'emergency_contact_info_name' => 'string',
        'emergency_contact_info_phone' => 'string',
        'emergency_contact_info_relationship' => 'string',
        'first_appointment_date' => '\DateTime',
        'first_name' => 'string',
        'gender' => 'string',
        'home_location' => '\Swagger\Client\Model\Location',
        'home_phone' => 'string',
        'is_company' => 'bool',
        'is_prospect' => 'bool',
        'last_formula_notes' => 'string',
        'last_modified_date_time' => '\DateTime',
        'last_name' => 'string',
        'liability' => '\Swagger\Client\Model\Liability',
        'liability_release' => 'bool',
        'membership_icon' => 'int',
        'middle_name' => 'string',
        'mobile_phone' => 'string',
        'mobile_provider' => 'int',
        'new_id' => 'string',
        'notes' => 'string',
        'photo_url' => 'string',
        'postal_code' => 'string',
        'prospect_stage' => '\Swagger\Client\Model\ProspectStage',
        'red_alert' => 'string',
        'referred_by' => 'string',
        'sales_reps' => '\Swagger\Client\Model\SalesRep[]',
        'site_id' => 'int',
        'state' => 'string',
        'status' => 'string',
        'test' => 'bool',
        'unique_id' => 'int',
        'work_extension' => 'string',
        'work_phone' => 'string',
        'yellow_alert' => 'string',
        'send_schedule_emails' => 'bool',
        'send_account_emails' => 'bool',
        'send_promotional_emails' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'account_balance' => 'double',
        'action' => null,
        'active' => null,
        'address_line1' => null,
        'address_line2' => null,
        'appt_gender_pref_male' => null,
        'birth_date' => 'date-time',
        'city' => null,
        'client_credit_card' => null,
        'client_indexes' => null,
        'client_relationships' => null,
        'country' => null,
        'creation_date' => 'date-time',
        'custom_client_fields' => null,
        'email' => null,
        'emergency_contact_info_email' => null,
        'emergency_contact_info_name' => null,
        'emergency_contact_info_phone' => null,
        'emergency_contact_info_relationship' => null,
        'first_appointment_date' => 'date-time',
        'first_name' => null,
        'gender' => null,
        'home_location' => null,
        'home_phone' => null,
        'is_company' => null,
        'is_prospect' => null,
        'last_formula_notes' => null,
        'last_modified_date_time' => 'date-time',
        'last_name' => null,
        'liability' => null,
        'liability_release' => null,
        'membership_icon' => 'int32',
        'middle_name' => null,
        'mobile_phone' => null,
        'mobile_provider' => 'int32',
        'new_id' => null,
        'notes' => null,
        'photo_url' => null,
        'postal_code' => null,
        'prospect_stage' => null,
        'red_alert' => null,
        'referred_by' => null,
        'sales_reps' => null,
        'site_id' => 'int32',
        'state' => null,
        'status' => null,
        'test' => null,
        'unique_id' => 'int64',
        'work_extension' => null,
        'work_phone' => null,
        'yellow_alert' => null,
        'send_schedule_emails' => null,
        'send_account_emails' => null,
        'send_promotional_emails' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'account_balance' => 'AccountBalance',
        'action' => 'Action',
        'active' => 'Active',
        'address_line1' => 'AddressLine1',
        'address_line2' => 'AddressLine2',
        'appt_gender_pref_male' => 'ApptGenderPrefMale',
        'birth_date' => 'BirthDate',
        'city' => 'City',
        'client_credit_card' => 'ClientCreditCard',
        'client_indexes' => 'ClientIndexes',
        'client_relationships' => 'ClientRelationships',
        'country' => 'Country',
        'creation_date' => 'CreationDate',
        'custom_client_fields' => 'CustomClientFields',
        'email' => 'Email',
        'emergency_contact_info_email' => 'EmergencyContactInfoEmail',
        'emergency_contact_info_name' => 'EmergencyContactInfoName',
        'emergency_contact_info_phone' => 'EmergencyContactInfoPhone',
        'emergency_contact_info_relationship' => 'EmergencyContactInfoRelationship',
        'first_appointment_date' => 'FirstAppointmentDate',
        'first_name' => 'FirstName',
        'gender' => 'Gender',
        'home_location' => 'HomeLocation',
        'home_phone' => 'HomePhone',
        'is_company' => 'IsCompany',
        'is_prospect' => 'IsProspect',
        'last_formula_notes' => 'LastFormulaNotes',
        'last_modified_date_time' => 'LastModifiedDateTime',
        'last_name' => 'LastName',
        'liability' => 'Liability',
        'liability_release' => 'LiabilityRelease',
        'membership_icon' => 'MembershipIcon',
        'middle_name' => 'MiddleName',
        'mobile_phone' => 'MobilePhone',
        'mobile_provider' => 'MobileProvider',
        'new_id' => 'NewId',
        'notes' => 'Notes',
        'photo_url' => 'PhotoUrl',
        'postal_code' => 'PostalCode',
        'prospect_stage' => 'ProspectStage',
        'red_alert' => 'RedAlert',
        'referred_by' => 'ReferredBy',
        'sales_reps' => 'SalesReps',
        'site_id' => 'SiteId',
        'state' => 'State',
        'status' => 'Status',
        'test' => 'Test',
        'unique_id' => 'UniqueId',
        'work_extension' => 'WorkExtension',
        'work_phone' => 'WorkPhone',
        'yellow_alert' => 'YellowAlert',
        'send_schedule_emails' => 'SendScheduleEmails',
        'send_account_emails' => 'SendAccountEmails',
        'send_promotional_emails' => 'SendPromotionalEmails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'account_balance' => 'setAccountBalance',
        'action' => 'setAction',
        'active' => 'setActive',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'appt_gender_pref_male' => 'setApptGenderPrefMale',
        'birth_date' => 'setBirthDate',
        'city' => 'setCity',
        'client_credit_card' => 'setClientCreditCard',
        'client_indexes' => 'setClientIndexes',
        'client_relationships' => 'setClientRelationships',
        'country' => 'setCountry',
        'creation_date' => 'setCreationDate',
        'custom_client_fields' => 'setCustomClientFields',
        'email' => 'setEmail',
        'emergency_contact_info_email' => 'setEmergencyContactInfoEmail',
        'emergency_contact_info_name' => 'setEmergencyContactInfoName',
        'emergency_contact_info_phone' => 'setEmergencyContactInfoPhone',
        'emergency_contact_info_relationship' => 'setEmergencyContactInfoRelationship',
        'first_appointment_date' => 'setFirstAppointmentDate',
        'first_name' => 'setFirstName',
        'gender' => 'setGender',
        'home_location' => 'setHomeLocation',
        'home_phone' => 'setHomePhone',
        'is_company' => 'setIsCompany',
        'is_prospect' => 'setIsProspect',
        'last_formula_notes' => 'setLastFormulaNotes',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'last_name' => 'setLastName',
        'liability' => 'setLiability',
        'liability_release' => 'setLiabilityRelease',
        'membership_icon' => 'setMembershipIcon',
        'middle_name' => 'setMiddleName',
        'mobile_phone' => 'setMobilePhone',
        'mobile_provider' => 'setMobileProvider',
        'new_id' => 'setNewId',
        'notes' => 'setNotes',
        'photo_url' => 'setPhotoUrl',
        'postal_code' => 'setPostalCode',
        'prospect_stage' => 'setProspectStage',
        'red_alert' => 'setRedAlert',
        'referred_by' => 'setReferredBy',
        'sales_reps' => 'setSalesReps',
        'site_id' => 'setSiteId',
        'state' => 'setState',
        'status' => 'setStatus',
        'test' => 'setTest',
        'unique_id' => 'setUniqueId',
        'work_extension' => 'setWorkExtension',
        'work_phone' => 'setWorkPhone',
        'yellow_alert' => 'setYellowAlert',
        'send_schedule_emails' => 'setSendScheduleEmails',
        'send_account_emails' => 'setSendAccountEmails',
        'send_promotional_emails' => 'setSendPromotionalEmails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'account_balance' => 'getAccountBalance',
        'action' => 'getAction',
        'active' => 'getActive',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'appt_gender_pref_male' => 'getApptGenderPrefMale',
        'birth_date' => 'getBirthDate',
        'city' => 'getCity',
        'client_credit_card' => 'getClientCreditCard',
        'client_indexes' => 'getClientIndexes',
        'client_relationships' => 'getClientRelationships',
        'country' => 'getCountry',
        'creation_date' => 'getCreationDate',
        'custom_client_fields' => 'getCustomClientFields',
        'email' => 'getEmail',
        'emergency_contact_info_email' => 'getEmergencyContactInfoEmail',
        'emergency_contact_info_name' => 'getEmergencyContactInfoName',
        'emergency_contact_info_phone' => 'getEmergencyContactInfoPhone',
        'emergency_contact_info_relationship' => 'getEmergencyContactInfoRelationship',
        'first_appointment_date' => 'getFirstAppointmentDate',
        'first_name' => 'getFirstName',
        'gender' => 'getGender',
        'home_location' => 'getHomeLocation',
        'home_phone' => 'getHomePhone',
        'is_company' => 'getIsCompany',
        'is_prospect' => 'getIsProspect',
        'last_formula_notes' => 'getLastFormulaNotes',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'last_name' => 'getLastName',
        'liability' => 'getLiability',
        'liability_release' => 'getLiabilityRelease',
        'membership_icon' => 'getMembershipIcon',
        'middle_name' => 'getMiddleName',
        'mobile_phone' => 'getMobilePhone',
        'mobile_provider' => 'getMobileProvider',
        'new_id' => 'getNewId',
        'notes' => 'getNotes',
        'photo_url' => 'getPhotoUrl',
        'postal_code' => 'getPostalCode',
        'prospect_stage' => 'getProspectStage',
        'red_alert' => 'getRedAlert',
        'referred_by' => 'getReferredBy',
        'sales_reps' => 'getSalesReps',
        'site_id' => 'getSiteId',
        'state' => 'getState',
        'status' => 'getStatus',
        'test' => 'getTest',
        'unique_id' => 'getUniqueId',
        'work_extension' => 'getWorkExtension',
        'work_phone' => 'getWorkPhone',
        'yellow_alert' => 'getYellowAlert',
        'send_schedule_emails' => 'getSendScheduleEmails',
        'send_account_emails' => 'getSendAccountEmails',
        'send_promotional_emails' => 'getSendPromotionalEmails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTION_NONE = 'None';
    const ACTION_ADDED = 'Added';
    const ACTION_UPDATED = 'Updated';
    const ACTION_FAILED = 'Failed';
    const ACTION_REMOVED = 'Removed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_NONE,
            self::ACTION_ADDED,
            self::ACTION_UPDATED,
            self::ACTION_FAILED,
            self::ACTION_REMOVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['account_balance'] = isset($data['account_balance']) ? $data['account_balance'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['appt_gender_pref_male'] = isset($data['appt_gender_pref_male']) ? $data['appt_gender_pref_male'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['client_credit_card'] = isset($data['client_credit_card']) ? $data['client_credit_card'] : null;
        $this->container['client_indexes'] = isset($data['client_indexes']) ? $data['client_indexes'] : null;
        $this->container['client_relationships'] = isset($data['client_relationships']) ? $data['client_relationships'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['custom_client_fields'] = isset($data['custom_client_fields']) ? $data['custom_client_fields'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['emergency_contact_info_email'] = isset($data['emergency_contact_info_email']) ? $data['emergency_contact_info_email'] : null;
        $this->container['emergency_contact_info_name'] = isset($data['emergency_contact_info_name']) ? $data['emergency_contact_info_name'] : null;
        $this->container['emergency_contact_info_phone'] = isset($data['emergency_contact_info_phone']) ? $data['emergency_contact_info_phone'] : null;
        $this->container['emergency_contact_info_relationship'] = isset($data['emergency_contact_info_relationship']) ? $data['emergency_contact_info_relationship'] : null;
        $this->container['first_appointment_date'] = isset($data['first_appointment_date']) ? $data['first_appointment_date'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['home_location'] = isset($data['home_location']) ? $data['home_location'] : null;
        $this->container['home_phone'] = isset($data['home_phone']) ? $data['home_phone'] : null;
        $this->container['is_company'] = isset($data['is_company']) ? $data['is_company'] : null;
        $this->container['is_prospect'] = isset($data['is_prospect']) ? $data['is_prospect'] : null;
        $this->container['last_formula_notes'] = isset($data['last_formula_notes']) ? $data['last_formula_notes'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['liability'] = isset($data['liability']) ? $data['liability'] : null;
        $this->container['liability_release'] = isset($data['liability_release']) ? $data['liability_release'] : null;
        $this->container['membership_icon'] = isset($data['membership_icon']) ? $data['membership_icon'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['mobile_provider'] = isset($data['mobile_provider']) ? $data['mobile_provider'] : null;
        $this->container['new_id'] = isset($data['new_id']) ? $data['new_id'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['photo_url'] = isset($data['photo_url']) ? $data['photo_url'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['prospect_stage'] = isset($data['prospect_stage']) ? $data['prospect_stage'] : null;
        $this->container['red_alert'] = isset($data['red_alert']) ? $data['red_alert'] : null;
        $this->container['referred_by'] = isset($data['referred_by']) ? $data['referred_by'] : null;
        $this->container['sales_reps'] = isset($data['sales_reps']) ? $data['sales_reps'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['unique_id'] = isset($data['unique_id']) ? $data['unique_id'] : null;
        $this->container['work_extension'] = isset($data['work_extension']) ? $data['work_extension'] : null;
        $this->container['work_phone'] = isset($data['work_phone']) ? $data['work_phone'] : null;
        $this->container['yellow_alert'] = isset($data['yellow_alert']) ? $data['yellow_alert'] : null;
        $this->container['send_schedule_emails'] = isset($data['send_schedule_emails']) ? $data['send_schedule_emails'] : null;
        $this->container['send_account_emails'] = isset($data['send_account_emails']) ? $data['send_account_emails'] : null;
        $this->container['send_promotional_emails'] = isset($data['send_promotional_emails']) ? $data['send_promotional_emails'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['first_name'] === null) {
            $invalidProperties[] = "'first_name' can't be null";
        }
        if ($this->container['last_name'] === null) {
            $invalidProperties[] = "'last_name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets account_balance
     *
     * @return double
     */
    public function getAccountBalance()
    {
        return $this->container['account_balance'];
    }

    /**
     * Sets account_balance
     *
     * @param double $account_balance The client’s current [account balance](https://mindbody-online-support.force.com/support/s/article/203262013-Adding-account-payments-video-tutorial?language=en_US).
     *
     * @return $this
     */
    public function setAccountBalance($account_balance)
    {
        $this->container['account_balance'] = $account_balance;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action The action taken.
     *
     * @return $this
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active When `true`, indicates that the client is active at the site.<br />  When `false`, indicates that the client is not active at the site.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 The first line of the client’s street address.
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 The second line of the client’s street address, if needed.
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets appt_gender_pref_male
     *
     * @return bool
     */
    public function getApptGenderPrefMale()
    {
        return $this->container['appt_gender_pref_male'];
    }

    /**
     * Sets appt_gender_pref_male
     *
     * @param bool $appt_gender_pref_male When `true`, indicates that the client prefers services to be provided by a male service provider.<br />  When `false`, indicates that the client prefers services to be provided by a female service provider.<br />  When `null`, indicates that the client has no preference.  Default: **null**
     *
     * @return $this
     */
    public function setApptGenderPrefMale($appt_gender_pref_male)
    {
        $this->container['appt_gender_pref_male'] = $appt_gender_pref_male;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime $birth_date The client’s date of birth.
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The client’s city.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets client_credit_card
     *
     * @return \Swagger\Client\Model\ClientCreditCard
     */
    public function getClientCreditCard()
    {
        return $this->container['client_credit_card'];
    }

    /**
     * Sets client_credit_card
     *
     * @param \Swagger\Client\Model\ClientCreditCard $client_credit_card Contains information about the client’s credit card.
     *
     * @return $this
     */
    public function setClientCreditCard($client_credit_card)
    {
        $this->container['client_credit_card'] = $client_credit_card;

        return $this;
    }

    /**
     * Gets client_indexes
     *
     * @return \Swagger\Client\Model\AssignedClientIndex[]
     */
    public function getClientIndexes()
    {
        return $this->container['client_indexes'];
    }

    /**
     * Sets client_indexes
     *
     * @param \Swagger\Client\Model\AssignedClientIndex[] $client_indexes Contains a list of the indexes and client index values to be assigned to the client.
     *
     * @return $this
     */
    public function setClientIndexes($client_indexes)
    {
        $this->container['client_indexes'] = $client_indexes;

        return $this;
    }

    /**
     * Gets client_relationships
     *
     * @return \Swagger\Client\Model\ClientRelationship[]
     */
    public function getClientRelationships()
    {
        return $this->container['client_relationships'];
    }

    /**
     * Sets client_relationships
     *
     * @param \Swagger\Client\Model\ClientRelationship[] $client_relationships Contains information about client relationships to be assigned to the client.
     *
     * @return $this
     */
    public function setClientRelationships($client_relationships)
    {
        $this->container['client_relationships'] = $client_relationships;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country in which the client is located.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date The date when the client was added to the business, either by the client from the online store or by a staff member at the subscriber’s business. This value always returns in the format yyyy-mm-ddThh:mm:ss:ms.
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets custom_client_fields
     *
     * @return \Swagger\Client\Model\CustomClientFieldValue[]
     */
    public function getCustomClientFields()
    {
        return $this->container['custom_client_fields'];
    }

    /**
     * Sets custom_client_fields
     *
     * @param \Swagger\Client\Model\CustomClientFieldValue[] $custom_client_fields Contains information about the custom fields to be assigned to the client.
     *
     * @return $this
     */
    public function setCustomClientFields($custom_client_fields)
    {
        $this->container['custom_client_fields'] = $custom_client_fields;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The client’s email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets emergency_contact_info_email
     *
     * @return string
     */
    public function getEmergencyContactInfoEmail()
    {
        return $this->container['emergency_contact_info_email'];
    }

    /**
     * Sets emergency_contact_info_email
     *
     * @param string $emergency_contact_info_email The email address of the client’s emergency contact.<br />  For more information, see [Children’s program features(emergency contact information)](https://support.mindbodyonline.com/s/article/203259283-Children-s-program-features-emergency-contact-information?language=en_US).
     *
     * @return $this
     */
    public function setEmergencyContactInfoEmail($emergency_contact_info_email)
    {
        $this->container['emergency_contact_info_email'] = $emergency_contact_info_email;

        return $this;
    }

    /**
     * Gets emergency_contact_info_name
     *
     * @return string
     */
    public function getEmergencyContactInfoName()
    {
        return $this->container['emergency_contact_info_name'];
    }

    /**
     * Sets emergency_contact_info_name
     *
     * @param string $emergency_contact_info_name The name of the client’s emergency contact.
     *
     * @return $this
     */
    public function setEmergencyContactInfoName($emergency_contact_info_name)
    {
        $this->container['emergency_contact_info_name'] = $emergency_contact_info_name;

        return $this;
    }

    /**
     * Gets emergency_contact_info_phone
     *
     * @return string
     */
    public function getEmergencyContactInfoPhone()
    {
        return $this->container['emergency_contact_info_phone'];
    }

    /**
     * Sets emergency_contact_info_phone
     *
     * @param string $emergency_contact_info_phone The phone number of the client’s emergency contact.
     *
     * @return $this
     */
    public function setEmergencyContactInfoPhone($emergency_contact_info_phone)
    {
        $this->container['emergency_contact_info_phone'] = $emergency_contact_info_phone;

        return $this;
    }

    /**
     * Gets emergency_contact_info_relationship
     *
     * @return string
     */
    public function getEmergencyContactInfoRelationship()
    {
        return $this->container['emergency_contact_info_relationship'];
    }

    /**
     * Sets emergency_contact_info_relationship
     *
     * @param string $emergency_contact_info_relationship The client’s relationship with the emergency contact, for example, mother or spouse.
     *
     * @return $this
     */
    public function setEmergencyContactInfoRelationship($emergency_contact_info_relationship)
    {
        $this->container['emergency_contact_info_relationship'] = $emergency_contact_info_relationship;

        return $this;
    }

    /**
     * Gets first_appointment_date
     *
     * @return \DateTime
     */
    public function getFirstAppointmentDate()
    {
        return $this->container['first_appointment_date'];
    }

    /**
     * Sets first_appointment_date
     *
     * @param \DateTime $first_appointment_date The date of the client’s first booked appointment at the business.
     *
     * @return $this
     */
    public function setFirstAppointmentDate($first_appointment_date)
    {
        $this->container['first_appointment_date'] = $first_appointment_date;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The client’s first name. You must specify a first name when you add a client.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender The client’s gender.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets home_location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getHomeLocation()
    {
        return $this->container['home_location'];
    }

    /**
     * Sets home_location
     *
     * @param \Swagger\Client\Model\Location $home_location Sets the client’s home location to the passed location, based on its ID.
     *
     * @return $this
     */
    public function setHomeLocation($home_location)
    {
        $this->container['home_location'] = $home_location;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string $home_phone The client’s home phone number.
     *
     * @return $this
     */
    public function setHomePhone($home_phone)
    {
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets is_company
     *
     * @return bool
     */
    public function getIsCompany()
    {
        return $this->container['is_company'];
    }

    /**
     * Sets is_company
     *
     * @param bool $is_company When `true`, indicates that the client should be marked as a company at the business.<br />  When `false`, indicates the client is an individual and does not represent a company.
     *
     * @return $this
     */
    public function setIsCompany($is_company)
    {
        $this->container['is_company'] = $is_company;

        return $this;
    }

    /**
     * Gets is_prospect
     *
     * @return bool
     */
    public function getIsProspect()
    {
        return $this->container['is_prospect'];
    }

    /**
     * Sets is_prospect
     *
     * @param bool $is_prospect This value is set only if the business owner allows individuals to be prospects.<br />  When `true`, indicates that the client should be marked as a prospect for the business.<br />  When `false`, indicates that the client should not be marked as a prospect for the business.
     *
     * @return $this
     */
    public function setIsProspect($is_prospect)
    {
        $this->container['is_prospect'] = $is_prospect;

        return $this;
    }

    /**
     * Gets last_formula_notes
     *
     * @return string
     */
    public function getLastFormulaNotes()
    {
        return $this->container['last_formula_notes'];
    }

    /**
     * Sets last_formula_notes
     *
     * @param string $last_formula_notes The last [formula note](https://support.mindbodyonline.com/s/article/203259903-Appointments-Formula-notes?language=en_US) entered for the client.
     *
     * @return $this
     */
    public function setLastFormulaNotes($last_formula_notes)
    {
        $this->container['last_formula_notes'] = $last_formula_notes;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time The UTC date and time when the client’s information was last modified.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The client’s last name. You must specify a last name when you add a client.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets liability
     *
     * @return \Swagger\Client\Model\Liability
     */
    public function getLiability()
    {
        return $this->container['liability'];
    }

    /**
     * Sets liability
     *
     * @param \Swagger\Client\Model\Liability $liability Contains the client’s liability agreement information for the business.
     *
     * @return $this
     */
    public function setLiability($liability)
    {
        $this->container['liability'] = $liability;

        return $this;
    }

    /**
     * Gets liability_release
     *
     * @return bool
     */
    public function getLiabilityRelease()
    {
        return $this->container['liability_release'];
    }

    /**
     * Sets liability_release
     *
     * @param bool $liability_release Passing `true` sets the client’s liability information as follows:  * `IsReleased` is set to `true`.  * `AgreementDate` is set to the time zone of the business when the call was processed.  * `ReleasedBy` is set to `null` if the call is made by the client, `0` if the call was made by the business owner, or to a specific staff member’s ID if a staff member made the call.  Passing `false` sets the client’s liability information as follows:  * `IsReleased` is set to `false`.  * `AgreementDate` is set to `null`.  * `ReleasedBy` is set to `null`.
     *
     * @return $this
     */
    public function setLiabilityRelease($liability_release)
    {
        $this->container['liability_release'] = $liability_release;

        return $this;
    }

    /**
     * Gets membership_icon
     *
     * @return int
     */
    public function getMembershipIcon()
    {
        return $this->container['membership_icon'];
    }

    /**
     * Sets membership_icon
     *
     * @param int $membership_icon The ID of the membership icon displayed next to the client’s name, if the client has a membership on their account.
     *
     * @return $this
     */
    public function setMembershipIcon($membership_icon)
    {
        $this->container['membership_icon'] = $membership_icon;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name The client’s middle name.
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string $mobile_phone The client’s mobile phone number.
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets mobile_provider
     *
     * @return int
     */
    public function getMobileProvider()
    {
        return $this->container['mobile_provider'];
    }

    /**
     * Sets mobile_provider
     *
     * @param int $mobile_provider The client's mobile provider.
     *
     * @return $this
     */
    public function setMobileProvider($mobile_provider)
    {
        $this->container['mobile_provider'] = $mobile_provider;

        return $this;
    }

    /**
     * Gets new_id
     *
     * @return string
     */
    public function getNewId()
    {
        return $this->container['new_id'];
    }

    /**
     * Sets new_id
     *
     * @param string $new_id When passed, sets the client's ID to this value. Otherwise, the client's ID will match their `UniqueId`.
     *
     * @return $this
     */
    public function setNewId($new_id)
    {
        $this->container['new_id'] = $new_id;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Any notes entered on the client’s account by staff members. This value should never be shown to clients unless the business owner has a specific reason for showing them.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets photo_url
     *
     * @return string
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     *
     * @param string $photo_url The URL for the client’s photo, if one has been uploaded.
     *
     * @return $this
     */
    public function setPhotoUrl($photo_url)
    {
        $this->container['photo_url'] = $photo_url;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code The client’s postal code.
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets prospect_stage
     *
     * @return \Swagger\Client\Model\ProspectStage
     */
    public function getProspectStage()
    {
        return $this->container['prospect_stage'];
    }

    /**
     * Sets prospect_stage
     *
     * @param \Swagger\Client\Model\ProspectStage $prospect_stage Contains information about the client [prospect stage](https://support.mindbodyonline.com/s/article/206176457-Prospect-Stages?language=en_US).
     *
     * @return $this
     */
    public function setProspectStage($prospect_stage)
    {
        $this->container['prospect_stage'] = $prospect_stage;

        return $this;
    }

    /**
     * Gets red_alert
     *
     * @return string
     */
    public function getRedAlert()
    {
        return $this->container['red_alert'];
    }

    /**
     * Sets red_alert
     *
     * @param string $red_alert Contains any red alert information entered by the business owner for the client.
     *
     * @return $this
     */
    public function setRedAlert($red_alert)
    {
        $this->container['red_alert'] = $red_alert;

        return $this;
    }

    /**
     * Gets referred_by
     *
     * @return string
     */
    public function getReferredBy()
    {
        return $this->container['referred_by'];
    }

    /**
     * Sets referred_by
     *
     * @param string $referred_by Specifies how the client was referred to the business. You can get a list of possible strings using the `GET ClientReferralTypes` endpoint.<br />  For more information, see [Referral types and referral subtypes](https://support.mindbodyonline.com/s/article/203259393-Referral-types-and-referral-subtypes?language=en_US).
     *
     * @return $this
     */
    public function setReferredBy($referred_by)
    {
        $this->container['referred_by'] = $referred_by;

        return $this;
    }

    /**
     * Gets sales_reps
     *
     * @return \Swagger\Client\Model\SalesRep[]
     */
    public function getSalesReps()
    {
        return $this->container['sales_reps'];
    }

    /**
     * Sets sales_reps
     *
     * @param \Swagger\Client\Model\SalesRep[] $sales_reps Contains information about the sales representatives to be assigned to the new client.
     *
     * @return $this
     */
    public function setSalesReps($sales_reps)
    {
        $this->container['sales_reps'] = $sales_reps;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return int
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param int $site_id The ID of the site.
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The client’s state.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The client’s status.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test When `true`, indicates that test mode is enabled. The method is validated, but no client data is added or updated.<br />  Default: **false**
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return int
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param int $unique_id The client’s system-generated ID at the business. This value cannot be changed by business owners and is always unique across all clients at the business. This ID is not widely used in the Public API, but can be used by your application to uniquely identify clients.
     *
     * @return $this
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets work_extension
     *
     * @return string
     */
    public function getWorkExtension()
    {
        return $this->container['work_extension'];
    }

    /**
     * Sets work_extension
     *
     * @param string $work_extension The client’s work phone extension number.
     *
     * @return $this
     */
    public function setWorkExtension($work_extension)
    {
        $this->container['work_extension'] = $work_extension;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string $work_phone The client’s work phone number.
     *
     * @return $this
     */
    public function setWorkPhone($work_phone)
    {
        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets yellow_alert
     *
     * @return string
     */
    public function getYellowAlert()
    {
        return $this->container['yellow_alert'];
    }

    /**
     * Sets yellow_alert
     *
     * @param string $yellow_alert Contains any yellow alert information entered by the business owner for the client.
     *
     * @return $this
     */
    public function setYellowAlert($yellow_alert)
    {
        $this->container['yellow_alert'] = $yellow_alert;

        return $this;
    }

    /**
     * Gets send_schedule_emails
     *
     * @return bool
     */
    public function getSendScheduleEmails()
    {
        return $this->container['send_schedule_emails'];
    }

    /**
     * Sets send_schedule_emails
     *
     * @param bool $send_schedule_emails When `true`, indicates that the client opts to receive schedule emails.
     *
     * @return $this
     */
    public function setSendScheduleEmails($send_schedule_emails)
    {
        $this->container['send_schedule_emails'] = $send_schedule_emails;

        return $this;
    }

    /**
     * Gets send_account_emails
     *
     * @return bool
     */
    public function getSendAccountEmails()
    {
        return $this->container['send_account_emails'];
    }

    /**
     * Sets send_account_emails
     *
     * @param bool $send_account_emails When `true`, indicates that the client opts to receive account emails.
     *
     * @return $this
     */
    public function setSendAccountEmails($send_account_emails)
    {
        $this->container['send_account_emails'] = $send_account_emails;

        return $this;
    }

    /**
     * Gets send_promotional_emails
     *
     * @return bool
     */
    public function getSendPromotionalEmails()
    {
        return $this->container['send_promotional_emails'];
    }

    /**
     * Sets send_promotional_emails
     *
     * @param bool $send_promotional_emails When `true`, indicates that the client opts to receive promotional emails.
     *
     * @return $this
     */
    public function setSendPromotionalEmails($send_promotional_emails)
    {
        $this->container['send_promotional_emails'] = $send_promotional_emails;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


