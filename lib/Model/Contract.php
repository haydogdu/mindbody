<?php
/**
 * Contract
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Contract Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Contract implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Contract';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'description' => 'string',
        'assigns_membership_id' => 'int',
        'assigns_membership_name' => 'string',
        'sold_online' => 'bool',
        'contract_items' => '\Swagger\Client\Model\ContractItem[]',
        'intro_offer' => 'string',
        'autopay_schedule' => '\Swagger\Client\Model\AutopaySchedule',
        'number_of_autopays' => 'int',
        'autopay_trigger_type' => 'string',
        'action_upon_completion_of_autopays' => 'string',
        'clients_charged_on' => 'string',
        'clients_charged_on_specific_date' => '\DateTime',
        'discount_amount' => 'double',
        'deposit_amount' => 'double',
        'first_autopay_free' => 'bool',
        'last_autopay_free' => 'bool',
        'client_terminate_online' => 'bool',
        'membership_type_restrictions' => '\Swagger\Client\Model\MembershipTypeRestriction[]',
        'location_purchase_restriction_ids' => 'int[]',
        'location_purchase_restriction_names' => 'string[]',
        'agreement_terms' => 'string',
        'requires_electronic_confirmation' => 'bool',
        'autopay_enabled' => 'bool',
        'first_payment_amount_subtotal' => 'double',
        'first_payment_amount_tax' => 'double',
        'first_payment_amount_total' => 'double',
        'recurring_payment_amount_subtotal' => 'double',
        'recurring_payment_amount_tax' => 'double',
        'recurring_payment_amount_total' => 'double',
        'total_contract_amount_subtotal' => 'double',
        'total_contract_amount_tax' => 'double',
        'total_contract_amount_total' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'name' => null,
        'description' => null,
        'assigns_membership_id' => 'int32',
        'assigns_membership_name' => null,
        'sold_online' => null,
        'contract_items' => null,
        'intro_offer' => null,
        'autopay_schedule' => null,
        'number_of_autopays' => 'int32',
        'autopay_trigger_type' => null,
        'action_upon_completion_of_autopays' => null,
        'clients_charged_on' => null,
        'clients_charged_on_specific_date' => 'date-time',
        'discount_amount' => 'double',
        'deposit_amount' => 'double',
        'first_autopay_free' => null,
        'last_autopay_free' => null,
        'client_terminate_online' => null,
        'membership_type_restrictions' => null,
        'location_purchase_restriction_ids' => 'int32',
        'location_purchase_restriction_names' => null,
        'agreement_terms' => null,
        'requires_electronic_confirmation' => null,
        'autopay_enabled' => null,
        'first_payment_amount_subtotal' => 'double',
        'first_payment_amount_tax' => 'double',
        'first_payment_amount_total' => 'double',
        'recurring_payment_amount_subtotal' => 'double',
        'recurring_payment_amount_tax' => 'double',
        'recurring_payment_amount_total' => 'double',
        'total_contract_amount_subtotal' => 'double',
        'total_contract_amount_tax' => 'double',
        'total_contract_amount_total' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'description' => 'Description',
        'assigns_membership_id' => 'AssignsMembershipId',
        'assigns_membership_name' => 'AssignsMembershipName',
        'sold_online' => 'SoldOnline',
        'contract_items' => 'ContractItems',
        'intro_offer' => 'IntroOffer',
        'autopay_schedule' => 'AutopaySchedule',
        'number_of_autopays' => 'NumberOfAutopays',
        'autopay_trigger_type' => 'AutopayTriggerType',
        'action_upon_completion_of_autopays' => 'ActionUponCompletionOfAutopays',
        'clients_charged_on' => 'ClientsChargedOn',
        'clients_charged_on_specific_date' => 'ClientsChargedOnSpecificDate',
        'discount_amount' => 'DiscountAmount',
        'deposit_amount' => 'DepositAmount',
        'first_autopay_free' => 'FirstAutopayFree',
        'last_autopay_free' => 'LastAutopayFree',
        'client_terminate_online' => 'ClientTerminateOnline',
        'membership_type_restrictions' => 'MembershipTypeRestrictions',
        'location_purchase_restriction_ids' => 'LocationPurchaseRestrictionIds',
        'location_purchase_restriction_names' => 'LocationPurchaseRestrictionNames',
        'agreement_terms' => 'AgreementTerms',
        'requires_electronic_confirmation' => 'RequiresElectronicConfirmation',
        'autopay_enabled' => 'AutopayEnabled',
        'first_payment_amount_subtotal' => 'FirstPaymentAmountSubtotal',
        'first_payment_amount_tax' => 'FirstPaymentAmountTax',
        'first_payment_amount_total' => 'FirstPaymentAmountTotal',
        'recurring_payment_amount_subtotal' => 'RecurringPaymentAmountSubtotal',
        'recurring_payment_amount_tax' => 'RecurringPaymentAmountTax',
        'recurring_payment_amount_total' => 'RecurringPaymentAmountTotal',
        'total_contract_amount_subtotal' => 'TotalContractAmountSubtotal',
        'total_contract_amount_tax' => 'TotalContractAmountTax',
        'total_contract_amount_total' => 'TotalContractAmountTotal'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'description' => 'setDescription',
        'assigns_membership_id' => 'setAssignsMembershipId',
        'assigns_membership_name' => 'setAssignsMembershipName',
        'sold_online' => 'setSoldOnline',
        'contract_items' => 'setContractItems',
        'intro_offer' => 'setIntroOffer',
        'autopay_schedule' => 'setAutopaySchedule',
        'number_of_autopays' => 'setNumberOfAutopays',
        'autopay_trigger_type' => 'setAutopayTriggerType',
        'action_upon_completion_of_autopays' => 'setActionUponCompletionOfAutopays',
        'clients_charged_on' => 'setClientsChargedOn',
        'clients_charged_on_specific_date' => 'setClientsChargedOnSpecificDate',
        'discount_amount' => 'setDiscountAmount',
        'deposit_amount' => 'setDepositAmount',
        'first_autopay_free' => 'setFirstAutopayFree',
        'last_autopay_free' => 'setLastAutopayFree',
        'client_terminate_online' => 'setClientTerminateOnline',
        'membership_type_restrictions' => 'setMembershipTypeRestrictions',
        'location_purchase_restriction_ids' => 'setLocationPurchaseRestrictionIds',
        'location_purchase_restriction_names' => 'setLocationPurchaseRestrictionNames',
        'agreement_terms' => 'setAgreementTerms',
        'requires_electronic_confirmation' => 'setRequiresElectronicConfirmation',
        'autopay_enabled' => 'setAutopayEnabled',
        'first_payment_amount_subtotal' => 'setFirstPaymentAmountSubtotal',
        'first_payment_amount_tax' => 'setFirstPaymentAmountTax',
        'first_payment_amount_total' => 'setFirstPaymentAmountTotal',
        'recurring_payment_amount_subtotal' => 'setRecurringPaymentAmountSubtotal',
        'recurring_payment_amount_tax' => 'setRecurringPaymentAmountTax',
        'recurring_payment_amount_total' => 'setRecurringPaymentAmountTotal',
        'total_contract_amount_subtotal' => 'setTotalContractAmountSubtotal',
        'total_contract_amount_tax' => 'setTotalContractAmountTax',
        'total_contract_amount_total' => 'setTotalContractAmountTotal'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'description' => 'getDescription',
        'assigns_membership_id' => 'getAssignsMembershipId',
        'assigns_membership_name' => 'getAssignsMembershipName',
        'sold_online' => 'getSoldOnline',
        'contract_items' => 'getContractItems',
        'intro_offer' => 'getIntroOffer',
        'autopay_schedule' => 'getAutopaySchedule',
        'number_of_autopays' => 'getNumberOfAutopays',
        'autopay_trigger_type' => 'getAutopayTriggerType',
        'action_upon_completion_of_autopays' => 'getActionUponCompletionOfAutopays',
        'clients_charged_on' => 'getClientsChargedOn',
        'clients_charged_on_specific_date' => 'getClientsChargedOnSpecificDate',
        'discount_amount' => 'getDiscountAmount',
        'deposit_amount' => 'getDepositAmount',
        'first_autopay_free' => 'getFirstAutopayFree',
        'last_autopay_free' => 'getLastAutopayFree',
        'client_terminate_online' => 'getClientTerminateOnline',
        'membership_type_restrictions' => 'getMembershipTypeRestrictions',
        'location_purchase_restriction_ids' => 'getLocationPurchaseRestrictionIds',
        'location_purchase_restriction_names' => 'getLocationPurchaseRestrictionNames',
        'agreement_terms' => 'getAgreementTerms',
        'requires_electronic_confirmation' => 'getRequiresElectronicConfirmation',
        'autopay_enabled' => 'getAutopayEnabled',
        'first_payment_amount_subtotal' => 'getFirstPaymentAmountSubtotal',
        'first_payment_amount_tax' => 'getFirstPaymentAmountTax',
        'first_payment_amount_total' => 'getFirstPaymentAmountTotal',
        'recurring_payment_amount_subtotal' => 'getRecurringPaymentAmountSubtotal',
        'recurring_payment_amount_tax' => 'getRecurringPaymentAmountTax',
        'recurring_payment_amount_total' => 'getRecurringPaymentAmountTotal',
        'total_contract_amount_subtotal' => 'getTotalContractAmountSubtotal',
        'total_contract_amount_tax' => 'getTotalContractAmountTax',
        'total_contract_amount_total' => 'getTotalContractAmountTotal'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['assigns_membership_id'] = isset($data['assigns_membership_id']) ? $data['assigns_membership_id'] : null;
        $this->container['assigns_membership_name'] = isset($data['assigns_membership_name']) ? $data['assigns_membership_name'] : null;
        $this->container['sold_online'] = isset($data['sold_online']) ? $data['sold_online'] : null;
        $this->container['contract_items'] = isset($data['contract_items']) ? $data['contract_items'] : null;
        $this->container['intro_offer'] = isset($data['intro_offer']) ? $data['intro_offer'] : null;
        $this->container['autopay_schedule'] = isset($data['autopay_schedule']) ? $data['autopay_schedule'] : null;
        $this->container['number_of_autopays'] = isset($data['number_of_autopays']) ? $data['number_of_autopays'] : null;
        $this->container['autopay_trigger_type'] = isset($data['autopay_trigger_type']) ? $data['autopay_trigger_type'] : null;
        $this->container['action_upon_completion_of_autopays'] = isset($data['action_upon_completion_of_autopays']) ? $data['action_upon_completion_of_autopays'] : null;
        $this->container['clients_charged_on'] = isset($data['clients_charged_on']) ? $data['clients_charged_on'] : null;
        $this->container['clients_charged_on_specific_date'] = isset($data['clients_charged_on_specific_date']) ? $data['clients_charged_on_specific_date'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['deposit_amount'] = isset($data['deposit_amount']) ? $data['deposit_amount'] : null;
        $this->container['first_autopay_free'] = isset($data['first_autopay_free']) ? $data['first_autopay_free'] : null;
        $this->container['last_autopay_free'] = isset($data['last_autopay_free']) ? $data['last_autopay_free'] : null;
        $this->container['client_terminate_online'] = isset($data['client_terminate_online']) ? $data['client_terminate_online'] : null;
        $this->container['membership_type_restrictions'] = isset($data['membership_type_restrictions']) ? $data['membership_type_restrictions'] : null;
        $this->container['location_purchase_restriction_ids'] = isset($data['location_purchase_restriction_ids']) ? $data['location_purchase_restriction_ids'] : null;
        $this->container['location_purchase_restriction_names'] = isset($data['location_purchase_restriction_names']) ? $data['location_purchase_restriction_names'] : null;
        $this->container['agreement_terms'] = isset($data['agreement_terms']) ? $data['agreement_terms'] : null;
        $this->container['requires_electronic_confirmation'] = isset($data['requires_electronic_confirmation']) ? $data['requires_electronic_confirmation'] : null;
        $this->container['autopay_enabled'] = isset($data['autopay_enabled']) ? $data['autopay_enabled'] : null;
        $this->container['first_payment_amount_subtotal'] = isset($data['first_payment_amount_subtotal']) ? $data['first_payment_amount_subtotal'] : null;
        $this->container['first_payment_amount_tax'] = isset($data['first_payment_amount_tax']) ? $data['first_payment_amount_tax'] : null;
        $this->container['first_payment_amount_total'] = isset($data['first_payment_amount_total']) ? $data['first_payment_amount_total'] : null;
        $this->container['recurring_payment_amount_subtotal'] = isset($data['recurring_payment_amount_subtotal']) ? $data['recurring_payment_amount_subtotal'] : null;
        $this->container['recurring_payment_amount_tax'] = isset($data['recurring_payment_amount_tax']) ? $data['recurring_payment_amount_tax'] : null;
        $this->container['recurring_payment_amount_total'] = isset($data['recurring_payment_amount_total']) ? $data['recurring_payment_amount_total'] : null;
        $this->container['total_contract_amount_subtotal'] = isset($data['total_contract_amount_subtotal']) ? $data['total_contract_amount_subtotal'] : null;
        $this->container['total_contract_amount_tax'] = isset($data['total_contract_amount_tax']) ? $data['total_contract_amount_tax'] : null;
        $this->container['total_contract_amount_total'] = isset($data['total_contract_amount_total']) ? $data['total_contract_amount_total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The contract’s ID at the subscriber’s business.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the contract.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the contract.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets assigns_membership_id
     *
     * @return int
     */
    public function getAssignsMembershipId()
    {
        return $this->container['assigns_membership_id'];
    }

    /**
     * Sets assigns_membership_id
     *
     * @param int $assigns_membership_id The ID of the membership that was assigned to the client when the client signed up for a contract.
     *
     * @return $this
     */
    public function setAssignsMembershipId($assigns_membership_id)
    {
        $this->container['assigns_membership_id'] = $assigns_membership_id;

        return $this;
    }

    /**
     * Gets assigns_membership_name
     *
     * @return string
     */
    public function getAssignsMembershipName()
    {
        return $this->container['assigns_membership_name'];
    }

    /**
     * Sets assigns_membership_name
     *
     * @param string $assigns_membership_name The name of the membership that was assigned to the client when the client signed up for this contract.
     *
     * @return $this
     */
    public function setAssignsMembershipName($assigns_membership_name)
    {
        $this->container['assigns_membership_name'] = $assigns_membership_name;

        return $this;
    }

    /**
     * Gets sold_online
     *
     * @return bool
     */
    public function getSoldOnline()
    {
        return $this->container['sold_online'];
    }

    /**
     * Sets sold_online
     *
     * @param bool $sold_online When `true`, indicates that this membership is intended to be shown to clients in client experiences.<br />  When `false`, this contract should only be shown to staff members.
     *
     * @return $this
     */
    public function setSoldOnline($sold_online)
    {
        $this->container['sold_online'] = $sold_online;

        return $this;
    }

    /**
     * Gets contract_items
     *
     * @return \Swagger\Client\Model\ContractItem[]
     */
    public function getContractItems()
    {
        return $this->container['contract_items'];
    }

    /**
     * Sets contract_items
     *
     * @param \Swagger\Client\Model\ContractItem[] $contract_items Contains information about the items in the contract.
     *
     * @return $this
     */
    public function setContractItems($contract_items)
    {
        $this->container['contract_items'] = $contract_items;

        return $this;
    }

    /**
     * Gets intro_offer
     *
     * @return string
     */
    public function getIntroOffer()
    {
        return $this->container['intro_offer'];
    }

    /**
     * Sets intro_offer
     *
     * @param string $intro_offer Defines whether this contract is treated as an introductory offer. If this is an introductory offer, then clients are always charged a set number of times rather than month to month, using their AutoPays. Possible values are:  * None  * NewConsumer  * NewAndReturningConsumer
     *
     * @return $this
     */
    public function setIntroOffer($intro_offer)
    {
        $this->container['intro_offer'] = $intro_offer;

        return $this;
    }

    /**
     * Gets autopay_schedule
     *
     * @return \Swagger\Client\Model\AutopaySchedule
     */
    public function getAutopaySchedule()
    {
        return $this->container['autopay_schedule'];
    }

    /**
     * Sets autopay_schedule
     *
     * @param \Swagger\Client\Model\AutopaySchedule $autopay_schedule Contains information about the AutoPay schedule. This parameter is null if `AutopayTriggerType` has a value of `PricingOptionRunsOutOrExpires`.
     *
     * @return $this
     */
    public function setAutopaySchedule($autopay_schedule)
    {
        $this->container['autopay_schedule'] = $autopay_schedule;

        return $this;
    }

    /**
     * Gets number_of_autopays
     *
     * @return int
     */
    public function getNumberOfAutopays()
    {
        return $this->container['number_of_autopays'];
    }

    /**
     * Sets number_of_autopays
     *
     * @param int $number_of_autopays The number of times that the AutoPay is to be run. This value is null if `FrequencyType` is `MonthToMonth`.
     *
     * @return $this
     */
    public function setNumberOfAutopays($number_of_autopays)
    {
        $this->container['number_of_autopays'] = $number_of_autopays;

        return $this;
    }

    /**
     * Gets autopay_trigger_type
     *
     * @return string
     */
    public function getAutopayTriggerType()
    {
        return $this->container['autopay_trigger_type'];
    }

    /**
     * Sets autopay_trigger_type
     *
     * @param string $autopay_trigger_type Defines whether the AutoPay, if applicable to this contract, runs on a set schedule or when the pricing option runs out or expires. Possible values are:  * OnSetSchedule  * PricingOptionRunsOutOrExpires
     *
     * @return $this
     */
    public function setAutopayTriggerType($autopay_trigger_type)
    {
        $this->container['autopay_trigger_type'] = $autopay_trigger_type;

        return $this;
    }

    /**
     * Gets action_upon_completion_of_autopays
     *
     * @return string
     */
    public function getActionUponCompletionOfAutopays()
    {
        return $this->container['action_upon_completion_of_autopays'];
    }

    /**
     * Sets action_upon_completion_of_autopays
     *
     * @param string $action_upon_completion_of_autopays The renewal action to be taken when this AutoPay is completed. Possible values are:  * ContractExpires  * ContractAutomaticallyRenews
     *
     * @return $this
     */
    public function setActionUponCompletionOfAutopays($action_upon_completion_of_autopays)
    {
        $this->container['action_upon_completion_of_autopays'] = $action_upon_completion_of_autopays;

        return $this;
    }

    /**
     * Gets clients_charged_on
     *
     * @return string
     */
    public function getClientsChargedOn()
    {
        return $this->container['clients_charged_on'];
    }

    /**
     * Sets clients_charged_on
     *
     * @param string $clients_charged_on The value that indicates when clients are charged. Possible values are:  * OnSaleDate  * FirstOfTheMonth  * FifteenthOfTheMonth  * LastDayOfTheMonth  * FirstOrFifteenthOfTheMonth  * FirstOrSixteenthOfTheMonth  * FifteenthOrEndOfTheMonth  * SpecificDate
     *
     * @return $this
     */
    public function setClientsChargedOn($clients_charged_on)
    {
        $this->container['clients_charged_on'] = $clients_charged_on;

        return $this;
    }

    /**
     * Gets clients_charged_on_specific_date
     *
     * @return \DateTime
     */
    public function getClientsChargedOnSpecificDate()
    {
        return $this->container['clients_charged_on_specific_date'];
    }

    /**
     * Sets clients_charged_on_specific_date
     *
     * @param \DateTime $clients_charged_on_specific_date If `ClientsChargedOn` is defined as a specific date, this property holds the value of that date. Otherwise, this property is null.
     *
     * @return $this
     */
    public function setClientsChargedOnSpecificDate($clients_charged_on_specific_date)
    {
        $this->container['clients_charged_on_specific_date'] = $clients_charged_on_specific_date;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount The calculated discount applied to the items in this contract.
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets deposit_amount
     *
     * @return double
     */
    public function getDepositAmount()
    {
        return $this->container['deposit_amount'];
    }

    /**
     * Sets deposit_amount
     *
     * @param double $deposit_amount The amount of the deposit required for this contract.
     *
     * @return $this
     */
    public function setDepositAmount($deposit_amount)
    {
        $this->container['deposit_amount'] = $deposit_amount;

        return $this;
    }

    /**
     * Gets first_autopay_free
     *
     * @return bool
     */
    public function getFirstAutopayFree()
    {
        return $this->container['first_autopay_free'];
    }

    /**
     * Sets first_autopay_free
     *
     * @param bool $first_autopay_free When `true`, indicates that the first payment for the AutoPay is free.
     *
     * @return $this
     */
    public function setFirstAutopayFree($first_autopay_free)
    {
        $this->container['first_autopay_free'] = $first_autopay_free;

        return $this;
    }

    /**
     * Gets last_autopay_free
     *
     * @return bool
     */
    public function getLastAutopayFree()
    {
        return $this->container['last_autopay_free'];
    }

    /**
     * Sets last_autopay_free
     *
     * @param bool $last_autopay_free When `true`, indicates that the last payment for the AutoPay is free.
     *
     * @return $this
     */
    public function setLastAutopayFree($last_autopay_free)
    {
        $this->container['last_autopay_free'] = $last_autopay_free;

        return $this;
    }

    /**
     * Gets client_terminate_online
     *
     * @return bool
     */
    public function getClientTerminateOnline()
    {
        return $this->container['client_terminate_online'];
    }

    /**
     * Sets client_terminate_online
     *
     * @param bool $client_terminate_online When `true`, indicates that the client can terminate this contract on the Internet.
     *
     * @return $this
     */
    public function setClientTerminateOnline($client_terminate_online)
    {
        $this->container['client_terminate_online'] = $client_terminate_online;

        return $this;
    }

    /**
     * Gets membership_type_restrictions
     *
     * @return \Swagger\Client\Model\MembershipTypeRestriction[]
     */
    public function getMembershipTypeRestrictions()
    {
        return $this->container['membership_type_restrictions'];
    }

    /**
     * Sets membership_type_restrictions
     *
     * @param \Swagger\Client\Model\MembershipTypeRestriction[] $membership_type_restrictions Contains information about the memberships that can purchase this contract. If null, then no membership restrictions exist, and anyone can purchase the contract.
     *
     * @return $this
     */
    public function setMembershipTypeRestrictions($membership_type_restrictions)
    {
        $this->container['membership_type_restrictions'] = $membership_type_restrictions;

        return $this;
    }

    /**
     * Gets location_purchase_restriction_ids
     *
     * @return int[]
     */
    public function getLocationPurchaseRestrictionIds()
    {
        return $this->container['location_purchase_restriction_ids'];
    }

    /**
     * Sets location_purchase_restriction_ids
     *
     * @param int[] $location_purchase_restriction_ids The IDs of the locations where this contract may be sold. If there are no restrictions, this value is null.
     *
     * @return $this
     */
    public function setLocationPurchaseRestrictionIds($location_purchase_restriction_ids)
    {
        $this->container['location_purchase_restriction_ids'] = $location_purchase_restriction_ids;

        return $this;
    }

    /**
     * Gets location_purchase_restriction_names
     *
     * @return string[]
     */
    public function getLocationPurchaseRestrictionNames()
    {
        return $this->container['location_purchase_restriction_names'];
    }

    /**
     * Sets location_purchase_restriction_names
     *
     * @param string[] $location_purchase_restriction_names Location names where the contract may be purchased. If this value is null, there are no restrictions.
     *
     * @return $this
     */
    public function setLocationPurchaseRestrictionNames($location_purchase_restriction_names)
    {
        $this->container['location_purchase_restriction_names'] = $location_purchase_restriction_names;

        return $this;
    }

    /**
     * Gets agreement_terms
     *
     * @return string
     */
    public function getAgreementTerms()
    {
        return $this->container['agreement_terms'];
    }

    /**
     * Sets agreement_terms
     *
     * @param string $agreement_terms Business-defined terms and conditions for the contract.
     *
     * @return $this
     */
    public function setAgreementTerms($agreement_terms)
    {
        $this->container['agreement_terms'] = $agreement_terms;

        return $this;
    }

    /**
     * Gets requires_electronic_confirmation
     *
     * @return bool
     */
    public function getRequiresElectronicConfirmation()
    {
        return $this->container['requires_electronic_confirmation'];
    }

    /**
     * Sets requires_electronic_confirmation
     *
     * @param bool $requires_electronic_confirmation When `true`, clients who purchase the contract are prompted to agree to the terms of the contract the next time that they log in.
     *
     * @return $this
     */
    public function setRequiresElectronicConfirmation($requires_electronic_confirmation)
    {
        $this->container['requires_electronic_confirmation'] = $requires_electronic_confirmation;

        return $this;
    }

    /**
     * Gets autopay_enabled
     *
     * @return bool
     */
    public function getAutopayEnabled()
    {
        return $this->container['autopay_enabled'];
    }

    /**
     * Sets autopay_enabled
     *
     * @param bool $autopay_enabled When `true`, this contract establishes an AutoPay on the client’s account.
     *
     * @return $this
     */
    public function setAutopayEnabled($autopay_enabled)
    {
        $this->container['autopay_enabled'] = $autopay_enabled;

        return $this;
    }

    /**
     * Gets first_payment_amount_subtotal
     *
     * @return double
     */
    public function getFirstPaymentAmountSubtotal()
    {
        return $this->container['first_payment_amount_subtotal'];
    }

    /**
     * Sets first_payment_amount_subtotal
     *
     * @param double $first_payment_amount_subtotal The subtotal of the amount that the client is to be charged when signing up for the contract.
     *
     * @return $this
     */
    public function setFirstPaymentAmountSubtotal($first_payment_amount_subtotal)
    {
        $this->container['first_payment_amount_subtotal'] = $first_payment_amount_subtotal;

        return $this;
    }

    /**
     * Gets first_payment_amount_tax
     *
     * @return double
     */
    public function getFirstPaymentAmountTax()
    {
        return $this->container['first_payment_amount_tax'];
    }

    /**
     * Sets first_payment_amount_tax
     *
     * @param double $first_payment_amount_tax The amount of tax that the client is to be charged when signing up for the contract.
     *
     * @return $this
     */
    public function setFirstPaymentAmountTax($first_payment_amount_tax)
    {
        $this->container['first_payment_amount_tax'] = $first_payment_amount_tax;

        return $this;
    }

    /**
     * Gets first_payment_amount_total
     *
     * @return double
     */
    public function getFirstPaymentAmountTotal()
    {
        return $this->container['first_payment_amount_total'];
    }

    /**
     * Sets first_payment_amount_total
     *
     * @param double $first_payment_amount_total The total amount that the client is to be charged when signing up for the contract.
     *
     * @return $this
     */
    public function setFirstPaymentAmountTotal($first_payment_amount_total)
    {
        $this->container['first_payment_amount_total'] = $first_payment_amount_total;

        return $this;
    }

    /**
     * Gets recurring_payment_amount_subtotal
     *
     * @return double
     */
    public function getRecurringPaymentAmountSubtotal()
    {
        return $this->container['recurring_payment_amount_subtotal'];
    }

    /**
     * Sets recurring_payment_amount_subtotal
     *
     * @param double $recurring_payment_amount_subtotal The subtotal amount that the client is to be charged on an ongoing basis.
     *
     * @return $this
     */
    public function setRecurringPaymentAmountSubtotal($recurring_payment_amount_subtotal)
    {
        $this->container['recurring_payment_amount_subtotal'] = $recurring_payment_amount_subtotal;

        return $this;
    }

    /**
     * Gets recurring_payment_amount_tax
     *
     * @return double
     */
    public function getRecurringPaymentAmountTax()
    {
        return $this->container['recurring_payment_amount_tax'];
    }

    /**
     * Sets recurring_payment_amount_tax
     *
     * @param double $recurring_payment_amount_tax The amount of tax the client is to be charged on an ongoing basis.
     *
     * @return $this
     */
    public function setRecurringPaymentAmountTax($recurring_payment_amount_tax)
    {
        $this->container['recurring_payment_amount_tax'] = $recurring_payment_amount_tax;

        return $this;
    }

    /**
     * Gets recurring_payment_amount_total
     *
     * @return double
     */
    public function getRecurringPaymentAmountTotal()
    {
        return $this->container['recurring_payment_amount_total'];
    }

    /**
     * Sets recurring_payment_amount_total
     *
     * @param double $recurring_payment_amount_total The total amount that the client is to be charged on an ongoing basis.
     *
     * @return $this
     */
    public function setRecurringPaymentAmountTotal($recurring_payment_amount_total)
    {
        $this->container['recurring_payment_amount_total'] = $recurring_payment_amount_total;

        return $this;
    }

    /**
     * Gets total_contract_amount_subtotal
     *
     * @return double
     */
    public function getTotalContractAmountSubtotal()
    {
        return $this->container['total_contract_amount_subtotal'];
    }

    /**
     * Sets total_contract_amount_subtotal
     *
     * @param double $total_contract_amount_subtotal The subtotal amount that the client is to be charged over the lifespan of the contract.
     *
     * @return $this
     */
    public function setTotalContractAmountSubtotal($total_contract_amount_subtotal)
    {
        $this->container['total_contract_amount_subtotal'] = $total_contract_amount_subtotal;

        return $this;
    }

    /**
     * Gets total_contract_amount_tax
     *
     * @return double
     */
    public function getTotalContractAmountTax()
    {
        return $this->container['total_contract_amount_tax'];
    }

    /**
     * Sets total_contract_amount_tax
     *
     * @param double $total_contract_amount_tax The total amount of tax the client is to be charged over the lifespan of the contract.
     *
     * @return $this
     */
    public function setTotalContractAmountTax($total_contract_amount_tax)
    {
        $this->container['total_contract_amount_tax'] = $total_contract_amount_tax;

        return $this;
    }

    /**
     * Gets total_contract_amount_total
     *
     * @return double
     */
    public function getTotalContractAmountTotal()
    {
        return $this->container['total_contract_amount_total'];
    }

    /**
     * Sets total_contract_amount_total
     *
     * @param double $total_contract_amount_total The total amount the client is to be charged over the lifespan of the contract.
     *
     * @return $this
     */
    public function setTotalContractAmountTotal($total_contract_amount_total)
    {
        $this->container['total_contract_amount_total'] = $total_contract_amount_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


