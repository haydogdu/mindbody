<?php
/**
 * UpdateClientVisitRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * UpdateClientVisitRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UpdateClientVisitRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UpdateClientVisitRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'visit_id' => 'int',
        'makeup' => 'bool',
        'signed_in' => 'bool',
        'execute' => 'string',
        'test' => 'bool',
        'send_email' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'visit_id' => 'int32',
        'makeup' => null,
        'signed_in' => null,
        'execute' => null,
        'test' => null,
        'send_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'visit_id' => 'VisitId',
        'makeup' => 'Makeup',
        'signed_in' => 'SignedIn',
        'execute' => 'Execute',
        'test' => 'Test',
        'send_email' => 'SendEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'visit_id' => 'setVisitId',
        'makeup' => 'setMakeup',
        'signed_in' => 'setSignedIn',
        'execute' => 'setExecute',
        'test' => 'setTest',
        'send_email' => 'setSendEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'visit_id' => 'getVisitId',
        'makeup' => 'getMakeup',
        'signed_in' => 'getSignedIn',
        'execute' => 'getExecute',
        'test' => 'getTest',
        'send_email' => 'getSendEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['visit_id'] = isset($data['visit_id']) ? $data['visit_id'] : null;
        $this->container['makeup'] = isset($data['makeup']) ? $data['makeup'] : null;
        $this->container['signed_in'] = isset($data['signed_in']) ? $data['signed_in'] : null;
        $this->container['execute'] = isset($data['execute']) ? $data['execute'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['send_email'] = isset($data['send_email']) ? $data['send_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['visit_id'] === null) {
            $invalidProperties[] = "'visit_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets visit_id
     *
     * @return int
     */
    public function getVisitId()
    {
        return $this->container['visit_id'];
    }

    /**
     * Sets visit_id
     *
     * @param int $visit_id The ID of the visit to be updated.
     *
     * @return $this
     */
    public function setVisitId($visit_id)
    {
        $this->container['visit_id'] = $visit_id;

        return $this;
    }

    /**
     * Gets makeup
     *
     * @return bool
     */
    public function getMakeup()
    {
        return $this->container['makeup'];
    }

    /**
     * Sets makeup
     *
     * @param bool $makeup When `true`, indicates that the visit is eligible to be made up.
     *
     * @return $this
     */
    public function setMakeup($makeup)
    {
        $this->container['makeup'] = $makeup;

        return $this;
    }

    /**
     * Gets signed_in
     *
     * @return bool
     */
    public function getSignedIn()
    {
        return $this->container['signed_in'];
    }

    /**
     * Sets signed_in
     *
     * @param bool $signed_in When `true`, indicates that the client has signed in for the visit.
     *
     * @return $this
     */
    public function setSignedIn($signed_in)
    {
        $this->container['signed_in'] = $signed_in;

        return $this;
    }

    /**
     * Gets execute
     *
     * @return string
     */
    public function getExecute()
    {
        return $this->container['execute'];
    }

    /**
     * Sets execute
     *
     * @param string $execute The execute code used to update this visit. Possible values are:  * Cancel  * Latecancel  * Unlatecancel
     *
     * @return $this
     */
    public function setExecute($execute)
    {
        $this->container['execute'] = $execute;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test When `true`, indicates that test mode is enabled. When test mode is enabled, input information is validated, but not committed.<br />  Default: **false**
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets send_email
     *
     * @return bool
     */
    public function getSendEmail()
    {
        return $this->container['send_email'];
    }

    /**
     * Sets send_email
     *
     * @param bool $send_email When `true`, indicates that the client should be sent an email for cancellations. Note that email is not sent unless the client has an email address and automatic emails have been set up correctly.<br />  Default: **false**
     *
     * @return $this
     */
    public function setSendEmail($send_email)
    {
        $this->container['send_email'] = $send_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


