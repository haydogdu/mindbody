<?php
/**
 * CheckoutItemWrapper
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CheckoutItemWrapper Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CheckoutItemWrapper implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CheckoutItemWrapper';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'item' => '\Swagger\Client\Model\CheckoutItem',
        'discount_amount' => 'double',
        'appointment_booking_requests' => '\Swagger\Client\Model\CheckoutAppointmentBookingRequest[]',
        'enrollment_ids' => 'int[]',
        'class_ids' => 'int[]',
        'course_ids' => 'int[]',
        'visit_ids' => 'int[]',
        'appointment_ids' => 'int[]',
        'id' => 'int',
        'quantity' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'item' => null,
        'discount_amount' => 'double',
        'appointment_booking_requests' => null,
        'enrollment_ids' => 'int32',
        'class_ids' => 'int32',
        'course_ids' => 'int64',
        'visit_ids' => 'int64',
        'appointment_ids' => 'int64',
        'id' => 'int32',
        'quantity' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'item' => 'Item',
        'discount_amount' => 'DiscountAmount',
        'appointment_booking_requests' => 'AppointmentBookingRequests',
        'enrollment_ids' => 'EnrollmentIds',
        'class_ids' => 'ClassIds',
        'course_ids' => 'CourseIds',
        'visit_ids' => 'VisitIds',
        'appointment_ids' => 'AppointmentIds',
        'id' => 'Id',
        'quantity' => 'Quantity'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'item' => 'setItem',
        'discount_amount' => 'setDiscountAmount',
        'appointment_booking_requests' => 'setAppointmentBookingRequests',
        'enrollment_ids' => 'setEnrollmentIds',
        'class_ids' => 'setClassIds',
        'course_ids' => 'setCourseIds',
        'visit_ids' => 'setVisitIds',
        'appointment_ids' => 'setAppointmentIds',
        'id' => 'setId',
        'quantity' => 'setQuantity'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'item' => 'getItem',
        'discount_amount' => 'getDiscountAmount',
        'appointment_booking_requests' => 'getAppointmentBookingRequests',
        'enrollment_ids' => 'getEnrollmentIds',
        'class_ids' => 'getClassIds',
        'course_ids' => 'getCourseIds',
        'visit_ids' => 'getVisitIds',
        'appointment_ids' => 'getAppointmentIds',
        'id' => 'getId',
        'quantity' => 'getQuantity'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['discount_amount'] = isset($data['discount_amount']) ? $data['discount_amount'] : null;
        $this->container['appointment_booking_requests'] = isset($data['appointment_booking_requests']) ? $data['appointment_booking_requests'] : null;
        $this->container['enrollment_ids'] = isset($data['enrollment_ids']) ? $data['enrollment_ids'] : null;
        $this->container['class_ids'] = isset($data['class_ids']) ? $data['class_ids'] : null;
        $this->container['course_ids'] = isset($data['course_ids']) ? $data['course_ids'] : null;
        $this->container['visit_ids'] = isset($data['visit_ids']) ? $data['visit_ids'] : null;
        $this->container['appointment_ids'] = isset($data['appointment_ids']) ? $data['appointment_ids'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets item
     *
     * @return \Swagger\Client\Model\CheckoutItem
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \Swagger\Client\Model\CheckoutItem $item Information about an item in the cart.
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return double
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param double $discount_amount The amount the item is discounted. This parameter is ignored for packages.
     *
     * @return $this
     */
    public function setDiscountAmount($discount_amount)
    {
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets appointment_booking_requests
     *
     * @return \Swagger\Client\Model\CheckoutAppointmentBookingRequest[]
     */
    public function getAppointmentBookingRequests()
    {
        return $this->container['appointment_booking_requests'];
    }

    /**
     * Sets appointment_booking_requests
     *
     * @param \Swagger\Client\Model\CheckoutAppointmentBookingRequest[] $appointment_booking_requests A list of appointments to be booked then paid for by this item. This parameter applies only to pricing option items.
     *
     * @return $this
     */
    public function setAppointmentBookingRequests($appointment_booking_requests)
    {
        $this->container['appointment_booking_requests'] = $appointment_booking_requests;

        return $this;
    }

    /**
     * Gets enrollment_ids
     *
     * @return int[]
     */
    public function getEnrollmentIds()
    {
        return $this->container['enrollment_ids'];
    }

    /**
     * Sets enrollment_ids
     *
     * @param int[] $enrollment_ids A list of enrollment IDs that this item is to pay for. This parameter applies only to pricing option items.
     *
     * @return $this
     */
    public function setEnrollmentIds($enrollment_ids)
    {
        $this->container['enrollment_ids'] = $enrollment_ids;

        return $this;
    }

    /**
     * Gets class_ids
     *
     * @return int[]
     */
    public function getClassIds()
    {
        return $this->container['class_ids'];
    }

    /**
     * Sets class_ids
     *
     * @param int[] $class_ids A list of class IDs that this item is to pay for. This parameter applies only to pricing option items.
     *
     * @return $this
     */
    public function setClassIds($class_ids)
    {
        $this->container['class_ids'] = $class_ids;

        return $this;
    }

    /**
     * Gets course_ids
     *
     * @return int[]
     */
    public function getCourseIds()
    {
        return $this->container['course_ids'];
    }

    /**
     * Sets course_ids
     *
     * @param int[] $course_ids A list of course IDs that this item is to pay for. This parameter applies only to pricing option items.
     *
     * @return $this
     */
    public function setCourseIds($course_ids)
    {
        $this->container['course_ids'] = $course_ids;

        return $this;
    }

    /**
     * Gets visit_ids
     *
     * @return int[]
     */
    public function getVisitIds()
    {
        return $this->container['visit_ids'];
    }

    /**
     * Sets visit_ids
     *
     * @param int[] $visit_ids A list of visit IDs that this item is to pay for. This parameter applies only to pricing option items.
     *
     * @return $this
     */
    public function setVisitIds($visit_ids)
    {
        $this->container['visit_ids'] = $visit_ids;

        return $this;
    }

    /**
     * Gets appointment_ids
     *
     * @return int[]
     */
    public function getAppointmentIds()
    {
        return $this->container['appointment_ids'];
    }

    /**
     * Sets appointment_ids
     *
     * @param int[] $appointment_ids A list of appointment IDs that this item is to reconcile.
     *
     * @return $this
     */
    public function setAppointmentIds($appointment_ids)
    {
        $this->container['appointment_ids'] = $appointment_ids;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The item’s unique ID within the cart.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity The number of this item to be purchased.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


