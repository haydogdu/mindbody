<?php
/**
 * ClassDescription
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClassDescription Class Doc Comment
 *
 * @category Class
 * @description Represents a class definition. The class meets at the start time, goes until the end time.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClassDescription implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClassDescription';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'active' => 'bool',
        'description' => 'string',
        'id' => 'int',
        'image_url' => 'string',
        'last_updated' => '\DateTime',
        'level' => '\Swagger\Client\Model\Level',
        'name' => 'string',
        'notes' => 'string',
        'prereq' => 'string',
        'program' => '\Swagger\Client\Model\Program',
        'session_type' => '\Swagger\Client\Model\SessionType',
        'category' => 'string',
        'category_id' => 'int',
        'subcategory' => 'string',
        'subcategory_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'active' => null,
        'description' => null,
        'id' => 'int32',
        'image_url' => null,
        'last_updated' => 'date-time',
        'level' => null,
        'name' => null,
        'notes' => null,
        'prereq' => null,
        'program' => null,
        'session_type' => null,
        'category' => null,
        'category_id' => 'int32',
        'subcategory' => null,
        'subcategory_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'active' => 'Active',
        'description' => 'Description',
        'id' => 'Id',
        'image_url' => 'ImageURL',
        'last_updated' => 'LastUpdated',
        'level' => 'Level',
        'name' => 'Name',
        'notes' => 'Notes',
        'prereq' => 'Prereq',
        'program' => 'Program',
        'session_type' => 'SessionType',
        'category' => 'Category',
        'category_id' => 'CategoryId',
        'subcategory' => 'Subcategory',
        'subcategory_id' => 'SubcategoryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'active' => 'setActive',
        'description' => 'setDescription',
        'id' => 'setId',
        'image_url' => 'setImageUrl',
        'last_updated' => 'setLastUpdated',
        'level' => 'setLevel',
        'name' => 'setName',
        'notes' => 'setNotes',
        'prereq' => 'setPrereq',
        'program' => 'setProgram',
        'session_type' => 'setSessionType',
        'category' => 'setCategory',
        'category_id' => 'setCategoryId',
        'subcategory' => 'setSubcategory',
        'subcategory_id' => 'setSubcategoryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'active' => 'getActive',
        'description' => 'getDescription',
        'id' => 'getId',
        'image_url' => 'getImageUrl',
        'last_updated' => 'getLastUpdated',
        'level' => 'getLevel',
        'name' => 'getName',
        'notes' => 'getNotes',
        'prereq' => 'getPrereq',
        'program' => 'getProgram',
        'session_type' => 'getSessionType',
        'category' => 'getCategory',
        'category_id' => 'getCategoryId',
        'subcategory' => 'getSubcategory',
        'subcategory_id' => 'getSubcategoryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['prereq'] = isset($data['prereq']) ? $data['prereq'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['session_type'] = isset($data['session_type']) ? $data['session_type'] : null;
        $this->container['category'] = isset($data['category']) ? $data['category'] : null;
        $this->container['category_id'] = isset($data['category_id']) ? $data['category_id'] : null;
        $this->container['subcategory'] = isset($data['subcategory']) ? $data['subcategory'] : null;
        $this->container['subcategory_id'] = isset($data['subcategory_id']) ? $data['subcategory_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active When `true`, indicates that the business can assign this class description to new class schedules.<br />  When `false`, indicates that the business cannot assign this class description to new class schedules.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description The long version of the class description.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The class description's ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string $image_url The class description's image URL, if any. If it does not exist, nothing is returned.
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return \DateTime
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param \DateTime $last_updated The date this class description was last modified.
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets level
     *
     * @return \Swagger\Client\Model\Level
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param \Swagger\Client\Model\Level $level The level information about this class.
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this class description.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Any notes about the class description.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets prereq
     *
     * @return string
     */
    public function getPrereq()
    {
        return $this->container['prereq'];
    }

    /**
     * Sets prereq
     *
     * @param string $prereq Any prerequisites for the class.
     *
     * @return $this
     */
    public function setPrereq($prereq)
    {
        $this->container['prereq'] = $prereq;

        return $this;
    }

    /**
     * Gets program
     *
     * @return \Swagger\Client\Model\Program
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param \Swagger\Client\Model\Program $program Contains information about the class description's program.
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets session_type
     *
     * @return \Swagger\Client\Model\SessionType
     */
    public function getSessionType()
    {
        return $this->container['session_type'];
    }

    /**
     * Sets session_type
     *
     * @param \Swagger\Client\Model\SessionType $session_type Contains information about the class description's session type.
     *
     * @return $this
     */
    public function setSessionType($session_type)
    {
        $this->container['session_type'] = $session_type;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category The category of this class description.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return int
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param int $category_id The category ID of this class description.
     *
     * @return $this
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets subcategory
     *
     * @return string
     */
    public function getSubcategory()
    {
        return $this->container['subcategory'];
    }

    /**
     * Sets subcategory
     *
     * @param string $subcategory The subcategory of this class description.
     *
     * @return $this
     */
    public function setSubcategory($subcategory)
    {
        $this->container['subcategory'] = $subcategory;

        return $this;
    }

    /**
     * Gets subcategory_id
     *
     * @return int
     */
    public function getSubcategoryId()
    {
        return $this->container['subcategory_id'];
    }

    /**
     * Sets subcategory_id
     *
     * @param int $subcategory_id The subcategory ID of this class description.
     *
     * @return $this
     */
    public function setSubcategoryId($subcategory_id)
    {
        $this->container['subcategory_id'] = $subcategory_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


