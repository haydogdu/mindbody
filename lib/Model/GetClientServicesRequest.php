<?php
/**
 * GetClientServicesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetClientServicesRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetClientServicesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetClientServicesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id' => 'string',
        'class_id' => 'int',
        'program_ids' => 'int[]',
        'session_type_id' => 'int',
        'location_ids' => 'int[]',
        'visit_count' => 'int',
        'start_date' => '\DateTime',
        'end_date' => '\DateTime',
        'show_active_only' => 'bool',
        'cross_regional_lookup' => 'bool',
        'client_associated_sites_offset' => 'int',
        'limit' => 'int',
        'offset' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_id' => null,
        'class_id' => 'int32',
        'program_ids' => 'int32',
        'session_type_id' => 'int32',
        'location_ids' => 'int32',
        'visit_count' => 'int32',
        'start_date' => 'date-time',
        'end_date' => 'date-time',
        'show_active_only' => null,
        'cross_regional_lookup' => null,
        'client_associated_sites_offset' => 'int32',
        'limit' => 'int32',
        'offset' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'ClientId',
        'class_id' => 'ClassId',
        'program_ids' => 'ProgramIds',
        'session_type_id' => 'SessionTypeId',
        'location_ids' => 'LocationIds',
        'visit_count' => 'VisitCount',
        'start_date' => 'StartDate',
        'end_date' => 'EndDate',
        'show_active_only' => 'ShowActiveOnly',
        'cross_regional_lookup' => 'CrossRegionalLookup',
        'client_associated_sites_offset' => 'ClientAssociatedSitesOffset',
        'limit' => 'Limit',
        'offset' => 'Offset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'class_id' => 'setClassId',
        'program_ids' => 'setProgramIds',
        'session_type_id' => 'setSessionTypeId',
        'location_ids' => 'setLocationIds',
        'visit_count' => 'setVisitCount',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'show_active_only' => 'setShowActiveOnly',
        'cross_regional_lookup' => 'setCrossRegionalLookup',
        'client_associated_sites_offset' => 'setClientAssociatedSitesOffset',
        'limit' => 'setLimit',
        'offset' => 'setOffset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'class_id' => 'getClassId',
        'program_ids' => 'getProgramIds',
        'session_type_id' => 'getSessionTypeId',
        'location_ids' => 'getLocationIds',
        'visit_count' => 'getVisitCount',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'show_active_only' => 'getShowActiveOnly',
        'cross_regional_lookup' => 'getCrossRegionalLookup',
        'client_associated_sites_offset' => 'getClientAssociatedSitesOffset',
        'limit' => 'getLimit',
        'offset' => 'getOffset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['class_id'] = isset($data['class_id']) ? $data['class_id'] : null;
        $this->container['program_ids'] = isset($data['program_ids']) ? $data['program_ids'] : null;
        $this->container['session_type_id'] = isset($data['session_type_id']) ? $data['session_type_id'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
        $this->container['visit_count'] = isset($data['visit_count']) ? $data['visit_count'] : null;
        $this->container['start_date'] = isset($data['start_date']) ? $data['start_date'] : null;
        $this->container['end_date'] = isset($data['end_date']) ? $data['end_date'] : null;
        $this->container['show_active_only'] = isset($data['show_active_only']) ? $data['show_active_only'] : null;
        $this->container['cross_regional_lookup'] = isset($data['cross_regional_lookup']) ? $data['cross_regional_lookup'] : null;
        $this->container['client_associated_sites_offset'] = isset($data['client_associated_sites_offset']) ? $data['client_associated_sites_offset'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id The ID of the client to query. The results are a list of pricing options that the client has purchased. Note that “service” and “pricing option” are synonymous in this section of the documentation.
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets class_id
     *
     * @return int
     */
    public function getClassId()
    {
        return $this->container['class_id'];
    }

    /**
     * Sets class_id
     *
     * @param int $class_id Filters results to only those pricing options that can be used to pay for this class.
     *
     * @return $this
     */
    public function setClassId($class_id)
    {
        $this->container['class_id'] = $class_id;

        return $this;
    }

    /**
     * Gets program_ids
     *
     * @return int[]
     */
    public function getProgramIds()
    {
        return $this->container['program_ids'];
    }

    /**
     * Sets program_ids
     *
     * @param int[] $program_ids Filters results to pricing options that belong to one of the given program IDs.
     *
     * @return $this
     */
    public function setProgramIds($program_ids)
    {
        $this->container['program_ids'] = $program_ids;

        return $this;
    }

    /**
     * Gets session_type_id
     *
     * @return int
     */
    public function getSessionTypeId()
    {
        return $this->container['session_type_id'];
    }

    /**
     * Sets session_type_id
     *
     * @param int $session_type_id Filters results to pricing options that will pay for the given session type ID. Use this to find pricing options that will pay for a specific appointment type.
     *
     * @return $this
     */
    public function setSessionTypeId($session_type_id)
    {
        $this->container['session_type_id'] = $session_type_id;

        return $this;
    }

    /**
     * Gets location_ids
     *
     * @return int[]
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     *
     * @param int[] $location_ids Filters results to pricing options that can be used at the listed location IDs.
     *
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }

    /**
     * Gets visit_count
     *
     * @return int
     */
    public function getVisitCount()
    {
        return $this->container['visit_count'];
    }

    /**
     * Sets visit_count
     *
     * @param int $visit_count A filter on the minimum number of visits a service can pay for.
     *
     * @return $this
     */
    public function setVisitCount($visit_count)
    {
        $this->container['visit_count'] = $visit_count;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return \DateTime
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param \DateTime $start_date Filters results to pricing options that are valid on or after this date.
     *
     * @return $this
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return \DateTime
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param \DateTime $end_date Filters results to pricing options that are valid on or before this date.
     *
     * @return $this
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets show_active_only
     *
     * @return bool
     */
    public function getShowActiveOnly()
    {
        return $this->container['show_active_only'];
    }

    /**
     * Sets show_active_only
     *
     * @param bool $show_active_only When `true`, includes active services only.  Default: **false**
     *
     * @return $this
     */
    public function setShowActiveOnly($show_active_only)
    {
        $this->container['show_active_only'] = $show_active_only;

        return $this;
    }

    /**
     * Gets cross_regional_lookup
     *
     * @return bool
     */
    public function getCrossRegionalLookup()
    {
        return $this->container['cross_regional_lookup'];
    }

    /**
     * Sets cross_regional_lookup
     *
     * @param bool $cross_regional_lookup Used to retrieve a client’s pricing options from multiple sites within an organization. When included and set to `true`, it searches a maximum of ten sites with which this client is associated. When a client is associated with more than ten sites, use `ClientAssociatedSitesOffset` as many times as needed to search the additional sites with which the client is associated. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that a `SiteID` is returned and populated in the `ClientServices` response when `CrossRegionalLookup` is set to `true`.  Default: **false**
     *
     * @return $this
     */
    public function setCrossRegionalLookup($cross_regional_lookup)
    {
        $this->container['cross_regional_lookup'] = $cross_regional_lookup;

        return $this;
    }

    /**
     * Gets client_associated_sites_offset
     *
     * @return int
     */
    public function getClientAssociatedSitesOffset()
    {
        return $this->container['client_associated_sites_offset'];
    }

    /**
     * Sets client_associated_sites_offset
     *
     * @param int $client_associated_sites_offset Used to retrieve a client’s pricing options from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />  Default: **0**    For example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:  * Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.  * Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.  * Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20  * Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25
     *
     * @return $this
     */
    public function setClientAssociatedSitesOffset($client_associated_sites_offset)
    {
        $this->container['client_associated_sites_offset'] = $client_associated_sites_offset;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit Number of results to include, defaults to 100
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int $offset Page offset, defaults to 0.
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


