<?php
/**
 * AddClientToEnrollmentRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AddClientToEnrollmentRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AddClientToEnrollmentRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AddClientToEnrollmentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'client_id' => 'string',
        'class_schedule_id' => 'int',
        'enroll_date_forward' => '\DateTime',
        'enroll_open' => '\DateTime[]',
        'test' => 'bool',
        'send_email' => 'bool',
        'waitlist' => 'bool',
        'waitlist_entry_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'client_id' => null,
        'class_schedule_id' => 'int32',
        'enroll_date_forward' => 'date-time',
        'enroll_open' => 'date-time',
        'test' => null,
        'send_email' => null,
        'waitlist' => null,
        'waitlist_entry_id' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'ClientId',
        'class_schedule_id' => 'ClassScheduleId',
        'enroll_date_forward' => 'EnrollDateForward',
        'enroll_open' => 'EnrollOpen',
        'test' => 'Test',
        'send_email' => 'SendEmail',
        'waitlist' => 'Waitlist',
        'waitlist_entry_id' => 'WaitlistEntryId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'class_schedule_id' => 'setClassScheduleId',
        'enroll_date_forward' => 'setEnrollDateForward',
        'enroll_open' => 'setEnrollOpen',
        'test' => 'setTest',
        'send_email' => 'setSendEmail',
        'waitlist' => 'setWaitlist',
        'waitlist_entry_id' => 'setWaitlistEntryId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'class_schedule_id' => 'getClassScheduleId',
        'enroll_date_forward' => 'getEnrollDateForward',
        'enroll_open' => 'getEnrollOpen',
        'test' => 'getTest',
        'send_email' => 'getSendEmail',
        'waitlist' => 'getWaitlist',
        'waitlist_entry_id' => 'getWaitlistEntryId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['class_schedule_id'] = isset($data['class_schedule_id']) ? $data['class_schedule_id'] : null;
        $this->container['enroll_date_forward'] = isset($data['enroll_date_forward']) ? $data['enroll_date_forward'] : null;
        $this->container['enroll_open'] = isset($data['enroll_open']) ? $data['enroll_open'] : null;
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['send_email'] = isset($data['send_email']) ? $data['send_email'] : null;
        $this->container['waitlist'] = isset($data['waitlist']) ? $data['waitlist'] : null;
        $this->container['waitlist_entry_id'] = isset($data['waitlist_entry_id']) ? $data['waitlist_entry_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_id'] === null) {
            $invalidProperties[] = "'client_id' can't be null";
        }
        if ($this->container['class_schedule_id'] === null) {
            $invalidProperties[] = "'class_schedule_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string $client_id The ID of the client who is being booked into the enrollment.
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets class_schedule_id
     *
     * @return int
     */
    public function getClassScheduleId()
    {
        return $this->container['class_schedule_id'];
    }

    /**
     * Sets class_schedule_id
     *
     * @param int $class_schedule_id The ID of the class schedule (enrollment) into which the client is being booked.
     *
     * @return $this
     */
    public function setClassScheduleId($class_schedule_id)
    {
        $this->container['class_schedule_id'] = $class_schedule_id;

        return $this;
    }

    /**
     * Gets enroll_date_forward
     *
     * @return \DateTime
     */
    public function getEnrollDateForward()
    {
        return $this->container['enroll_date_forward'];
    }

    /**
     * Sets enroll_date_forward
     *
     * @param \DateTime $enroll_date_forward Enroll the clients from this date forward. `EnrollDateForward` takes priority over open enrollment.
     *
     * @return $this
     */
    public function setEnrollDateForward($enroll_date_forward)
    {
        $this->container['enroll_date_forward'] = $enroll_date_forward;

        return $this;
    }

    /**
     * Gets enroll_open
     *
     * @return \DateTime[]
     */
    public function getEnrollOpen()
    {
        return $this->container['enroll_open'];
    }

    /**
     * Sets enroll_open
     *
     * @param \DateTime[] $enroll_open Enroll for selected days.
     *
     * @return $this
     */
    public function setEnrollOpen($enroll_open)
    {
        $this->container['enroll_open'] = $enroll_open;

        return $this;
    }

    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test When `true`, input information is validated, but not committed.<br />  Default: **false**
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets send_email
     *
     * @return bool
     */
    public function getSendEmail()
    {
        return $this->container['send_email'];
    }

    /**
     * Sets send_email
     *
     * @param bool $send_email When `true`, indicates that the client should be sent an email. An email is only sent if the client has an email address and automatic emails have been set up.<br />  Default: **false**
     *
     * @return $this
     */
    public function setSendEmail($send_email)
    {
        $this->container['send_email'] = $send_email;

        return $this;
    }

    /**
     * Gets waitlist
     *
     * @return bool
     */
    public function getWaitlist()
    {
        return $this->container['waitlist'];
    }

    /**
     * Sets waitlist
     *
     * @param bool $waitlist When `true`, the client is added to a specific enrollments waiting list.
     *
     * @return $this
     */
    public function setWaitlist($waitlist)
    {
        $this->container['waitlist'] = $waitlist;

        return $this;
    }

    /**
     * Gets waitlist_entry_id
     *
     * @return int
     */
    public function getWaitlistEntryId()
    {
        return $this->container['waitlist_entry_id'];
    }

    /**
     * Sets waitlist_entry_id
     *
     * @param int $waitlist_entry_id The waiting list entry to add. Used to add a client to an enrollment from a waiting list entry.
     *
     * @return $this
     */
    public function setWaitlistEntryId($waitlist_entry_id)
    {
        $this->container['waitlist_entry_id'] = $waitlist_entry_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


