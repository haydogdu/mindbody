<?php
/**
 * SubstituteTeacherClass
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SubstituteTeacherClass Class Doc Comment
 *
 * @category Class
 * @description Represents a single class instance. Used in SubstituteClassTeacher endpoint.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubstituteTeacherClass implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubstituteTeacherClass';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'class_schedule_id' => 'int',
        'location' => '\Swagger\Client\Model\Location',
        'max_capacity' => 'int',
        'web_capacity' => 'int',
        'total_booked' => 'int',
        'total_booked_waitlist' => 'int',
        'web_booked' => 'int',
        'semester_id' => 'int',
        'is_canceled' => 'bool',
        'substitute' => 'bool',
        'active' => 'bool',
        'is_waitlist_available' => 'bool',
        'hide_cancel' => 'bool',
        'id' => 'int',
        'is_available' => 'bool',
        'start_date_time' => '\DateTime',
        'end_date_time' => '\DateTime',
        'last_modified_date_time' => '\DateTime',
        'class_description' => '\Swagger\Client\Model\ClassDescription',
        'staff' => '\Swagger\Client\Model\Staff'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'class_schedule_id' => 'int32',
        'location' => null,
        'max_capacity' => 'int32',
        'web_capacity' => 'int32',
        'total_booked' => 'int32',
        'total_booked_waitlist' => 'int32',
        'web_booked' => 'int32',
        'semester_id' => 'int32',
        'is_canceled' => null,
        'substitute' => null,
        'active' => null,
        'is_waitlist_available' => null,
        'hide_cancel' => null,
        'id' => 'int32',
        'is_available' => null,
        'start_date_time' => 'date-time',
        'end_date_time' => 'date-time',
        'last_modified_date_time' => 'date-time',
        'class_description' => null,
        'staff' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'class_schedule_id' => 'ClassScheduleId',
        'location' => 'Location',
        'max_capacity' => 'MaxCapacity',
        'web_capacity' => 'WebCapacity',
        'total_booked' => 'TotalBooked',
        'total_booked_waitlist' => 'TotalBookedWaitlist',
        'web_booked' => 'WebBooked',
        'semester_id' => 'SemesterId',
        'is_canceled' => 'IsCanceled',
        'substitute' => 'Substitute',
        'active' => 'Active',
        'is_waitlist_available' => 'IsWaitlistAvailable',
        'hide_cancel' => 'HideCancel',
        'id' => 'Id',
        'is_available' => 'IsAvailable',
        'start_date_time' => 'StartDateTime',
        'end_date_time' => 'EndDateTime',
        'last_modified_date_time' => 'LastModifiedDateTime',
        'class_description' => 'ClassDescription',
        'staff' => 'Staff'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'class_schedule_id' => 'setClassScheduleId',
        'location' => 'setLocation',
        'max_capacity' => 'setMaxCapacity',
        'web_capacity' => 'setWebCapacity',
        'total_booked' => 'setTotalBooked',
        'total_booked_waitlist' => 'setTotalBookedWaitlist',
        'web_booked' => 'setWebBooked',
        'semester_id' => 'setSemesterId',
        'is_canceled' => 'setIsCanceled',
        'substitute' => 'setSubstitute',
        'active' => 'setActive',
        'is_waitlist_available' => 'setIsWaitlistAvailable',
        'hide_cancel' => 'setHideCancel',
        'id' => 'setId',
        'is_available' => 'setIsAvailable',
        'start_date_time' => 'setStartDateTime',
        'end_date_time' => 'setEndDateTime',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'class_description' => 'setClassDescription',
        'staff' => 'setStaff'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'class_schedule_id' => 'getClassScheduleId',
        'location' => 'getLocation',
        'max_capacity' => 'getMaxCapacity',
        'web_capacity' => 'getWebCapacity',
        'total_booked' => 'getTotalBooked',
        'total_booked_waitlist' => 'getTotalBookedWaitlist',
        'web_booked' => 'getWebBooked',
        'semester_id' => 'getSemesterId',
        'is_canceled' => 'getIsCanceled',
        'substitute' => 'getSubstitute',
        'active' => 'getActive',
        'is_waitlist_available' => 'getIsWaitlistAvailable',
        'hide_cancel' => 'getHideCancel',
        'id' => 'getId',
        'is_available' => 'getIsAvailable',
        'start_date_time' => 'getStartDateTime',
        'end_date_time' => 'getEndDateTime',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'class_description' => 'getClassDescription',
        'staff' => 'getStaff'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['class_schedule_id'] = isset($data['class_schedule_id']) ? $data['class_schedule_id'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['max_capacity'] = isset($data['max_capacity']) ? $data['max_capacity'] : null;
        $this->container['web_capacity'] = isset($data['web_capacity']) ? $data['web_capacity'] : null;
        $this->container['total_booked'] = isset($data['total_booked']) ? $data['total_booked'] : null;
        $this->container['total_booked_waitlist'] = isset($data['total_booked_waitlist']) ? $data['total_booked_waitlist'] : null;
        $this->container['web_booked'] = isset($data['web_booked']) ? $data['web_booked'] : null;
        $this->container['semester_id'] = isset($data['semester_id']) ? $data['semester_id'] : null;
        $this->container['is_canceled'] = isset($data['is_canceled']) ? $data['is_canceled'] : null;
        $this->container['substitute'] = isset($data['substitute']) ? $data['substitute'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['is_waitlist_available'] = isset($data['is_waitlist_available']) ? $data['is_waitlist_available'] : null;
        $this->container['hide_cancel'] = isset($data['hide_cancel']) ? $data['hide_cancel'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_available'] = isset($data['is_available']) ? $data['is_available'] : null;
        $this->container['start_date_time'] = isset($data['start_date_time']) ? $data['start_date_time'] : null;
        $this->container['end_date_time'] = isset($data['end_date_time']) ? $data['end_date_time'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['class_description'] = isset($data['class_description']) ? $data['class_description'] : null;
        $this->container['staff'] = isset($data['staff']) ? $data['staff'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets class_schedule_id
     *
     * @return int
     */
    public function getClassScheduleId()
    {
        return $this->container['class_schedule_id'];
    }

    /**
     * Sets class_schedule_id
     *
     * @param int $class_schedule_id The class schedule ID of the requested class.
     *
     * @return $this
     */
    public function setClassScheduleId($class_schedule_id)
    {
        $this->container['class_schedule_id'] = $class_schedule_id;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\Location $location Contains information about the location where the class is taking place.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets max_capacity
     *
     * @return int
     */
    public function getMaxCapacity()
    {
        return $this->container['max_capacity'];
    }

    /**
     * Sets max_capacity
     *
     * @param int $max_capacity The total number of bookings allowed in the class.
     *
     * @return $this
     */
    public function setMaxCapacity($max_capacity)
    {
        $this->container['max_capacity'] = $max_capacity;

        return $this;
    }

    /**
     * Gets web_capacity
     *
     * @return int
     */
    public function getWebCapacity()
    {
        return $this->container['web_capacity'];
    }

    /**
     * Sets web_capacity
     *
     * @param int $web_capacity The total number of online bookings allowed in the class.
     *
     * @return $this
     */
    public function setWebCapacity($web_capacity)
    {
        $this->container['web_capacity'] = $web_capacity;

        return $this;
    }

    /**
     * Gets total_booked
     *
     * @return int
     */
    public function getTotalBooked()
    {
        return $this->container['total_booked'];
    }

    /**
     * Sets total_booked
     *
     * @param int $total_booked The total number of clients who are booked into the class prior to this call being made.
     *
     * @return $this
     */
    public function setTotalBooked($total_booked)
    {
        $this->container['total_booked'] = $total_booked;

        return $this;
    }

    /**
     * Gets total_booked_waitlist
     *
     * @return int
     */
    public function getTotalBookedWaitlist()
    {
        return $this->container['total_booked_waitlist'];
    }

    /**
     * Sets total_booked_waitlist
     *
     * @param int $total_booked_waitlist The total number of booked clients who are on the waiting list for the class prior to this call being made.
     *
     * @return $this
     */
    public function setTotalBookedWaitlist($total_booked_waitlist)
    {
        $this->container['total_booked_waitlist'] = $total_booked_waitlist;

        return $this;
    }

    /**
     * Gets web_booked
     *
     * @return int
     */
    public function getWebBooked()
    {
        return $this->container['web_booked'];
    }

    /**
     * Sets web_booked
     *
     * @param int $web_booked The total number of bookings in the class made by online users, prior to this call being made. This property is the current number of bookings counted toward the `WebCapacity` limit.
     *
     * @return $this
     */
    public function setWebBooked($web_booked)
    {
        $this->container['web_booked'] = $web_booked;

        return $this;
    }

    /**
     * Gets semester_id
     *
     * @return int
     */
    public function getSemesterId()
    {
        return $this->container['semester_id'];
    }

    /**
     * Sets semester_id
     *
     * @param int $semester_id Identifies the semester assigned to this class.
     *
     * @return $this
     */
    public function setSemesterId($semester_id)
    {
        $this->container['semester_id'] = $semester_id;

        return $this;
    }

    /**
     * Gets is_canceled
     *
     * @return bool
     */
    public function getIsCanceled()
    {
        return $this->container['is_canceled'];
    }

    /**
     * Sets is_canceled
     *
     * @param bool $is_canceled When `true`, indicates that the class has been canceled.<br />  When `false`, indicates that the class has not been canceled and may still be bookable.
     *
     * @return $this
     */
    public function setIsCanceled($is_canceled)
    {
        $this->container['is_canceled'] = $is_canceled;

        return $this;
    }

    /**
     * Gets substitute
     *
     * @return bool
     */
    public function getSubstitute()
    {
        return $this->container['substitute'];
    }

    /**
     * Sets substitute
     *
     * @param bool $substitute When `true`, indicates that the class is being taught by a substitute teacher.
     *
     * @return $this
     */
    public function setSubstitute($substitute)
    {
        $this->container['substitute'] = $substitute;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active When `true`, indicates that the class is being shown to clients in consumer mode.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets is_waitlist_available
     *
     * @return bool
     */
    public function getIsWaitlistAvailable()
    {
        return $this->container['is_waitlist_available'];
    }

    /**
     * Sets is_waitlist_available
     *
     * @param bool $is_waitlist_available When `true`, indicates that the class has a waiting list and there is space available on the waiting list for another client.<br />  When `false`, indicates either that the class does not have a waiting list or there is no space available on the class waiting list.
     *
     * @return $this
     */
    public function setIsWaitlistAvailable($is_waitlist_available)
    {
        $this->container['is_waitlist_available'] = $is_waitlist_available;

        return $this;
    }

    /**
     * Gets hide_cancel
     *
     * @return bool
     */
    public function getHideCancel()
    {
        return $this->container['hide_cancel'];
    }

    /**
     * Sets hide_cancel
     *
     * @param bool $hide_cancel When `true`, indicates that this class is should not be shown to clients when `IsCancelled` is `true`.<br />  When `false`, indicates that this class is should be shown to clients when `IsCancelled` is `true`.<br />  This property can be ignored when the `IsCancelled` property is `false`.
     *
     * @return $this
     */
    public function setHideCancel($hide_cancel)
    {
        $this->container['hide_cancel'] = $hide_cancel;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of the class.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_available
     *
     * @return bool
     */
    public function getIsAvailable()
    {
        return $this->container['is_available'];
    }

    /**
     * Sets is_available
     *
     * @param bool $is_available When `true`, indicates that the class can be booked.<br />  When `false`, that the class cannot be booked at this time.
     *
     * @return $this
     */
    public function setIsAvailable($is_available)
    {
        $this->container['is_available'] = $is_available;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime $start_date_time The date and time that this class is scheduled to start.
     *
     * @return $this
     */
    public function setStartDateTime($start_date_time)
    {
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \DateTime
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \DateTime $end_date_time The date and time when this class is scheduled to end.
     *
     * @return $this
     */
    public function setEndDateTime($end_date_time)
    {
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time The last time the class was modified.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets class_description
     *
     * @return \Swagger\Client\Model\ClassDescription
     */
    public function getClassDescription()
    {
        return $this->container['class_description'];
    }

    /**
     * Sets class_description
     *
     * @param \Swagger\Client\Model\ClassDescription $class_description Contains information about this class.
     *
     * @return $this
     */
    public function setClassDescription($class_description)
    {
        $this->container['class_description'] = $class_description;

        return $this;
    }

    /**
     * Gets staff
     *
     * @return \Swagger\Client\Model\Staff
     */
    public function getStaff()
    {
        return $this->container['staff'];
    }

    /**
     * Sets staff
     *
     * @param \Swagger\Client\Model\Staff $staff Contains information about the teacher of the class.
     *
     * @return $this
     */
    public function setStaff($staff)
    {
        $this->container['staff'] = $staff;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


