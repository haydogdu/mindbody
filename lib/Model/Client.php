<?php
/**
 * Client
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Client Class Doc Comment
 *
 * @category Class
 * @description A Client
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Client implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Client';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'appointment_gender_preference' => 'string',
        'birth_date' => '\DateTime',
        'country' => 'string',
        'creation_date' => '\DateTime',
        'custom_client_fields' => '\Swagger\Client\Model\CustomClientFieldValue[]',
        'client_credit_card' => '\Swagger\Client\Model\ClientCreditCard',
        'client_indexes' => '\Swagger\Client\Model\AssignedClientIndex[]',
        'client_relationships' => '\Swagger\Client\Model\ClientRelationship[]',
        'first_appointment_date' => '\DateTime',
        'first_name' => 'string',
        'id' => 'string',
        'is_company' => 'bool',
        'is_prospect' => 'bool',
        'last_name' => 'string',
        'liability' => '\Swagger\Client\Model\Liability',
        'liability_release' => 'bool',
        'membership_icon' => 'int',
        'mobile_provider' => 'int',
        'notes' => 'string',
        'state' => 'string',
        'unique_id' => 'int',
        'last_modified_date_time' => '\DateTime',
        'red_alert' => 'string',
        'yellow_alert' => 'string',
        'middle_name' => 'string',
        'prospect_stage' => '\Swagger\Client\Model\ProspectStage',
        'email' => 'string',
        'mobile_phone' => 'string',
        'home_phone' => 'string',
        'work_phone' => 'string',
        'account_balance' => 'double',
        'address_line1' => 'string',
        'address_line2' => 'string',
        'city' => 'string',
        'postal_code' => 'string',
        'work_extension' => 'string',
        'referred_by' => 'string',
        'photo_url' => 'string',
        'emergency_contact_info_name' => 'string',
        'emergency_contact_info_email' => 'string',
        'emergency_contact_info_phone' => 'string',
        'emergency_contact_info_relationship' => 'string',
        'gender' => 'string',
        'last_formula_notes' => 'string',
        'active' => 'bool',
        'sales_reps' => '\Swagger\Client\Model\SalesRep[]',
        'status' => 'string',
        'action' => 'string',
        'send_account_emails' => 'bool',
        'send_account_texts' => 'bool',
        'send_promotional_emails' => 'bool',
        'send_promotional_texts' => 'bool',
        'send_schedule_emails' => 'bool',
        'send_schedule_texts' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'appointment_gender_preference' => null,
        'birth_date' => 'date-time',
        'country' => null,
        'creation_date' => 'date-time',
        'custom_client_fields' => null,
        'client_credit_card' => null,
        'client_indexes' => null,
        'client_relationships' => null,
        'first_appointment_date' => 'date-time',
        'first_name' => null,
        'id' => null,
        'is_company' => null,
        'is_prospect' => null,
        'last_name' => null,
        'liability' => null,
        'liability_release' => null,
        'membership_icon' => 'int32',
        'mobile_provider' => 'int32',
        'notes' => null,
        'state' => null,
        'unique_id' => 'int64',
        'last_modified_date_time' => 'date-time',
        'red_alert' => null,
        'yellow_alert' => null,
        'middle_name' => null,
        'prospect_stage' => null,
        'email' => null,
        'mobile_phone' => null,
        'home_phone' => null,
        'work_phone' => null,
        'account_balance' => 'double',
        'address_line1' => null,
        'address_line2' => null,
        'city' => null,
        'postal_code' => null,
        'work_extension' => null,
        'referred_by' => null,
        'photo_url' => null,
        'emergency_contact_info_name' => null,
        'emergency_contact_info_email' => null,
        'emergency_contact_info_phone' => null,
        'emergency_contact_info_relationship' => null,
        'gender' => null,
        'last_formula_notes' => null,
        'active' => null,
        'sales_reps' => null,
        'status' => null,
        'action' => null,
        'send_account_emails' => null,
        'send_account_texts' => null,
        'send_promotional_emails' => null,
        'send_promotional_texts' => null,
        'send_schedule_emails' => null,
        'send_schedule_texts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'appointment_gender_preference' => 'AppointmentGenderPreference',
        'birth_date' => 'BirthDate',
        'country' => 'Country',
        'creation_date' => 'CreationDate',
        'custom_client_fields' => 'CustomClientFields',
        'client_credit_card' => 'ClientCreditCard',
        'client_indexes' => 'ClientIndexes',
        'client_relationships' => 'ClientRelationships',
        'first_appointment_date' => 'FirstAppointmentDate',
        'first_name' => 'FirstName',
        'id' => 'Id',
        'is_company' => 'IsCompany',
        'is_prospect' => 'IsProspect',
        'last_name' => 'LastName',
        'liability' => 'Liability',
        'liability_release' => 'LiabilityRelease',
        'membership_icon' => 'MembershipIcon',
        'mobile_provider' => 'MobileProvider',
        'notes' => 'Notes',
        'state' => 'State',
        'unique_id' => 'UniqueId',
        'last_modified_date_time' => 'LastModifiedDateTime',
        'red_alert' => 'RedAlert',
        'yellow_alert' => 'YellowAlert',
        'middle_name' => 'MiddleName',
        'prospect_stage' => 'ProspectStage',
        'email' => 'Email',
        'mobile_phone' => 'MobilePhone',
        'home_phone' => 'HomePhone',
        'work_phone' => 'WorkPhone',
        'account_balance' => 'AccountBalance',
        'address_line1' => 'AddressLine1',
        'address_line2' => 'AddressLine2',
        'city' => 'City',
        'postal_code' => 'PostalCode',
        'work_extension' => 'WorkExtension',
        'referred_by' => 'ReferredBy',
        'photo_url' => 'PhotoUrl',
        'emergency_contact_info_name' => 'EmergencyContactInfoName',
        'emergency_contact_info_email' => 'EmergencyContactInfoEmail',
        'emergency_contact_info_phone' => 'EmergencyContactInfoPhone',
        'emergency_contact_info_relationship' => 'EmergencyContactInfoRelationship',
        'gender' => 'Gender',
        'last_formula_notes' => 'LastFormulaNotes',
        'active' => 'Active',
        'sales_reps' => 'SalesReps',
        'status' => 'Status',
        'action' => 'Action',
        'send_account_emails' => 'SendAccountEmails',
        'send_account_texts' => 'SendAccountTexts',
        'send_promotional_emails' => 'SendPromotionalEmails',
        'send_promotional_texts' => 'SendPromotionalTexts',
        'send_schedule_emails' => 'SendScheduleEmails',
        'send_schedule_texts' => 'SendScheduleTexts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'appointment_gender_preference' => 'setAppointmentGenderPreference',
        'birth_date' => 'setBirthDate',
        'country' => 'setCountry',
        'creation_date' => 'setCreationDate',
        'custom_client_fields' => 'setCustomClientFields',
        'client_credit_card' => 'setClientCreditCard',
        'client_indexes' => 'setClientIndexes',
        'client_relationships' => 'setClientRelationships',
        'first_appointment_date' => 'setFirstAppointmentDate',
        'first_name' => 'setFirstName',
        'id' => 'setId',
        'is_company' => 'setIsCompany',
        'is_prospect' => 'setIsProspect',
        'last_name' => 'setLastName',
        'liability' => 'setLiability',
        'liability_release' => 'setLiabilityRelease',
        'membership_icon' => 'setMembershipIcon',
        'mobile_provider' => 'setMobileProvider',
        'notes' => 'setNotes',
        'state' => 'setState',
        'unique_id' => 'setUniqueId',
        'last_modified_date_time' => 'setLastModifiedDateTime',
        'red_alert' => 'setRedAlert',
        'yellow_alert' => 'setYellowAlert',
        'middle_name' => 'setMiddleName',
        'prospect_stage' => 'setProspectStage',
        'email' => 'setEmail',
        'mobile_phone' => 'setMobilePhone',
        'home_phone' => 'setHomePhone',
        'work_phone' => 'setWorkPhone',
        'account_balance' => 'setAccountBalance',
        'address_line1' => 'setAddressLine1',
        'address_line2' => 'setAddressLine2',
        'city' => 'setCity',
        'postal_code' => 'setPostalCode',
        'work_extension' => 'setWorkExtension',
        'referred_by' => 'setReferredBy',
        'photo_url' => 'setPhotoUrl',
        'emergency_contact_info_name' => 'setEmergencyContactInfoName',
        'emergency_contact_info_email' => 'setEmergencyContactInfoEmail',
        'emergency_contact_info_phone' => 'setEmergencyContactInfoPhone',
        'emergency_contact_info_relationship' => 'setEmergencyContactInfoRelationship',
        'gender' => 'setGender',
        'last_formula_notes' => 'setLastFormulaNotes',
        'active' => 'setActive',
        'sales_reps' => 'setSalesReps',
        'status' => 'setStatus',
        'action' => 'setAction',
        'send_account_emails' => 'setSendAccountEmails',
        'send_account_texts' => 'setSendAccountTexts',
        'send_promotional_emails' => 'setSendPromotionalEmails',
        'send_promotional_texts' => 'setSendPromotionalTexts',
        'send_schedule_emails' => 'setSendScheduleEmails',
        'send_schedule_texts' => 'setSendScheduleTexts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'appointment_gender_preference' => 'getAppointmentGenderPreference',
        'birth_date' => 'getBirthDate',
        'country' => 'getCountry',
        'creation_date' => 'getCreationDate',
        'custom_client_fields' => 'getCustomClientFields',
        'client_credit_card' => 'getClientCreditCard',
        'client_indexes' => 'getClientIndexes',
        'client_relationships' => 'getClientRelationships',
        'first_appointment_date' => 'getFirstAppointmentDate',
        'first_name' => 'getFirstName',
        'id' => 'getId',
        'is_company' => 'getIsCompany',
        'is_prospect' => 'getIsProspect',
        'last_name' => 'getLastName',
        'liability' => 'getLiability',
        'liability_release' => 'getLiabilityRelease',
        'membership_icon' => 'getMembershipIcon',
        'mobile_provider' => 'getMobileProvider',
        'notes' => 'getNotes',
        'state' => 'getState',
        'unique_id' => 'getUniqueId',
        'last_modified_date_time' => 'getLastModifiedDateTime',
        'red_alert' => 'getRedAlert',
        'yellow_alert' => 'getYellowAlert',
        'middle_name' => 'getMiddleName',
        'prospect_stage' => 'getProspectStage',
        'email' => 'getEmail',
        'mobile_phone' => 'getMobilePhone',
        'home_phone' => 'getHomePhone',
        'work_phone' => 'getWorkPhone',
        'account_balance' => 'getAccountBalance',
        'address_line1' => 'getAddressLine1',
        'address_line2' => 'getAddressLine2',
        'city' => 'getCity',
        'postal_code' => 'getPostalCode',
        'work_extension' => 'getWorkExtension',
        'referred_by' => 'getReferredBy',
        'photo_url' => 'getPhotoUrl',
        'emergency_contact_info_name' => 'getEmergencyContactInfoName',
        'emergency_contact_info_email' => 'getEmergencyContactInfoEmail',
        'emergency_contact_info_phone' => 'getEmergencyContactInfoPhone',
        'emergency_contact_info_relationship' => 'getEmergencyContactInfoRelationship',
        'gender' => 'getGender',
        'last_formula_notes' => 'getLastFormulaNotes',
        'active' => 'getActive',
        'sales_reps' => 'getSalesReps',
        'status' => 'getStatus',
        'action' => 'getAction',
        'send_account_emails' => 'getSendAccountEmails',
        'send_account_texts' => 'getSendAccountTexts',
        'send_promotional_emails' => 'getSendPromotionalEmails',
        'send_promotional_texts' => 'getSendPromotionalTexts',
        'send_schedule_emails' => 'getSendScheduleEmails',
        'send_schedule_texts' => 'getSendScheduleTexts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const APPOINTMENT_GENDER_PREFERENCE_NONE = 'None';
    const APPOINTMENT_GENDER_PREFERENCE_FEMALE = 'Female';
    const APPOINTMENT_GENDER_PREFERENCE_MALE = 'Male';
    const ACTION_NONE = 'None';
    const ACTION_ADDED = 'Added';
    const ACTION_UPDATED = 'Updated';
    const ACTION_FAILED = 'Failed';
    const ACTION_REMOVED = 'Removed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getAppointmentGenderPreferenceAllowableValues()
    {
        return [
            self::APPOINTMENT_GENDER_PREFERENCE_NONE,
            self::APPOINTMENT_GENDER_PREFERENCE_FEMALE,
            self::APPOINTMENT_GENDER_PREFERENCE_MALE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_NONE,
            self::ACTION_ADDED,
            self::ACTION_UPDATED,
            self::ACTION_FAILED,
            self::ACTION_REMOVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['appointment_gender_preference'] = isset($data['appointment_gender_preference']) ? $data['appointment_gender_preference'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['country'] = isset($data['country']) ? $data['country'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['custom_client_fields'] = isset($data['custom_client_fields']) ? $data['custom_client_fields'] : null;
        $this->container['client_credit_card'] = isset($data['client_credit_card']) ? $data['client_credit_card'] : null;
        $this->container['client_indexes'] = isset($data['client_indexes']) ? $data['client_indexes'] : null;
        $this->container['client_relationships'] = isset($data['client_relationships']) ? $data['client_relationships'] : null;
        $this->container['first_appointment_date'] = isset($data['first_appointment_date']) ? $data['first_appointment_date'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['is_company'] = isset($data['is_company']) ? $data['is_company'] : null;
        $this->container['is_prospect'] = isset($data['is_prospect']) ? $data['is_prospect'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['liability'] = isset($data['liability']) ? $data['liability'] : null;
        $this->container['liability_release'] = isset($data['liability_release']) ? $data['liability_release'] : null;
        $this->container['membership_icon'] = isset($data['membership_icon']) ? $data['membership_icon'] : null;
        $this->container['mobile_provider'] = isset($data['mobile_provider']) ? $data['mobile_provider'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['state'] = isset($data['state']) ? $data['state'] : null;
        $this->container['unique_id'] = isset($data['unique_id']) ? $data['unique_id'] : null;
        $this->container['last_modified_date_time'] = isset($data['last_modified_date_time']) ? $data['last_modified_date_time'] : null;
        $this->container['red_alert'] = isset($data['red_alert']) ? $data['red_alert'] : null;
        $this->container['yellow_alert'] = isset($data['yellow_alert']) ? $data['yellow_alert'] : null;
        $this->container['middle_name'] = isset($data['middle_name']) ? $data['middle_name'] : null;
        $this->container['prospect_stage'] = isset($data['prospect_stage']) ? $data['prospect_stage'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['mobile_phone'] = isset($data['mobile_phone']) ? $data['mobile_phone'] : null;
        $this->container['home_phone'] = isset($data['home_phone']) ? $data['home_phone'] : null;
        $this->container['work_phone'] = isset($data['work_phone']) ? $data['work_phone'] : null;
        $this->container['account_balance'] = isset($data['account_balance']) ? $data['account_balance'] : null;
        $this->container['address_line1'] = isset($data['address_line1']) ? $data['address_line1'] : null;
        $this->container['address_line2'] = isset($data['address_line2']) ? $data['address_line2'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['postal_code'] = isset($data['postal_code']) ? $data['postal_code'] : null;
        $this->container['work_extension'] = isset($data['work_extension']) ? $data['work_extension'] : null;
        $this->container['referred_by'] = isset($data['referred_by']) ? $data['referred_by'] : null;
        $this->container['photo_url'] = isset($data['photo_url']) ? $data['photo_url'] : null;
        $this->container['emergency_contact_info_name'] = isset($data['emergency_contact_info_name']) ? $data['emergency_contact_info_name'] : null;
        $this->container['emergency_contact_info_email'] = isset($data['emergency_contact_info_email']) ? $data['emergency_contact_info_email'] : null;
        $this->container['emergency_contact_info_phone'] = isset($data['emergency_contact_info_phone']) ? $data['emergency_contact_info_phone'] : null;
        $this->container['emergency_contact_info_relationship'] = isset($data['emergency_contact_info_relationship']) ? $data['emergency_contact_info_relationship'] : null;
        $this->container['gender'] = isset($data['gender']) ? $data['gender'] : null;
        $this->container['last_formula_notes'] = isset($data['last_formula_notes']) ? $data['last_formula_notes'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['sales_reps'] = isset($data['sales_reps']) ? $data['sales_reps'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
        $this->container['send_account_emails'] = isset($data['send_account_emails']) ? $data['send_account_emails'] : null;
        $this->container['send_account_texts'] = isset($data['send_account_texts']) ? $data['send_account_texts'] : null;
        $this->container['send_promotional_emails'] = isset($data['send_promotional_emails']) ? $data['send_promotional_emails'] : null;
        $this->container['send_promotional_texts'] = isset($data['send_promotional_texts']) ? $data['send_promotional_texts'] : null;
        $this->container['send_schedule_emails'] = isset($data['send_schedule_emails']) ? $data['send_schedule_emails'] : null;
        $this->container['send_schedule_texts'] = isset($data['send_schedule_texts']) ? $data['send_schedule_texts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getAppointmentGenderPreferenceAllowableValues();
        if (!is_null($this->container['appointment_gender_preference']) && !in_array($this->container['appointment_gender_preference'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'appointment_gender_preference', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets appointment_gender_preference
     *
     * @return string
     */
    public function getAppointmentGenderPreference()
    {
        return $this->container['appointment_gender_preference'];
    }

    /**
     * Sets appointment_gender_preference
     *
     * @param string $appointment_gender_preference The gender of staff member with whom the client prefers to book appointments.
     *
     * @return $this
     */
    public function setAppointmentGenderPreference($appointment_gender_preference)
    {
        $allowedValues = $this->getAppointmentGenderPreferenceAllowableValues();
        if (!is_null($appointment_gender_preference) && !in_array($appointment_gender_preference, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'appointment_gender_preference', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['appointment_gender_preference'] = $appointment_gender_preference;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return \DateTime
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param \DateTime $birth_date The client’s date of birth.
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The client’s country.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date The date the client’s profile was created and added to the business, either by the client from the online store, or by a staff member. This value always returns in the format `yyyy-mm-ddThh:mm:ss:ms`.
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets custom_client_fields
     *
     * @return \Swagger\Client\Model\CustomClientFieldValue[]
     */
    public function getCustomClientFields()
    {
        return $this->container['custom_client_fields'];
    }

    /**
     * Sets custom_client_fields
     *
     * @param \Swagger\Client\Model\CustomClientFieldValue[] $custom_client_fields Contains information about the custom client fields assigned to the client.
     *
     * @return $this
     */
    public function setCustomClientFields($custom_client_fields)
    {
        $this->container['custom_client_fields'] = $custom_client_fields;

        return $this;
    }

    /**
     * Gets client_credit_card
     *
     * @return \Swagger\Client\Model\ClientCreditCard
     */
    public function getClientCreditCard()
    {
        return $this->container['client_credit_card'];
    }

    /**
     * Sets client_credit_card
     *
     * @param \Swagger\Client\Model\ClientCreditCard $client_credit_card Contains information about the client’s credit card.
     *
     * @return $this
     */
    public function setClientCreditCard($client_credit_card)
    {
        $this->container['client_credit_card'] = $client_credit_card;

        return $this;
    }

    /**
     * Gets client_indexes
     *
     * @return \Swagger\Client\Model\AssignedClientIndex[]
     */
    public function getClientIndexes()
    {
        return $this->container['client_indexes'];
    }

    /**
     * Sets client_indexes
     *
     * @param \Swagger\Client\Model\AssignedClientIndex[] $client_indexes Contains the IDs of the client’s assigned ClientIndexes and ClientIndexValues.
     *
     * @return $this
     */
    public function setClientIndexes($client_indexes)
    {
        $this->container['client_indexes'] = $client_indexes;

        return $this;
    }

    /**
     * Gets client_relationships
     *
     * @return \Swagger\Client\Model\ClientRelationship[]
     */
    public function getClientRelationships()
    {
        return $this->container['client_relationships'];
    }

    /**
     * Sets client_relationships
     *
     * @param \Swagger\Client\Model\ClientRelationship[] $client_relationships Contains information about the relationship between two clients.
     *
     * @return $this
     */
    public function setClientRelationships($client_relationships)
    {
        $this->container['client_relationships'] = $client_relationships;

        return $this;
    }

    /**
     * Gets first_appointment_date
     *
     * @return \DateTime
     */
    public function getFirstAppointmentDate()
    {
        return $this->container['first_appointment_date'];
    }

    /**
     * Sets first_appointment_date
     *
     * @param \DateTime $first_appointment_date The date of the client’s first booked appointment at the business.
     *
     * @return $this
     */
    public function setFirstAppointmentDate($first_appointment_date)
    {
        $this->container['first_appointment_date'] = $first_appointment_date;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name The client’s first name.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The client’s ID, as configured by the business owner. This is the client’s barcode ID if the business owner assigns barcodes to clients. This ID is used throughout the Public API for client-related Public API calls. When used in a POST `UpdateClient` request, the `Id` is used to identify the client for the update.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets is_company
     *
     * @return bool
     */
    public function getIsCompany()
    {
        return $this->container['is_company'];
    }

    /**
     * Sets is_company
     *
     * @param bool $is_company When `true`, indicates that the client should be marked as a company at the business.<br />  When `false`, indicates the client is an individual and does not represent a company.
     *
     * @return $this
     */
    public function setIsCompany($is_company)
    {
        $this->container['is_company'] = $is_company;

        return $this;
    }

    /**
     * Gets is_prospect
     *
     * @return bool
     */
    public function getIsProspect()
    {
        return $this->container['is_prospect'];
    }

    /**
     * Sets is_prospect
     *
     * @param bool $is_prospect This value is set only if the business owner allows individuals to be prospects.<br />  When `true`, indicates that the client should be marked as a prospect for the business.<br />  When `false`, indicates that the client should not be marked as a prospect for the business.
     *
     * @return $this
     */
    public function setIsProspect($is_prospect)
    {
        $this->container['is_prospect'] = $is_prospect;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name The client’s last name.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets liability
     *
     * @return \Swagger\Client\Model\Liability
     */
    public function getLiability()
    {
        return $this->container['liability'];
    }

    /**
     * Sets liability
     *
     * @param \Swagger\Client\Model\Liability $liability Contains the client’s liability agreement information for the business.
     *
     * @return $this
     */
    public function setLiability($liability)
    {
        $this->container['liability'] = $liability;

        return $this;
    }

    /**
     * Gets liability_release
     *
     * @return bool
     */
    public function getLiabilityRelease()
    {
        return $this->container['liability_release'];
    }

    /**
     * Sets liability_release
     *
     * @param bool $liability_release Passing `true` sets the client’s liability information as follows:  * `IsReleased` is set to `true`.  * `AgreementDate` is set to the time zone of the business when the call was processed.  * `ReleasedBy` is set to `null` if the call is made by the client, `0` if the call was made by the business owner, or to a specific staff member’s ID if a staff member made the call.  Passing `false` sets the client’s liability information as follows:  * `IsReleased` is set to `false`.  * `AgreementDate` is set to `null`.  * `ReleasedBy` is set to `null`.
     *
     * @return $this
     */
    public function setLiabilityRelease($liability_release)
    {
        $this->container['liability_release'] = $liability_release;

        return $this;
    }

    /**
     * Gets membership_icon
     *
     * @return int
     */
    public function getMembershipIcon()
    {
        return $this->container['membership_icon'];
    }

    /**
     * Sets membership_icon
     *
     * @param int $membership_icon The ID of the [membership icon](https://support.mindbodyonline.com/s/article/203259703-Membership-Setup-screen?language=en_US) displayed next to the client’s name, if the client has a membership on their account.
     *
     * @return $this
     */
    public function setMembershipIcon($membership_icon)
    {
        $this->container['membership_icon'] = $membership_icon;

        return $this;
    }

    /**
     * Gets mobile_provider
     *
     * @return int
     */
    public function getMobileProvider()
    {
        return $this->container['mobile_provider'];
    }

    /**
     * Sets mobile_provider
     *
     * @param int $mobile_provider The client’s mobile provider.
     *
     * @return $this
     */
    public function setMobileProvider($mobile_provider)
    {
        $this->container['mobile_provider'] = $mobile_provider;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string $notes Any notes entered on the client’s account by staff members. This value should never be shown to clients unless the business owner has a specific reason for showing them.
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The client’s state.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return int
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param int $unique_id The client’s system-generated ID at the business. This value cannot be changed by business owners and is always unique across all clients at the business. This ID is not widely used in the Public API, but can be used by your application to uniquely identify clients.
     *
     * @return $this
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets last_modified_date_time
     *
     * @return \DateTime
     */
    public function getLastModifiedDateTime()
    {
        return $this->container['last_modified_date_time'];
    }

    /**
     * Sets last_modified_date_time
     *
     * @param \DateTime $last_modified_date_time The UTC date and time when the client’s information was last modified.
     *
     * @return $this
     */
    public function setLastModifiedDateTime($last_modified_date_time)
    {
        $this->container['last_modified_date_time'] = $last_modified_date_time;

        return $this;
    }

    /**
     * Gets red_alert
     *
     * @return string
     */
    public function getRedAlert()
    {
        return $this->container['red_alert'];
    }

    /**
     * Sets red_alert
     *
     * @param string $red_alert Contains any red alert information entered by the business owner for the client.
     *
     * @return $this
     */
    public function setRedAlert($red_alert)
    {
        $this->container['red_alert'] = $red_alert;

        return $this;
    }

    /**
     * Gets yellow_alert
     *
     * @return string
     */
    public function getYellowAlert()
    {
        return $this->container['yellow_alert'];
    }

    /**
     * Sets yellow_alert
     *
     * @param string $yellow_alert Contains any yellow alert information entered by the business owner for the client.
     *
     * @return $this
     */
    public function setYellowAlert($yellow_alert)
    {
        $this->container['yellow_alert'] = $yellow_alert;

        return $this;
    }

    /**
     * Gets middle_name
     *
     * @return string
     */
    public function getMiddleName()
    {
        return $this->container['middle_name'];
    }

    /**
     * Sets middle_name
     *
     * @param string $middle_name The client’s middle name.
     *
     * @return $this
     */
    public function setMiddleName($middle_name)
    {
        $this->container['middle_name'] = $middle_name;

        return $this;
    }

    /**
     * Gets prospect_stage
     *
     * @return \Swagger\Client\Model\ProspectStage
     */
    public function getProspectStage()
    {
        return $this->container['prospect_stage'];
    }

    /**
     * Sets prospect_stage
     *
     * @param \Swagger\Client\Model\ProspectStage $prospect_stage Contains information about the client [prospect stage](https://support.mindbodyonline.com/s/article/206176457-Prospect-Stages?language=en_US).
     *
     * @return $this
     */
    public function setProspectStage($prospect_stage)
    {
        $this->container['prospect_stage'] = $prospect_stage;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The client’s email address.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string $mobile_phone The client’s mobile phone number.
     *
     * @return $this
     */
    public function setMobilePhone($mobile_phone)
    {
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets home_phone
     *
     * @return string
     */
    public function getHomePhone()
    {
        return $this->container['home_phone'];
    }

    /**
     * Sets home_phone
     *
     * @param string $home_phone The client’s home phone number.
     *
     * @return $this
     */
    public function setHomePhone($home_phone)
    {
        $this->container['home_phone'] = $home_phone;

        return $this;
    }

    /**
     * Gets work_phone
     *
     * @return string
     */
    public function getWorkPhone()
    {
        return $this->container['work_phone'];
    }

    /**
     * Sets work_phone
     *
     * @param string $work_phone The client’s work phone number.
     *
     * @return $this
     */
    public function setWorkPhone($work_phone)
    {
        $this->container['work_phone'] = $work_phone;

        return $this;
    }

    /**
     * Gets account_balance
     *
     * @return double
     */
    public function getAccountBalance()
    {
        return $this->container['account_balance'];
    }

    /**
     * Sets account_balance
     *
     * @param double $account_balance The client’s current [account balance](https://mindbody-online-support.force.com/support/s/article/203262013-Adding-account-payments-video-tutorial?language=en_US).
     *
     * @return $this
     */
    public function setAccountBalance($account_balance)
    {
        $this->container['account_balance'] = $account_balance;

        return $this;
    }

    /**
     * Gets address_line1
     *
     * @return string
     */
    public function getAddressLine1()
    {
        return $this->container['address_line1'];
    }

    /**
     * Sets address_line1
     *
     * @param string $address_line1 The first line of the client’s street address.
     *
     * @return $this
     */
    public function setAddressLine1($address_line1)
    {
        $this->container['address_line1'] = $address_line1;

        return $this;
    }

    /**
     * Gets address_line2
     *
     * @return string
     */
    public function getAddressLine2()
    {
        return $this->container['address_line2'];
    }

    /**
     * Sets address_line2
     *
     * @param string $address_line2 The second line of the client’s street address, if needed.
     *
     * @return $this
     */
    public function setAddressLine2($address_line2)
    {
        $this->container['address_line2'] = $address_line2;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The client’s city.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets postal_code
     *
     * @return string
     */
    public function getPostalCode()
    {
        return $this->container['postal_code'];
    }

    /**
     * Sets postal_code
     *
     * @param string $postal_code The client’s postal code.
     *
     * @return $this
     */
    public function setPostalCode($postal_code)
    {
        $this->container['postal_code'] = $postal_code;

        return $this;
    }

    /**
     * Gets work_extension
     *
     * @return string
     */
    public function getWorkExtension()
    {
        return $this->container['work_extension'];
    }

    /**
     * Sets work_extension
     *
     * @param string $work_extension The client’s work phone extension number.
     *
     * @return $this
     */
    public function setWorkExtension($work_extension)
    {
        $this->container['work_extension'] = $work_extension;

        return $this;
    }

    /**
     * Gets referred_by
     *
     * @return string
     */
    public function getReferredBy()
    {
        return $this->container['referred_by'];
    }

    /**
     * Sets referred_by
     *
     * @param string $referred_by Specifies how the client was referred to the business. You can get a list of possible strings using the `GetClientReferralTypes` endpoint.
     *
     * @return $this
     */
    public function setReferredBy($referred_by)
    {
        $this->container['referred_by'] = $referred_by;

        return $this;
    }

    /**
     * Gets photo_url
     *
     * @return string
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     *
     * @param string $photo_url The URL of the client’s photo for the client profile.
     *
     * @return $this
     */
    public function setPhotoUrl($photo_url)
    {
        $this->container['photo_url'] = $photo_url;

        return $this;
    }

    /**
     * Gets emergency_contact_info_name
     *
     * @return string
     */
    public function getEmergencyContactInfoName()
    {
        return $this->container['emergency_contact_info_name'];
    }

    /**
     * Sets emergency_contact_info_name
     *
     * @param string $emergency_contact_info_name The name of the client’s emergency contact.
     *
     * @return $this
     */
    public function setEmergencyContactInfoName($emergency_contact_info_name)
    {
        $this->container['emergency_contact_info_name'] = $emergency_contact_info_name;

        return $this;
    }

    /**
     * Gets emergency_contact_info_email
     *
     * @return string
     */
    public function getEmergencyContactInfoEmail()
    {
        return $this->container['emergency_contact_info_email'];
    }

    /**
     * Sets emergency_contact_info_email
     *
     * @param string $emergency_contact_info_email The email address of the client’s emergency contact.
     *
     * @return $this
     */
    public function setEmergencyContactInfoEmail($emergency_contact_info_email)
    {
        $this->container['emergency_contact_info_email'] = $emergency_contact_info_email;

        return $this;
    }

    /**
     * Gets emergency_contact_info_phone
     *
     * @return string
     */
    public function getEmergencyContactInfoPhone()
    {
        return $this->container['emergency_contact_info_phone'];
    }

    /**
     * Sets emergency_contact_info_phone
     *
     * @param string $emergency_contact_info_phone The phone number of the client’s emergency contact.
     *
     * @return $this
     */
    public function setEmergencyContactInfoPhone($emergency_contact_info_phone)
    {
        $this->container['emergency_contact_info_phone'] = $emergency_contact_info_phone;

        return $this;
    }

    /**
     * Gets emergency_contact_info_relationship
     *
     * @return string
     */
    public function getEmergencyContactInfoRelationship()
    {
        return $this->container['emergency_contact_info_relationship'];
    }

    /**
     * Sets emergency_contact_info_relationship
     *
     * @param string $emergency_contact_info_relationship The client’s relationship with the emergency contact.
     *
     * @return $this
     */
    public function setEmergencyContactInfoRelationship($emergency_contact_info_relationship)
    {
        $this->container['emergency_contact_info_relationship'] = $emergency_contact_info_relationship;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string $gender The gender of the client.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets last_formula_notes
     *
     * @return string
     */
    public function getLastFormulaNotes()
    {
        return $this->container['last_formula_notes'];
    }

    /**
     * Sets last_formula_notes
     *
     * @param string $last_formula_notes The last [formula note](https://support.mindbodyonline.com/s/article/203259903-Appointments-Formula-notes?language=en_US) entered for the client.
     *
     * @return $this
     */
    public function setLastFormulaNotes($last_formula_notes)
    {
        $this->container['last_formula_notes'] = $last_formula_notes;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active When `true`, indicates that the client’s profile is marked as active on the site.<br />  When `false`, the client’s profile is inactive.
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets sales_reps
     *
     * @return \Swagger\Client\Model\SalesRep[]
     */
    public function getSalesReps()
    {
        return $this->container['sales_reps'];
    }

    /**
     * Sets sales_reps
     *
     * @param \Swagger\Client\Model\SalesRep[] $sales_reps A list of sales representatives.
     *
     * @return $this
     */
    public function setSalesReps($sales_reps)
    {
        $this->container['sales_reps'] = $sales_reps;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The status of the client in the business. Possible values are:  * Declined  * Non-Member  * Active  * Expired  * Suspended  * Terminated
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action The action taken.
     *
     * @return $this
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets send_account_emails
     *
     * @return bool
     */
    public function getSendAccountEmails()
    {
        return $this->container['send_account_emails'];
    }

    /**
     * Sets send_account_emails
     *
     * @param bool $send_account_emails When `true`, indicates that the client has opted to receive general account notifications by email. This property is editable.   <br />Default: **false**
     *
     * @return $this
     */
    public function setSendAccountEmails($send_account_emails)
    {
        $this->container['send_account_emails'] = $send_account_emails;

        return $this;
    }

    /**
     * Gets send_account_texts
     *
     * @return bool
     */
    public function getSendAccountTexts()
    {
        return $this->container['send_account_texts'];
    }

    /**
     * Sets send_account_texts
     *
     * @param bool $send_account_texts When `true`, indicates that the client has opted to receive general account notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.
     *
     * @return $this
     */
    public function setSendAccountTexts($send_account_texts)
    {
        $this->container['send_account_texts'] = $send_account_texts;

        return $this;
    }

    /**
     * Gets send_promotional_emails
     *
     * @return bool
     */
    public function getSendPromotionalEmails()
    {
        return $this->container['send_promotional_emails'];
    }

    /**
     * Sets send_promotional_emails
     *
     * @param bool $send_promotional_emails When `true`, indicates that the client has opted to receive promotional notifications by email. This property is editable.   <br />Default: **false**
     *
     * @return $this
     */
    public function setSendPromotionalEmails($send_promotional_emails)
    {
        $this->container['send_promotional_emails'] = $send_promotional_emails;

        return $this;
    }

    /**
     * Gets send_promotional_texts
     *
     * @return bool
     */
    public function getSendPromotionalTexts()
    {
        return $this->container['send_promotional_texts'];
    }

    /**
     * Sets send_promotional_texts
     *
     * @param bool $send_promotional_texts When `true`, indicates that the client has opted to receive promotional notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.
     *
     * @return $this
     */
    public function setSendPromotionalTexts($send_promotional_texts)
    {
        $this->container['send_promotional_texts'] = $send_promotional_texts;

        return $this;
    }

    /**
     * Gets send_schedule_emails
     *
     * @return bool
     */
    public function getSendScheduleEmails()
    {
        return $this->container['send_schedule_emails'];
    }

    /**
     * Sets send_schedule_emails
     *
     * @param bool $send_schedule_emails When `true`, indicates that the client has opted to receive schedule notifications by email. This property is editable.   <br />Default: **false**
     *
     * @return $this
     */
    public function setSendScheduleEmails($send_schedule_emails)
    {
        $this->container['send_schedule_emails'] = $send_schedule_emails;

        return $this;
    }

    /**
     * Gets send_schedule_texts
     *
     * @return bool
     */
    public function getSendScheduleTexts()
    {
        return $this->container['send_schedule_texts'];
    }

    /**
     * Sets send_schedule_texts
     *
     * @param bool $send_schedule_texts When `true`, indicates that the client has opted to receive schedule notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.
     *
     * @return $this
     */
    public function setSendScheduleTexts($send_schedule_texts)
    {
        $this->container['send_schedule_texts'] = $send_schedule_texts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


