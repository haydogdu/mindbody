<?php
/**
 * SubstituteClassTeacherRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * SubstituteClassTeacherRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SubstituteClassTeacherRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SubstituteClassTeacherRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'class_id' => 'int',
        'staff_id' => 'int',
        'override_conflicts' => 'bool',
        'send_client_email' => 'bool',
        'send_original_teacher_email' => 'bool',
        'send_substitute_teacher_email' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'class_id' => 'int32',
        'staff_id' => 'int64',
        'override_conflicts' => null,
        'send_client_email' => null,
        'send_original_teacher_email' => null,
        'send_substitute_teacher_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'class_id' => 'ClassId',
        'staff_id' => 'StaffId',
        'override_conflicts' => 'OverrideConflicts',
        'send_client_email' => 'SendClientEmail',
        'send_original_teacher_email' => 'SendOriginalTeacherEmail',
        'send_substitute_teacher_email' => 'SendSubstituteTeacherEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'class_id' => 'setClassId',
        'staff_id' => 'setStaffId',
        'override_conflicts' => 'setOverrideConflicts',
        'send_client_email' => 'setSendClientEmail',
        'send_original_teacher_email' => 'setSendOriginalTeacherEmail',
        'send_substitute_teacher_email' => 'setSendSubstituteTeacherEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'class_id' => 'getClassId',
        'staff_id' => 'getStaffId',
        'override_conflicts' => 'getOverrideConflicts',
        'send_client_email' => 'getSendClientEmail',
        'send_original_teacher_email' => 'getSendOriginalTeacherEmail',
        'send_substitute_teacher_email' => 'getSendSubstituteTeacherEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['class_id'] = isset($data['class_id']) ? $data['class_id'] : null;
        $this->container['staff_id'] = isset($data['staff_id']) ? $data['staff_id'] : null;
        $this->container['override_conflicts'] = isset($data['override_conflicts']) ? $data['override_conflicts'] : null;
        $this->container['send_client_email'] = isset($data['send_client_email']) ? $data['send_client_email'] : null;
        $this->container['send_original_teacher_email'] = isset($data['send_original_teacher_email']) ? $data['send_original_teacher_email'] : null;
        $this->container['send_substitute_teacher_email'] = isset($data['send_substitute_teacher_email']) ? $data['send_substitute_teacher_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['class_id'] === null) {
            $invalidProperties[] = "'class_id' can't be null";
        }
        if ($this->container['staff_id'] === null) {
            $invalidProperties[] = "'staff_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets class_id
     *
     * @return int
     */
    public function getClassId()
    {
        return $this->container['class_id'];
    }

    /**
     * Sets class_id
     *
     * @param int $class_id The ID of the class to which a substitute teacher needs to be assigned.
     *
     * @return $this
     */
    public function setClassId($class_id)
    {
        $this->container['class_id'] = $class_id;

        return $this;
    }

    /**
     * Gets staff_id
     *
     * @return int
     */
    public function getStaffId()
    {
        return $this->container['staff_id'];
    }

    /**
     * Sets staff_id
     *
     * @param int $staff_id The staff ID of the teacher to substitute.
     *
     * @return $this
     */
    public function setStaffId($staff_id)
    {
        $this->container['staff_id'] = $staff_id;

        return $this;
    }

    /**
     * Gets override_conflicts
     *
     * @return bool
     */
    public function getOverrideConflicts()
    {
        return $this->container['override_conflicts'];
    }

    /**
     * Sets override_conflicts
     *
     * @param bool $override_conflicts When `true`, overrides any conflicts in the schedule.
     *
     * @return $this
     */
    public function setOverrideConflicts($override_conflicts)
    {
        $this->container['override_conflicts'] = $override_conflicts;

        return $this;
    }

    /**
     * Gets send_client_email
     *
     * @return bool
     */
    public function getSendClientEmail()
    {
        return $this->container['send_client_email'];
    }

    /**
     * Sets send_client_email
     *
     * @param bool $send_client_email When `true`, sends the client an automatic email about the substitution, if the client has opted to receive email.
     *
     * @return $this
     */
    public function setSendClientEmail($send_client_email)
    {
        $this->container['send_client_email'] = $send_client_email;

        return $this;
    }

    /**
     * Gets send_original_teacher_email
     *
     * @return bool
     */
    public function getSendOriginalTeacherEmail()
    {
        return $this->container['send_original_teacher_email'];
    }

    /**
     * Sets send_original_teacher_email
     *
     * @param bool $send_original_teacher_email When `true`, sends the originally scheduled teacher an automatic email about the substitution.
     *
     * @return $this
     */
    public function setSendOriginalTeacherEmail($send_original_teacher_email)
    {
        $this->container['send_original_teacher_email'] = $send_original_teacher_email;

        return $this;
    }

    /**
     * Gets send_substitute_teacher_email
     *
     * @return bool
     */
    public function getSendSubstituteTeacherEmail()
    {
        return $this->container['send_substitute_teacher_email'];
    }

    /**
     * Sets send_substitute_teacher_email
     *
     * @param bool $send_substitute_teacher_email When `true`, sends the substituted teacher an automatic email about the substitution.
     *
     * @return $this
     */
    public function setSendSubstituteTeacherEmail($send_substitute_teacher_email)
    {
        $this->container['send_substitute_teacher_email'] = $send_substitute_teacher_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


