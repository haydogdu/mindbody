<?php
/**
 * GetServicesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetServicesRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetServicesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetServicesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'program_ids' => 'int[]',
        'session_type_ids' => 'int[]',
        'service_ids' => 'string[]',
        'class_id' => 'int',
        'class_schedule_id' => 'int',
        'sell_online' => 'bool',
        'location_id' => 'int',
        'hide_related_programs' => 'bool',
        'staff_id' => 'int',
        'limit' => 'int',
        'offset' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'program_ids' => 'int32',
        'session_type_ids' => 'int32',
        'service_ids' => null,
        'class_id' => 'int32',
        'class_schedule_id' => 'int32',
        'sell_online' => null,
        'location_id' => 'int32',
        'hide_related_programs' => null,
        'staff_id' => 'int64',
        'limit' => 'int32',
        'offset' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'program_ids' => 'ProgramIds',
        'session_type_ids' => 'SessionTypeIds',
        'service_ids' => 'ServiceIds',
        'class_id' => 'ClassId',
        'class_schedule_id' => 'ClassScheduleId',
        'sell_online' => 'SellOnline',
        'location_id' => 'LocationId',
        'hide_related_programs' => 'HideRelatedPrograms',
        'staff_id' => 'StaffId',
        'limit' => 'Limit',
        'offset' => 'Offset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'program_ids' => 'setProgramIds',
        'session_type_ids' => 'setSessionTypeIds',
        'service_ids' => 'setServiceIds',
        'class_id' => 'setClassId',
        'class_schedule_id' => 'setClassScheduleId',
        'sell_online' => 'setSellOnline',
        'location_id' => 'setLocationId',
        'hide_related_programs' => 'setHideRelatedPrograms',
        'staff_id' => 'setStaffId',
        'limit' => 'setLimit',
        'offset' => 'setOffset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'program_ids' => 'getProgramIds',
        'session_type_ids' => 'getSessionTypeIds',
        'service_ids' => 'getServiceIds',
        'class_id' => 'getClassId',
        'class_schedule_id' => 'getClassScheduleId',
        'sell_online' => 'getSellOnline',
        'location_id' => 'getLocationId',
        'hide_related_programs' => 'getHideRelatedPrograms',
        'staff_id' => 'getStaffId',
        'limit' => 'getLimit',
        'offset' => 'getOffset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['program_ids'] = isset($data['program_ids']) ? $data['program_ids'] : null;
        $this->container['session_type_ids'] = isset($data['session_type_ids']) ? $data['session_type_ids'] : null;
        $this->container['service_ids'] = isset($data['service_ids']) ? $data['service_ids'] : null;
        $this->container['class_id'] = isset($data['class_id']) ? $data['class_id'] : null;
        $this->container['class_schedule_id'] = isset($data['class_schedule_id']) ? $data['class_schedule_id'] : null;
        $this->container['sell_online'] = isset($data['sell_online']) ? $data['sell_online'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['hide_related_programs'] = isset($data['hide_related_programs']) ? $data['hide_related_programs'] : null;
        $this->container['staff_id'] = isset($data['staff_id']) ? $data['staff_id'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets program_ids
     *
     * @return int[]
     */
    public function getProgramIds()
    {
        return $this->container['program_ids'];
    }

    /**
     * Sets program_ids
     *
     * @param int[] $program_ids Filters to pricing options with the specified program IDs.
     *
     * @return $this
     */
    public function setProgramIds($program_ids)
    {
        $this->container['program_ids'] = $program_ids;

        return $this;
    }

    /**
     * Gets session_type_ids
     *
     * @return int[]
     */
    public function getSessionTypeIds()
    {
        return $this->container['session_type_ids'];
    }

    /**
     * Sets session_type_ids
     *
     * @param int[] $session_type_ids Filters to the pricing options with the specified session types IDs.
     *
     * @return $this
     */
    public function setSessionTypeIds($session_type_ids)
    {
        $this->container['session_type_ids'] = $session_type_ids;

        return $this;
    }

    /**
     * Gets service_ids
     *
     * @return string[]
     */
    public function getServiceIds()
    {
        return $this->container['service_ids'];
    }

    /**
     * Sets service_ids
     *
     * @param string[] $service_ids Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably.
     *
     * @return $this
     */
    public function setServiceIds($service_ids)
    {
        $this->container['service_ids'] = $service_ids;

        return $this;
    }

    /**
     * Gets class_id
     *
     * @return int
     */
    public function getClassId()
    {
        return $this->container['class_id'];
    }

    /**
     * Sets class_id
     *
     * @param int $class_id Filters to the pricing options for the specified class ID.
     *
     * @return $this
     */
    public function setClassId($class_id)
    {
        $this->container['class_id'] = $class_id;

        return $this;
    }

    /**
     * Gets class_schedule_id
     *
     * @return int
     */
    public function getClassScheduleId()
    {
        return $this->container['class_schedule_id'];
    }

    /**
     * Sets class_schedule_id
     *
     * @param int $class_schedule_id Filters to the pricing options for the specified class schedule ID.
     *
     * @return $this
     */
    public function setClassScheduleId($class_schedule_id)
    {
        $this->container['class_schedule_id'] = $class_schedule_id;

        return $this;
    }

    /**
     * Gets sell_online
     *
     * @return bool
     */
    public function getSellOnline()
    {
        return $this->container['sell_online'];
    }

    /**
     * Sets sell_online
     *
     * @param bool $sell_online When `true`, filters to the pricing options that can be sold online.<br />  Default: **false**
     *
     * @return $this
     */
    public function setSellOnline($sell_online)
    {
        $this->container['sell_online'] = $sell_online;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id When specified, for each returned pricing option, `TaxRate` and `TaxIncluded` are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the `TaxRate` is set to zero.
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets hide_related_programs
     *
     * @return bool
     */
    public function getHideRelatedPrograms()
    {
        return $this->container['hide_related_programs'];
    }

    /**
     * Sets hide_related_programs
     *
     * @param bool $hide_related_programs When `true`, indicates that pricing options of related programs are omitted from the response.<br />  Default: **false**
     *
     * @return $this
     */
    public function setHideRelatedPrograms($hide_related_programs)
    {
        $this->container['hide_related_programs'] = $hide_related_programs;

        return $this;
    }

    /**
     * Gets staff_id
     *
     * @return int
     */
    public function getStaffId()
    {
        return $this->container['staff_id'];
    }

    /**
     * Sets staff_id
     *
     * @param int $staff_id Sets `Price` and `OnlinePrice` to the particular pricing of a specific staff member, if allowed by the business.
     *
     * @return $this
     */
    public function setStaffId($staff_id)
    {
        $this->container['staff_id'] = $staff_id;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit Number of results to include, defaults to 100
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int $offset Page offset, defaults to 0.
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


