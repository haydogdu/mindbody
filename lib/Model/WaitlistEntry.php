<?php
/**
 * WaitlistEntry
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * WaitlistEntry Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class WaitlistEntry implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'WaitlistEntry';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'class_date' => '\DateTime',
        'class_id' => 'int',
        'class_schedule' => '\Swagger\Client\Model\ClassSchedule',
        'client' => '\Swagger\Client\Model\Client',
        'enrollment_date_forward' => '\DateTime',
        'id' => 'int',
        'request_date_time' => '\DateTime',
        'visit_ref_no' => 'int',
        'web' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'class_date' => 'date-time',
        'class_id' => 'int64',
        'class_schedule' => null,
        'client' => null,
        'enrollment_date_forward' => 'date-time',
        'id' => 'int32',
        'request_date_time' => 'date-time',
        'visit_ref_no' => 'int32',
        'web' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'class_date' => 'ClassDate',
        'class_id' => 'ClassId',
        'class_schedule' => 'ClassSchedule',
        'client' => 'Client',
        'enrollment_date_forward' => 'EnrollmentDateForward',
        'id' => 'Id',
        'request_date_time' => 'RequestDateTime',
        'visit_ref_no' => 'VisitRefNo',
        'web' => 'Web'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'class_date' => 'setClassDate',
        'class_id' => 'setClassId',
        'class_schedule' => 'setClassSchedule',
        'client' => 'setClient',
        'enrollment_date_forward' => 'setEnrollmentDateForward',
        'id' => 'setId',
        'request_date_time' => 'setRequestDateTime',
        'visit_ref_no' => 'setVisitRefNo',
        'web' => 'setWeb'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'class_date' => 'getClassDate',
        'class_id' => 'getClassId',
        'class_schedule' => 'getClassSchedule',
        'client' => 'getClient',
        'enrollment_date_forward' => 'getEnrollmentDateForward',
        'id' => 'getId',
        'request_date_time' => 'getRequestDateTime',
        'visit_ref_no' => 'getVisitRefNo',
        'web' => 'getWeb'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['class_date'] = isset($data['class_date']) ? $data['class_date'] : null;
        $this->container['class_id'] = isset($data['class_id']) ? $data['class_id'] : null;
        $this->container['class_schedule'] = isset($data['class_schedule']) ? $data['class_schedule'] : null;
        $this->container['client'] = isset($data['client']) ? $data['client'] : null;
        $this->container['enrollment_date_forward'] = isset($data['enrollment_date_forward']) ? $data['enrollment_date_forward'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['request_date_time'] = isset($data['request_date_time']) ? $data['request_date_time'] : null;
        $this->container['visit_ref_no'] = isset($data['visit_ref_no']) ? $data['visit_ref_no'] : null;
        $this->container['web'] = isset($data['web']) ? $data['web'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets class_date
     *
     * @return \DateTime
     */
    public function getClassDate()
    {
        return $this->container['class_date'];
    }

    /**
     * Sets class_date
     *
     * @param \DateTime $class_date The date of the class or enrollment.
     *
     * @return $this
     */
    public function setClassDate($class_date)
    {
        $this->container['class_date'] = $class_date;

        return $this;
    }

    /**
     * Gets class_id
     *
     * @return int
     */
    public function getClassId()
    {
        return $this->container['class_id'];
    }

    /**
     * Sets class_id
     *
     * @param int $class_id The ID of the class or enrollment.
     *
     * @return $this
     */
    public function setClassId($class_id)
    {
        $this->container['class_id'] = $class_id;

        return $this;
    }

    /**
     * Gets class_schedule
     *
     * @return \Swagger\Client\Model\ClassSchedule
     */
    public function getClassSchedule()
    {
        return $this->container['class_schedule'];
    }

    /**
     * Sets class_schedule
     *
     * @param \Swagger\Client\Model\ClassSchedule $class_schedule Contains information about the class schedule for this waiting list entry.
     *
     * @return $this
     */
    public function setClassSchedule($class_schedule)
    {
        $this->container['class_schedule'] = $class_schedule;

        return $this;
    }

    /**
     * Gets client
     *
     * @return \Swagger\Client\Model\Client
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param \Swagger\Client\Model\Client $client Contains information about the requested client who is on the waiting list.
     *
     * @return $this
     */
    public function setClient($client)
    {
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets enrollment_date_forward
     *
     * @return \DateTime
     */
    public function getEnrollmentDateForward()
    {
        return $this->container['enrollment_date_forward'];
    }

    /**
     * Sets enrollment_date_forward
     *
     * @param \DateTime $enrollment_date_forward If the waiting list entry was created for an enrollment, this is the date on or after which the client can be added to the enrollment from the waitlist.
     *
     * @return $this
     */
    public function setEnrollmentDateForward($enrollment_date_forward)
    {
        $this->container['enrollment_date_forward'] = $enrollment_date_forward;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the waiting list entry.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets request_date_time
     *
     * @return \DateTime
     */
    public function getRequestDateTime()
    {
        return $this->container['request_date_time'];
    }

    /**
     * Sets request_date_time
     *
     * @param \DateTime $request_date_time The date and time that the request to be on the waiting list was made.
     *
     * @return $this
     */
    public function setRequestDateTime($request_date_time)
    {
        $this->container['request_date_time'] = $request_date_time;

        return $this;
    }

    /**
     * Gets visit_ref_no
     *
     * @return int
     */
    public function getVisitRefNo()
    {
        return $this->container['visit_ref_no'];
    }

    /**
     * Sets visit_ref_no
     *
     * @param int $visit_ref_no The ID of the visit that is associated with the waiting list entry.
     *
     * @return $this
     */
    public function setVisitRefNo($visit_ref_no)
    {
        $this->container['visit_ref_no'] = $visit_ref_no;

        return $this;
    }

    /**
     * Gets web
     *
     * @return bool
     */
    public function getWeb()
    {
        return $this->container['web'];
    }

    /**
     * Sets web
     *
     * @param bool $web If `true`, the entry on the waiting list was requested online.<br />  If `false`, the entry on the waiting list was requested off-line, for example in person or by phone.
     *
     * @return $this
     */
    public function setWeb($web)
    {
        $this->container['web'] = $web;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


