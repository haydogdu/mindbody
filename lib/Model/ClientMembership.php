<?php
/**
 * ClientMembership
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ClientMembership Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ClientMembership implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ClientMembership';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'restricted_locations' => '\Swagger\Client\Model\Location[]',
        'icon_code' => 'string',
        'active_date' => '\DateTime',
        'count' => 'int',
        'current' => 'bool',
        'expiration_date' => '\DateTime',
        'id' => 'int',
        'name' => 'string',
        'payment_date' => '\DateTime',
        'program' => '\Swagger\Client\Model\Program',
        'remaining' => 'int',
        'site_id' => 'int',
        'action' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'restricted_locations' => null,
        'icon_code' => null,
        'active_date' => 'date-time',
        'count' => 'int32',
        'current' => null,
        'expiration_date' => 'date-time',
        'id' => 'int64',
        'name' => null,
        'payment_date' => 'date-time',
        'program' => null,
        'remaining' => 'int32',
        'site_id' => 'int32',
        'action' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'restricted_locations' => 'RestrictedLocations',
        'icon_code' => 'IconCode',
        'active_date' => 'ActiveDate',
        'count' => 'Count',
        'current' => 'Current',
        'expiration_date' => 'ExpirationDate',
        'id' => 'Id',
        'name' => 'Name',
        'payment_date' => 'PaymentDate',
        'program' => 'Program',
        'remaining' => 'Remaining',
        'site_id' => 'SiteId',
        'action' => 'Action'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'restricted_locations' => 'setRestrictedLocations',
        'icon_code' => 'setIconCode',
        'active_date' => 'setActiveDate',
        'count' => 'setCount',
        'current' => 'setCurrent',
        'expiration_date' => 'setExpirationDate',
        'id' => 'setId',
        'name' => 'setName',
        'payment_date' => 'setPaymentDate',
        'program' => 'setProgram',
        'remaining' => 'setRemaining',
        'site_id' => 'setSiteId',
        'action' => 'setAction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'restricted_locations' => 'getRestrictedLocations',
        'icon_code' => 'getIconCode',
        'active_date' => 'getActiveDate',
        'count' => 'getCount',
        'current' => 'getCurrent',
        'expiration_date' => 'getExpirationDate',
        'id' => 'getId',
        'name' => 'getName',
        'payment_date' => 'getPaymentDate',
        'program' => 'getProgram',
        'remaining' => 'getRemaining',
        'site_id' => 'getSiteId',
        'action' => 'getAction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ACTION_NONE = 'None';
    const ACTION_ADDED = 'Added';
    const ACTION_UPDATED = 'Updated';
    const ACTION_FAILED = 'Failed';
    const ACTION_REMOVED = 'Removed';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getActionAllowableValues()
    {
        return [
            self::ACTION_NONE,
            self::ACTION_ADDED,
            self::ACTION_UPDATED,
            self::ACTION_FAILED,
            self::ACTION_REMOVED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['restricted_locations'] = isset($data['restricted_locations']) ? $data['restricted_locations'] : null;
        $this->container['icon_code'] = isset($data['icon_code']) ? $data['icon_code'] : null;
        $this->container['active_date'] = isset($data['active_date']) ? $data['active_date'] : null;
        $this->container['count'] = isset($data['count']) ? $data['count'] : null;
        $this->container['current'] = isset($data['current']) ? $data['current'] : null;
        $this->container['expiration_date'] = isset($data['expiration_date']) ? $data['expiration_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['payment_date'] = isset($data['payment_date']) ? $data['payment_date'] : null;
        $this->container['program'] = isset($data['program']) ? $data['program'] : null;
        $this->container['remaining'] = isset($data['remaining']) ? $data['remaining'] : null;
        $this->container['site_id'] = isset($data['site_id']) ? $data['site_id'] : null;
        $this->container['action'] = isset($data['action']) ? $data['action'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($this->container['action']) && !in_array($this->container['action'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'action', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets restricted_locations
     *
     * @return \Swagger\Client\Model\Location[]
     */
    public function getRestrictedLocations()
    {
        return $this->container['restricted_locations'];
    }

    /**
     * Sets restricted_locations
     *
     * @param \Swagger\Client\Model\Location[] $restricted_locations The locations that the membership is restricted to, if any.
     *
     * @return $this
     */
    public function setRestrictedLocations($restricted_locations)
    {
        $this->container['restricted_locations'] = $restricted_locations;

        return $this;
    }

    /**
     * Gets icon_code
     *
     * @return string
     */
    public function getIconCode()
    {
        return $this->container['icon_code'];
    }

    /**
     * Sets icon_code
     *
     * @param string $icon_code Text code that represents the `MembershipIcon`.
     *
     * @return $this
     */
    public function setIconCode($icon_code)
    {
        $this->container['icon_code'] = $icon_code;

        return $this;
    }

    /**
     * Gets active_date
     *
     * @return \DateTime
     */
    public function getActiveDate()
    {
        return $this->container['active_date'];
    }

    /**
     * Sets active_date
     *
     * @param \DateTime $active_date The date that this pricing option became active and could be used to pay for services.
     *
     * @return $this
     */
    public function setActiveDate($active_date)
    {
        $this->container['active_date'] = $active_date;

        return $this;
    }

    /**
     * Gets count
     *
     * @return int
     */
    public function getCount()
    {
        return $this->container['count'];
    }

    /**
     * Sets count
     *
     * @param int $count The number of service sessions this pricing option contained when first purchased.
     *
     * @return $this
     */
    public function setCount($count)
    {
        $this->container['count'] = $count;

        return $this;
    }

    /**
     * Gets current
     *
     * @return bool
     */
    public function getCurrent()
    {
        return $this->container['current'];
    }

    /**
     * Sets current
     *
     * @param bool $current When `true`, there are service sessions remaining on the pricing option that can be used pay for the current session.<br />  When `false`, the client cannot use this pricing option to pay for other services.
     *
     * @return $this
     */
    public function setCurrent($current)
    {
        $this->container['current'] = $current;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime $expiration_date The date when the pricing option expires and can no longer be used to pay for services, even if unused service sessions remain on the option; expressed as UTC.
     *
     * @return $this
     */
    public function setExpirationDate($expiration_date)
    {
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique ID assigned to this pricing option.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of this pricing option.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets payment_date
     *
     * @return \DateTime
     */
    public function getPaymentDate()
    {
        return $this->container['payment_date'];
    }

    /**
     * Sets payment_date
     *
     * @param \DateTime $payment_date The date on which the client paid for this pricing option.
     *
     * @return $this
     */
    public function setPaymentDate($payment_date)
    {
        $this->container['payment_date'] = $payment_date;

        return $this;
    }

    /**
     * Gets program
     *
     * @return \Swagger\Client\Model\Program
     */
    public function getProgram()
    {
        return $this->container['program'];
    }

    /**
     * Sets program
     *
     * @param \Swagger\Client\Model\Program $program Contains information about the service category this service falls under.
     *
     * @return $this
     */
    public function setProgram($program)
    {
        $this->container['program'] = $program;

        return $this;
    }

    /**
     * Gets remaining
     *
     * @return int
     */
    public function getRemaining()
    {
        return $this->container['remaining'];
    }

    /**
     * Sets remaining
     *
     * @param int $remaining The number of service sessions remaining in the pricing option that can still be used.
     *
     * @return $this
     */
    public function setRemaining($remaining)
    {
        $this->container['remaining'] = $remaining;

        return $this;
    }

    /**
     * Gets site_id
     *
     * @return int
     */
    public function getSiteId()
    {
        return $this->container['site_id'];
    }

    /**
     * Sets site_id
     *
     * @param int $site_id The ID of the subscriber site associated with this pricing option.
     *
     * @return $this
     */
    public function setSiteId($site_id)
    {
        $this->container['site_id'] = $site_id;

        return $this;
    }

    /**
     * Gets action
     *
     * @return string
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param string $action The action taken.
     *
     * @return $this
     */
    public function setAction($action)
    {
        $allowedValues = $this->getActionAllowableValues();
        if (!is_null($action) && !in_array($action, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'action', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['action'] = $action;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


