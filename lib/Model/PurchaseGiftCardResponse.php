<?php
/**
 * PurchaseGiftCardResponse
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PurchaseGiftCardResponse Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseGiftCardResponse implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseGiftCardResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'barcode_id' => 'string',
        'value' => 'double',
        'amount_paid' => 'double',
        'from_name' => 'string',
        'layout_id' => 'int',
        'email_receipt' => 'bool',
        'purchaser_client_id' => 'string',
        'purchaser_email' => 'string',
        'recipient_email' => 'string',
        'sale_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'barcode_id' => null,
        'value' => 'double',
        'amount_paid' => 'double',
        'from_name' => null,
        'layout_id' => 'int32',
        'email_receipt' => null,
        'purchaser_client_id' => null,
        'purchaser_email' => null,
        'recipient_email' => null,
        'sale_id' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'barcode_id' => 'BarcodeId',
        'value' => 'Value',
        'amount_paid' => 'AmountPaid',
        'from_name' => 'FromName',
        'layout_id' => 'LayoutId',
        'email_receipt' => 'EmailReceipt',
        'purchaser_client_id' => 'PurchaserClientId',
        'purchaser_email' => 'PurchaserEmail',
        'recipient_email' => 'RecipientEmail',
        'sale_id' => 'SaleId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'barcode_id' => 'setBarcodeId',
        'value' => 'setValue',
        'amount_paid' => 'setAmountPaid',
        'from_name' => 'setFromName',
        'layout_id' => 'setLayoutId',
        'email_receipt' => 'setEmailReceipt',
        'purchaser_client_id' => 'setPurchaserClientId',
        'purchaser_email' => 'setPurchaserEmail',
        'recipient_email' => 'setRecipientEmail',
        'sale_id' => 'setSaleId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'barcode_id' => 'getBarcodeId',
        'value' => 'getValue',
        'amount_paid' => 'getAmountPaid',
        'from_name' => 'getFromName',
        'layout_id' => 'getLayoutId',
        'email_receipt' => 'getEmailReceipt',
        'purchaser_client_id' => 'getPurchaserClientId',
        'purchaser_email' => 'getPurchaserEmail',
        'recipient_email' => 'getRecipientEmail',
        'sale_id' => 'getSaleId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['barcode_id'] = isset($data['barcode_id']) ? $data['barcode_id'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
        $this->container['amount_paid'] = isset($data['amount_paid']) ? $data['amount_paid'] : null;
        $this->container['from_name'] = isset($data['from_name']) ? $data['from_name'] : null;
        $this->container['layout_id'] = isset($data['layout_id']) ? $data['layout_id'] : null;
        $this->container['email_receipt'] = isset($data['email_receipt']) ? $data['email_receipt'] : null;
        $this->container['purchaser_client_id'] = isset($data['purchaser_client_id']) ? $data['purchaser_client_id'] : null;
        $this->container['purchaser_email'] = isset($data['purchaser_email']) ? $data['purchaser_email'] : null;
        $this->container['recipient_email'] = isset($data['recipient_email']) ? $data['recipient_email'] : null;
        $this->container['sale_id'] = isset($data['sale_id']) ? $data['sale_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets barcode_id
     *
     * @return string
     */
    public function getBarcodeId()
    {
        return $this->container['barcode_id'];
    }

    /**
     * Sets barcode_id
     *
     * @param string $barcode_id The barcode ID assigned to the purchased gift card.
     *
     * @return $this
     */
    public function setBarcodeId($barcode_id)
    {
        $this->container['barcode_id'] = $barcode_id;

        return $this;
    }

    /**
     * Gets value
     *
     * @return double
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param double $value The monetary value of the gift card.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }

    /**
     * Gets amount_paid
     *
     * @return double
     */
    public function getAmountPaid()
    {
        return $this->container['amount_paid'];
    }

    /**
     * Sets amount_paid
     *
     * @param double $amount_paid The amount paid for the gift card by the purchaser.
     *
     * @return $this
     */
    public function setAmountPaid($amount_paid)
    {
        $this->container['amount_paid'] = $amount_paid;

        return $this;
    }

    /**
     * Gets from_name
     *
     * @return string
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     *
     * @param string $from_name The name of the purchaser.
     *
     * @return $this
     */
    public function setFromName($from_name)
    {
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets layout_id
     *
     * @return int
     */
    public function getLayoutId()
    {
        return $this->container['layout_id'];
    }

    /**
     * Sets layout_id
     *
     * @param int $layout_id The ID of the layout used for this gift card.
     *
     * @return $this
     */
    public function setLayoutId($layout_id)
    {
        $this->container['layout_id'] = $layout_id;

        return $this;
    }

    /**
     * Gets email_receipt
     *
     * @return bool
     */
    public function getEmailReceipt()
    {
        return $this->container['email_receipt'];
    }

    /**
     * Sets email_receipt
     *
     * @param bool $email_receipt Whether or not an email receipt was sent to the purchaser. If true, a receipt was sent.
     *
     * @return $this
     */
    public function setEmailReceipt($email_receipt)
    {
        $this->container['email_receipt'] = $email_receipt;

        return $this;
    }

    /**
     * Gets purchaser_client_id
     *
     * @return string
     */
    public function getPurchaserClientId()
    {
        return $this->container['purchaser_client_id'];
    }

    /**
     * Sets purchaser_client_id
     *
     * @param string $purchaser_client_id The client ID of the purchaser.
     *
     * @return $this
     */
    public function setPurchaserClientId($purchaser_client_id)
    {
        $this->container['purchaser_client_id'] = $purchaser_client_id;

        return $this;
    }

    /**
     * Gets purchaser_email
     *
     * @return string
     */
    public function getPurchaserEmail()
    {
        return $this->container['purchaser_email'];
    }

    /**
     * Sets purchaser_email
     *
     * @param string $purchaser_email The purchaser’s email address.
     *
     * @return $this
     */
    public function setPurchaserEmail($purchaser_email)
    {
        $this->container['purchaser_email'] = $purchaser_email;

        return $this;
    }

    /**
     * Gets recipient_email
     *
     * @return string
     */
    public function getRecipientEmail()
    {
        return $this->container['recipient_email'];
    }

    /**
     * Sets recipient_email
     *
     * @param string $recipient_email The recipient’s email address.
     *
     * @return $this
     */
    public function setRecipientEmail($recipient_email)
    {
        $this->container['recipient_email'] = $recipient_email;

        return $this;
    }

    /**
     * Gets sale_id
     *
     * @return int
     */
    public function getSaleId()
    {
        return $this->container['sale_id'];
    }

    /**
     * Sets sale_id
     *
     * @param int $sale_id The sale ID of the gift card.
     *
     * @return $this
     */
    public function setSaleId($sale_id)
    {
        $this->container['sale_id'] = $sale_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


