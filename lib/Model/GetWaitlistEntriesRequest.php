<?php
/**
 * GetWaitlistEntriesRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetWaitlistEntriesRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetWaitlistEntriesRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetWaitlistEntriesRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'class_ids' => 'int[]',
        'class_schedule_ids' => 'int[]',
        'client_ids' => 'string[]',
        'hide_past_entries' => 'bool',
        'waitlist_entry_ids' => 'int[]',
        'limit' => 'int',
        'offset' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'class_ids' => 'int32',
        'class_schedule_ids' => 'int32',
        'client_ids' => null,
        'hide_past_entries' => null,
        'waitlist_entry_ids' => 'int32',
        'limit' => 'int32',
        'offset' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'class_ids' => 'ClassIds',
        'class_schedule_ids' => 'ClassScheduleIds',
        'client_ids' => 'ClientIds',
        'hide_past_entries' => 'HidePastEntries',
        'waitlist_entry_ids' => 'WaitlistEntryIds',
        'limit' => 'Limit',
        'offset' => 'Offset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'class_ids' => 'setClassIds',
        'class_schedule_ids' => 'setClassScheduleIds',
        'client_ids' => 'setClientIds',
        'hide_past_entries' => 'setHidePastEntries',
        'waitlist_entry_ids' => 'setWaitlistEntryIds',
        'limit' => 'setLimit',
        'offset' => 'setOffset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'class_ids' => 'getClassIds',
        'class_schedule_ids' => 'getClassScheduleIds',
        'client_ids' => 'getClientIds',
        'hide_past_entries' => 'getHidePastEntries',
        'waitlist_entry_ids' => 'getWaitlistEntryIds',
        'limit' => 'getLimit',
        'offset' => 'getOffset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['class_ids'] = isset($data['class_ids']) ? $data['class_ids'] : null;
        $this->container['class_schedule_ids'] = isset($data['class_schedule_ids']) ? $data['class_schedule_ids'] : null;
        $this->container['client_ids'] = isset($data['client_ids']) ? $data['client_ids'] : null;
        $this->container['hide_past_entries'] = isset($data['hide_past_entries']) ? $data['hide_past_entries'] : null;
        $this->container['waitlist_entry_ids'] = isset($data['waitlist_entry_ids']) ? $data['waitlist_entry_ids'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets class_ids
     *
     * @return int[]
     */
    public function getClassIds()
    {
        return $this->container['class_ids'];
    }

    /**
     * Sets class_ids
     *
     * @param int[] $class_ids The requested class IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request. <br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassIds**
     *
     * @return $this
     */
    public function setClassIds($class_ids)
    {
        $this->container['class_ids'] = $class_ids;

        return $this;
    }

    /**
     * Gets class_schedule_ids
     *
     * @return int[]
     */
    public function getClassScheduleIds()
    {
        return $this->container['class_schedule_ids'];
    }

    /**
     * Sets class_schedule_ids
     *
     * @param int[] $class_schedule_ids The requested class schedule IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassScheduleIds**
     *
     * @return $this
     */
    public function setClassScheduleIds($class_schedule_ids)
    {
        $this->container['class_schedule_ids'] = $class_schedule_ids;

        return $this;
    }

    /**
     * Gets client_ids
     *
     * @return string[]
     */
    public function getClientIds()
    {
        return $this->container['client_ids'];
    }

    /**
     * Sets client_ids
     *
     * @param string[] $client_ids The requested client IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClientIds**
     *
     * @return $this
     */
    public function setClientIds($client_ids)
    {
        $this->container['client_ids'] = $client_ids;

        return $this;
    }

    /**
     * Gets hide_past_entries
     *
     * @return bool
     */
    public function getHidePastEntries()
    {
        return $this->container['hide_past_entries'];
    }

    /**
     * Sets hide_past_entries
     *
     * @param bool $hide_past_entries When `true`, indicates that past waiting list entries are hidden from clients.<br />  When `false`, indicates that past entries are not hidden from clients.<br />  Default: **false**
     *
     * @return $this
     */
    public function setHidePastEntries($hide_past_entries)
    {
        $this->container['hide_past_entries'] = $hide_past_entries;

        return $this;
    }

    /**
     * Gets waitlist_entry_ids
     *
     * @return int[]
     */
    public function getWaitlistEntryIds()
    {
        return $this->container['waitlist_entry_ids'];
    }

    /**
     * Sets waitlist_entry_ids
     *
     * @param int[] $waitlist_entry_ids The requested waiting list entry IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all WaitlistEntryIds**
     *
     * @return $this
     */
    public function setWaitlistEntryIds($waitlist_entry_ids)
    {
        $this->container['waitlist_entry_ids'] = $waitlist_entry_ids;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit Number of results to include, defaults to 100
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int $offset Page offset, defaults to 0.
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


