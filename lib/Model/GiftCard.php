<?php
/**
 * GiftCard
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GiftCard Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GiftCard implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GiftCard';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'location_ids' => 'int[]',
        'description' => 'string',
        'editable_by_consumer' => 'bool',
        'card_value' => 'double',
        'sale_price' => 'double',
        'sold_online' => 'bool',
        'membership_restriction_ids' => 'int[]',
        'gift_card_terms' => 'string',
        'contact_info' => 'string',
        'display_logo' => 'bool',
        'layouts' => '\Swagger\Client\Model\GiftCardLayout[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'location_ids' => 'int32',
        'description' => null,
        'editable_by_consumer' => null,
        'card_value' => 'double',
        'sale_price' => 'double',
        'sold_online' => null,
        'membership_restriction_ids' => 'int32',
        'gift_card_terms' => null,
        'contact_info' => null,
        'display_logo' => null,
        'layouts' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'location_ids' => 'LocationIds',
        'description' => 'Description',
        'editable_by_consumer' => 'EditableByConsumer',
        'card_value' => 'CardValue',
        'sale_price' => 'SalePrice',
        'sold_online' => 'SoldOnline',
        'membership_restriction_ids' => 'MembershipRestrictionIds',
        'gift_card_terms' => 'GiftCardTerms',
        'contact_info' => 'ContactInfo',
        'display_logo' => 'DisplayLogo',
        'layouts' => 'Layouts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'location_ids' => 'setLocationIds',
        'description' => 'setDescription',
        'editable_by_consumer' => 'setEditableByConsumer',
        'card_value' => 'setCardValue',
        'sale_price' => 'setSalePrice',
        'sold_online' => 'setSoldOnline',
        'membership_restriction_ids' => 'setMembershipRestrictionIds',
        'gift_card_terms' => 'setGiftCardTerms',
        'contact_info' => 'setContactInfo',
        'display_logo' => 'setDisplayLogo',
        'layouts' => 'setLayouts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'location_ids' => 'getLocationIds',
        'description' => 'getDescription',
        'editable_by_consumer' => 'getEditableByConsumer',
        'card_value' => 'getCardValue',
        'sale_price' => 'getSalePrice',
        'sold_online' => 'getSoldOnline',
        'membership_restriction_ids' => 'getMembershipRestrictionIds',
        'gift_card_terms' => 'getGiftCardTerms',
        'contact_info' => 'getContactInfo',
        'display_logo' => 'getDisplayLogo',
        'layouts' => 'getLayouts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['location_ids'] = isset($data['location_ids']) ? $data['location_ids'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['editable_by_consumer'] = isset($data['editable_by_consumer']) ? $data['editable_by_consumer'] : null;
        $this->container['card_value'] = isset($data['card_value']) ? $data['card_value'] : null;
        $this->container['sale_price'] = isset($data['sale_price']) ? $data['sale_price'] : null;
        $this->container['sold_online'] = isset($data['sold_online']) ? $data['sold_online'] : null;
        $this->container['membership_restriction_ids'] = isset($data['membership_restriction_ids']) ? $data['membership_restriction_ids'] : null;
        $this->container['gift_card_terms'] = isset($data['gift_card_terms']) ? $data['gift_card_terms'] : null;
        $this->container['contact_info'] = isset($data['contact_info']) ? $data['contact_info'] : null;
        $this->container['display_logo'] = isset($data['display_logo']) ? $data['display_logo'] : null;
        $this->container['layouts'] = isset($data['layouts']) ? $data['layouts'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The gift card's `ProductID`.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets location_ids
     *
     * @return int[]
     */
    public function getLocationIds()
    {
        return $this->container['location_ids'];
    }

    /**
     * Sets location_ids
     *
     * @param int[] $location_ids The IDs of the locations where the gift card is sold.
     *
     * @return $this
     */
    public function setLocationIds($location_ids)
    {
        $this->container['location_ids'] = $location_ids;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the gift card.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets editable_by_consumer
     *
     * @return bool
     */
    public function getEditableByConsumer()
    {
        return $this->container['editable_by_consumer'];
    }

    /**
     * Sets editable_by_consumer
     *
     * @param bool $editable_by_consumer When `true`, indicates that the gift card can be edited by the client.
     *
     * @return $this
     */
    public function setEditableByConsumer($editable_by_consumer)
    {
        $this->container['editable_by_consumer'] = $editable_by_consumer;

        return $this;
    }

    /**
     * Gets card_value
     *
     * @return double
     */
    public function getCardValue()
    {
        return $this->container['card_value'];
    }

    /**
     * Sets card_value
     *
     * @param double $card_value The value of the gift card.
     *
     * @return $this
     */
    public function setCardValue($card_value)
    {
        $this->container['card_value'] = $card_value;

        return $this;
    }

    /**
     * Gets sale_price
     *
     * @return double
     */
    public function getSalePrice()
    {
        return $this->container['sale_price'];
    }

    /**
     * Sets sale_price
     *
     * @param double $sale_price The sale price of the gift card, if applicable.
     *
     * @return $this
     */
    public function setSalePrice($sale_price)
    {
        $this->container['sale_price'] = $sale_price;

        return $this;
    }

    /**
     * Gets sold_online
     *
     * @return bool
     */
    public function getSoldOnline()
    {
        return $this->container['sold_online'];
    }

    /**
     * Sets sold_online
     *
     * @param bool $sold_online When `true`, indicates that the gift card is sold online.
     *
     * @return $this
     */
    public function setSoldOnline($sold_online)
    {
        $this->container['sold_online'] = $sold_online;

        return $this;
    }

    /**
     * Gets membership_restriction_ids
     *
     * @return int[]
     */
    public function getMembershipRestrictionIds()
    {
        return $this->container['membership_restriction_ids'];
    }

    /**
     * Sets membership_restriction_ids
     *
     * @param int[] $membership_restriction_ids A list of IDs for membership restrictions, if this card is restricted to members with certain types of memberships.
     *
     * @return $this
     */
    public function setMembershipRestrictionIds($membership_restriction_ids)
    {
        $this->container['membership_restriction_ids'] = $membership_restriction_ids;

        return $this;
    }

    /**
     * Gets gift_card_terms
     *
     * @return string
     */
    public function getGiftCardTerms()
    {
        return $this->container['gift_card_terms'];
    }

    /**
     * Sets gift_card_terms
     *
     * @param string $gift_card_terms The terms of the gift card.
     *
     * @return $this
     */
    public function setGiftCardTerms($gift_card_terms)
    {
        $this->container['gift_card_terms'] = $gift_card_terms;

        return $this;
    }

    /**
     * Gets contact_info
     *
     * @return string
     */
    public function getContactInfo()
    {
        return $this->container['contact_info'];
    }

    /**
     * Sets contact_info
     *
     * @param string $contact_info Contact information for the gift card.
     *
     * @return $this
     */
    public function setContactInfo($contact_info)
    {
        $this->container['contact_info'] = $contact_info;

        return $this;
    }

    /**
     * Gets display_logo
     *
     * @return bool
     */
    public function getDisplayLogo()
    {
        return $this->container['display_logo'];
    }

    /**
     * Sets display_logo
     *
     * @param bool $display_logo When `true`, indicates that the logo should be displayed on the gift card.
     *
     * @return $this
     */
    public function setDisplayLogo($display_logo)
    {
        $this->container['display_logo'] = $display_logo;

        return $this;
    }

    /**
     * Gets layouts
     *
     * @return \Swagger\Client\Model\GiftCardLayout[]
     */
    public function getLayouts()
    {
        return $this->container['layouts'];
    }

    /**
     * Sets layouts
     *
     * @param \Swagger\Client\Model\GiftCardLayout[] $layouts A list of layouts available for the gift card.
     *
     * @return $this
     */
    public function setLayouts($layouts)
    {
        $this->container['layouts'] = $layouts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


