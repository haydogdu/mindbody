<?php
/**
 * Site
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Site Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Site implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Site';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'accepts_american_express' => 'bool',
        'accepts_discover' => 'bool',
        'accepts_master_card' => 'bool',
        'accepts_visa' => 'bool',
        'allows_dashboard_access' => 'bool',
        'contact_email' => 'string',
        'description' => 'string',
        'id' => 'int',
        'logo_url' => 'string',
        'name' => 'string',
        'page_color1' => 'string',
        'page_color2' => 'string',
        'page_color3' => 'string',
        'page_color4' => 'string',
        'pricing_level' => 'string',
        'sms_package_enabled' => 'bool',
        'tax_inclusive_prices' => 'bool',
        'currency_iso_code' => 'string',
        'country_code' => 'string',
        'time_zone' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'accepts_american_express' => null,
        'accepts_discover' => null,
        'accepts_master_card' => null,
        'accepts_visa' => null,
        'allows_dashboard_access' => null,
        'contact_email' => null,
        'description' => null,
        'id' => 'int32',
        'logo_url' => null,
        'name' => null,
        'page_color1' => null,
        'page_color2' => null,
        'page_color3' => null,
        'page_color4' => null,
        'pricing_level' => null,
        'sms_package_enabled' => null,
        'tax_inclusive_prices' => null,
        'currency_iso_code' => null,
        'country_code' => null,
        'time_zone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accepts_american_express' => 'AcceptsAmericanExpress',
        'accepts_discover' => 'AcceptsDiscover',
        'accepts_master_card' => 'AcceptsMasterCard',
        'accepts_visa' => 'AcceptsVisa',
        'allows_dashboard_access' => 'AllowsDashboardAccess',
        'contact_email' => 'ContactEmail',
        'description' => 'Description',
        'id' => 'Id',
        'logo_url' => 'LogoUrl',
        'name' => 'Name',
        'page_color1' => 'PageColor1',
        'page_color2' => 'PageColor2',
        'page_color3' => 'PageColor3',
        'page_color4' => 'PageColor4',
        'pricing_level' => 'PricingLevel',
        'sms_package_enabled' => 'SmsPackageEnabled',
        'tax_inclusive_prices' => 'TaxInclusivePrices',
        'currency_iso_code' => 'CurrencyIsoCode',
        'country_code' => 'CountryCode',
        'time_zone' => 'TimeZone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accepts_american_express' => 'setAcceptsAmericanExpress',
        'accepts_discover' => 'setAcceptsDiscover',
        'accepts_master_card' => 'setAcceptsMasterCard',
        'accepts_visa' => 'setAcceptsVisa',
        'allows_dashboard_access' => 'setAllowsDashboardAccess',
        'contact_email' => 'setContactEmail',
        'description' => 'setDescription',
        'id' => 'setId',
        'logo_url' => 'setLogoUrl',
        'name' => 'setName',
        'page_color1' => 'setPageColor1',
        'page_color2' => 'setPageColor2',
        'page_color3' => 'setPageColor3',
        'page_color4' => 'setPageColor4',
        'pricing_level' => 'setPricingLevel',
        'sms_package_enabled' => 'setSmsPackageEnabled',
        'tax_inclusive_prices' => 'setTaxInclusivePrices',
        'currency_iso_code' => 'setCurrencyIsoCode',
        'country_code' => 'setCountryCode',
        'time_zone' => 'setTimeZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accepts_american_express' => 'getAcceptsAmericanExpress',
        'accepts_discover' => 'getAcceptsDiscover',
        'accepts_master_card' => 'getAcceptsMasterCard',
        'accepts_visa' => 'getAcceptsVisa',
        'allows_dashboard_access' => 'getAllowsDashboardAccess',
        'contact_email' => 'getContactEmail',
        'description' => 'getDescription',
        'id' => 'getId',
        'logo_url' => 'getLogoUrl',
        'name' => 'getName',
        'page_color1' => 'getPageColor1',
        'page_color2' => 'getPageColor2',
        'page_color3' => 'getPageColor3',
        'page_color4' => 'getPageColor4',
        'pricing_level' => 'getPricingLevel',
        'sms_package_enabled' => 'getSmsPackageEnabled',
        'tax_inclusive_prices' => 'getTaxInclusivePrices',
        'currency_iso_code' => 'getCurrencyIsoCode',
        'country_code' => 'getCountryCode',
        'time_zone' => 'getTimeZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['accepts_american_express'] = isset($data['accepts_american_express']) ? $data['accepts_american_express'] : null;
        $this->container['accepts_discover'] = isset($data['accepts_discover']) ? $data['accepts_discover'] : null;
        $this->container['accepts_master_card'] = isset($data['accepts_master_card']) ? $data['accepts_master_card'] : null;
        $this->container['accepts_visa'] = isset($data['accepts_visa']) ? $data['accepts_visa'] : null;
        $this->container['allows_dashboard_access'] = isset($data['allows_dashboard_access']) ? $data['allows_dashboard_access'] : null;
        $this->container['contact_email'] = isset($data['contact_email']) ? $data['contact_email'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['logo_url'] = isset($data['logo_url']) ? $data['logo_url'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['page_color1'] = isset($data['page_color1']) ? $data['page_color1'] : null;
        $this->container['page_color2'] = isset($data['page_color2']) ? $data['page_color2'] : null;
        $this->container['page_color3'] = isset($data['page_color3']) ? $data['page_color3'] : null;
        $this->container['page_color4'] = isset($data['page_color4']) ? $data['page_color4'] : null;
        $this->container['pricing_level'] = isset($data['pricing_level']) ? $data['pricing_level'] : null;
        $this->container['sms_package_enabled'] = isset($data['sms_package_enabled']) ? $data['sms_package_enabled'] : null;
        $this->container['tax_inclusive_prices'] = isset($data['tax_inclusive_prices']) ? $data['tax_inclusive_prices'] : null;
        $this->container['currency_iso_code'] = isset($data['currency_iso_code']) ? $data['currency_iso_code'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accepts_american_express
     *
     * @return bool
     */
    public function getAcceptsAmericanExpress()
    {
        return $this->container['accepts_american_express'];
    }

    /**
     * Sets accepts_american_express
     *
     * @param bool $accepts_american_express When `true`, indicates that this site accepts American Express cards.<br />  When `false`, indicates that this site does not accept American Express credit cards.
     *
     * @return $this
     */
    public function setAcceptsAmericanExpress($accepts_american_express)
    {
        $this->container['accepts_american_express'] = $accepts_american_express;

        return $this;
    }

    /**
     * Gets accepts_discover
     *
     * @return bool
     */
    public function getAcceptsDiscover()
    {
        return $this->container['accepts_discover'];
    }

    /**
     * Sets accepts_discover
     *
     * @param bool $accepts_discover When `true`, indicates that this site accepts Discover cards.<br />  When `false`, indicates that this site does not accept Discover credit cards.
     *
     * @return $this
     */
    public function setAcceptsDiscover($accepts_discover)
    {
        $this->container['accepts_discover'] = $accepts_discover;

        return $this;
    }

    /**
     * Gets accepts_master_card
     *
     * @return bool
     */
    public function getAcceptsMasterCard()
    {
        return $this->container['accepts_master_card'];
    }

    /**
     * Sets accepts_master_card
     *
     * @param bool $accepts_master_card When `true`, indicates that this site accepts MasterCard cards.<br />  When `false`, indicates that this site does not accept MasterCard credit cards.
     *
     * @return $this
     */
    public function setAcceptsMasterCard($accepts_master_card)
    {
        $this->container['accepts_master_card'] = $accepts_master_card;

        return $this;
    }

    /**
     * Gets accepts_visa
     *
     * @return bool
     */
    public function getAcceptsVisa()
    {
        return $this->container['accepts_visa'];
    }

    /**
     * Sets accepts_visa
     *
     * @param bool $accepts_visa When `true`, indicates that this site accepts Visa cards.<br />  When `false`, indicates that this site does not accept Visa credit cards.
     *
     * @return $this
     */
    public function setAcceptsVisa($accepts_visa)
    {
        $this->container['accepts_visa'] = $accepts_visa;

        return $this;
    }

    /**
     * Gets allows_dashboard_access
     *
     * @return bool
     */
    public function getAllowsDashboardAccess()
    {
        return $this->container['allows_dashboard_access'];
    }

    /**
     * Sets allows_dashboard_access
     *
     * @param bool $allows_dashboard_access When `true`, indicates that this site allows access to its dashboard.<br />  When `false`, indicates that this site does not allow access to its dashboard.
     *
     * @return $this
     */
    public function setAllowsDashboardAccess($allows_dashboard_access)
    {
        $this->container['allows_dashboard_access'] = $allows_dashboard_access;

        return $this;
    }

    /**
     * Gets contact_email
     *
     * @return string
     */
    public function getContactEmail()
    {
        return $this->container['contact_email'];
    }

    /**
     * Sets contact_email
     *
     * @param string $contact_email The site’s email address.
     *
     * @return $this
     */
    public function setContactEmail($contact_email)
    {
        $this->container['contact_email'] = $contact_email;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description A description of the site.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The site ID.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url The URL to the site’s logo.
     *
     * @return $this
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the site.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets page_color1
     *
     * @return string
     */
    public function getPageColor1()
    {
        return $this->container['page_color1'];
    }

    /**
     * Sets page_color1
     *
     * @param string $page_color1 A hex code for a color the business owner uses in marketing. This color can be used to set a theme for an integration so that it matches the configured color-scheme for the business.
     *
     * @return $this
     */
    public function setPageColor1($page_color1)
    {
        $this->container['page_color1'] = $page_color1;

        return $this;
    }

    /**
     * Gets page_color2
     *
     * @return string
     */
    public function getPageColor2()
    {
        return $this->container['page_color2'];
    }

    /**
     * Sets page_color2
     *
     * @param string $page_color2 The hex code for a second color, to be used in the same manner as `pageColor1`.
     *
     * @return $this
     */
    public function setPageColor2($page_color2)
    {
        $this->container['page_color2'] = $page_color2;

        return $this;
    }

    /**
     * Gets page_color3
     *
     * @return string
     */
    public function getPageColor3()
    {
        return $this->container['page_color3'];
    }

    /**
     * Sets page_color3
     *
     * @param string $page_color3 The hex code for a third color, to be used in the same manner as `pageColor1`.
     *
     * @return $this
     */
    public function setPageColor3($page_color3)
    {
        $this->container['page_color3'] = $page_color3;

        return $this;
    }

    /**
     * Gets page_color4
     *
     * @return string
     */
    public function getPageColor4()
    {
        return $this->container['page_color4'];
    }

    /**
     * Sets page_color4
     *
     * @param string $page_color4 The hex code for a fourth color, to be used in the same manner as `pageColor1`.
     *
     * @return $this
     */
    public function setPageColor4($page_color4)
    {
        $this->container['page_color4'] = $page_color4;

        return $this;
    }

    /**
     * Gets pricing_level
     *
     * @return string
     */
    public function getPricingLevel()
    {
        return $this->container['pricing_level'];
    }

    /**
     * Sets pricing_level
     *
     * @param string $pricing_level The MINDBODY pricing level for the business. Possible values are:  Accelerate - The business is on MINDBODY’s Accelerate pricing tier.  Grow - The business is on MINDBODY’s Essential pricing tier.  Legacy - The business is on an older MINDBODY pricing tier that is no longer offered.  Listing - The business is on an older MINDBODY pricing tier that is no longer offered.  Pro - The business is on an older MINDBODY pricing tier that is no longer offered.  Solo - The business is on an older MINDBODY pricing tier that is no longer offered.  Ultimate - The business is on MINDBODY’s Ultimate pricing tier.
     *
     * @return $this
     */
    public function setPricingLevel($pricing_level)
    {
        $this->container['pricing_level'] = $pricing_level;

        return $this;
    }

    /**
     * Gets sms_package_enabled
     *
     * @return bool
     */
    public function getSmsPackageEnabled()
    {
        return $this->container['sms_package_enabled'];
    }

    /**
     * Sets sms_package_enabled
     *
     * @param bool $sms_package_enabled When `true`, indicates that the business uses SMS text messages to communicate with its clients.<br />  When `false`, indicates that the business does not use SMS text messages to communicate with its clients.
     *
     * @return $this
     */
    public function setSmsPackageEnabled($sms_package_enabled)
    {
        $this->container['sms_package_enabled'] = $sms_package_enabled;

        return $this;
    }

    /**
     * Gets tax_inclusive_prices
     *
     * @return bool
     */
    public function getTaxInclusivePrices()
    {
        return $this->container['tax_inclusive_prices'];
    }

    /**
     * Sets tax_inclusive_prices
     *
     * @param bool $tax_inclusive_prices When `true`, indicates that the total includes tax.<br />  When `false`, indicates that the total does not include tax.
     *
     * @return $this
     */
    public function setTaxInclusivePrices($tax_inclusive_prices)
    {
        $this->container['tax_inclusive_prices'] = $tax_inclusive_prices;

        return $this;
    }

    /**
     * Gets currency_iso_code
     *
     * @return string
     */
    public function getCurrencyIsoCode()
    {
        return $this->container['currency_iso_code'];
    }

    /**
     * Sets currency_iso_code
     *
     * @param string $currency_iso_code The currency ISO code for the site.
     *
     * @return $this
     */
    public function setCurrencyIsoCode($currency_iso_code)
    {
        $this->container['currency_iso_code'] = $currency_iso_code;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The country code for the site.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone The time zone the site is located in.
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


