<?php
/**
 * GetClassDescriptionsRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * GetClassDescriptionsRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GetClassDescriptionsRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'GetClassDescriptionsRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'class_description_id' => 'int',
        'program_ids' => 'int[]',
        'start_class_date_time' => '\DateTime',
        'end_class_date_time' => '\DateTime',
        'staff_id' => 'int',
        'location_id' => 'int',
        'limit' => 'int',
        'offset' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'class_description_id' => 'int32',
        'program_ids' => 'int32',
        'start_class_date_time' => 'date-time',
        'end_class_date_time' => 'date-time',
        'staff_id' => 'int64',
        'location_id' => 'int32',
        'limit' => 'int32',
        'offset' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'class_description_id' => 'ClassDescriptionId',
        'program_ids' => 'ProgramIds',
        'start_class_date_time' => 'StartClassDateTime',
        'end_class_date_time' => 'EndClassDateTime',
        'staff_id' => 'StaffId',
        'location_id' => 'LocationId',
        'limit' => 'Limit',
        'offset' => 'Offset'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'class_description_id' => 'setClassDescriptionId',
        'program_ids' => 'setProgramIds',
        'start_class_date_time' => 'setStartClassDateTime',
        'end_class_date_time' => 'setEndClassDateTime',
        'staff_id' => 'setStaffId',
        'location_id' => 'setLocationId',
        'limit' => 'setLimit',
        'offset' => 'setOffset'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'class_description_id' => 'getClassDescriptionId',
        'program_ids' => 'getProgramIds',
        'start_class_date_time' => 'getStartClassDateTime',
        'end_class_date_time' => 'getEndClassDateTime',
        'staff_id' => 'getStaffId',
        'location_id' => 'getLocationId',
        'limit' => 'getLimit',
        'offset' => 'getOffset'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['class_description_id'] = isset($data['class_description_id']) ? $data['class_description_id'] : null;
        $this->container['program_ids'] = isset($data['program_ids']) ? $data['program_ids'] : null;
        $this->container['start_class_date_time'] = isset($data['start_class_date_time']) ? $data['start_class_date_time'] : null;
        $this->container['end_class_date_time'] = isset($data['end_class_date_time']) ? $data['end_class_date_time'] : null;
        $this->container['staff_id'] = isset($data['staff_id']) ? $data['staff_id'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['limit'] = isset($data['limit']) ? $data['limit'] : null;
        $this->container['offset'] = isset($data['offset']) ? $data['offset'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets class_description_id
     *
     * @return int
     */
    public function getClassDescriptionId()
    {
        return $this->container['class_description_id'];
    }

    /**
     * Sets class_description_id
     *
     * @param int $class_description_id Filters to the single result with the given ID.
     *
     * @return $this
     */
    public function setClassDescriptionId($class_description_id)
    {
        $this->container['class_description_id'] = $class_description_id;

        return $this;
    }

    /**
     * Gets program_ids
     *
     * @return int[]
     */
    public function getProgramIds()
    {
        return $this->container['program_ids'];
    }

    /**
     * Sets program_ids
     *
     * @param int[] $program_ids Filters results to class descriptions belonging to the given programs.
     *
     * @return $this
     */
    public function setProgramIds($program_ids)
    {
        $this->container['program_ids'] = $program_ids;

        return $this;
    }

    /**
     * Gets start_class_date_time
     *
     * @return \DateTime
     */
    public function getStartClassDateTime()
    {
        return $this->container['start_class_date_time'];
    }

    /**
     * Sets start_class_date_time
     *
     * @param \DateTime $start_class_date_time Filters the results to class descriptions for scheduled classes that happen on or after the given date and time.
     *
     * @return $this
     */
    public function setStartClassDateTime($start_class_date_time)
    {
        $this->container['start_class_date_time'] = $start_class_date_time;

        return $this;
    }

    /**
     * Gets end_class_date_time
     *
     * @return \DateTime
     */
    public function getEndClassDateTime()
    {
        return $this->container['end_class_date_time'];
    }

    /**
     * Sets end_class_date_time
     *
     * @param \DateTime $end_class_date_time Filters the results to class descriptions for scheduled classes that happen before the given date and time.
     *
     * @return $this
     */
    public function setEndClassDateTime($end_class_date_time)
    {
        $this->container['end_class_date_time'] = $end_class_date_time;

        return $this;
    }

    /**
     * Gets staff_id
     *
     * @return int
     */
    public function getStaffId()
    {
        return $this->container['staff_id'];
    }

    /**
     * Sets staff_id
     *
     * @param int $staff_id Filters results to class descriptions for scheduled classes taught by the given staff member.
     *
     * @return $this
     */
    public function setStaffId($staff_id)
    {
        $this->container['staff_id'] = $staff_id;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id Filters results to classes descriptions for schedule classes as the given location.
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets limit
     *
     * @return int
     */
    public function getLimit()
    {
        return $this->container['limit'];
    }

    /**
     * Sets limit
     *
     * @param int $limit Number of results to include, defaults to 100
     *
     * @return $this
     */
    public function setLimit($limit)
    {
        $this->container['limit'] = $limit;

        return $this;
    }

    /**
     * Gets offset
     *
     * @return int
     */
    public function getOffset()
    {
        return $this->container['offset'];
    }

    /**
     * Sets offset
     *
     * @param int $offset Page offset, defaults to 0.
     *
     * @return $this
     */
    public function setOffset($offset)
    {
        $this->container['offset'] = $offset;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


