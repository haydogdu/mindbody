<?php
/**
 * Availability
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Availability Class Doc Comment
 *
 * @category Class
 * @description A staff availability entry
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Availability implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Availability';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'staff' => '\Swagger\Client\Model\Staff',
        'session_type' => '\Swagger\Client\Model\SessionType',
        'programs' => '\Swagger\Client\Model\Program[]',
        'start_date_time' => '\DateTime',
        'end_date_time' => '\DateTime',
        'bookable_end_date_time' => '\DateTime',
        'location' => '\Swagger\Client\Model\Location'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'staff' => null,
        'session_type' => null,
        'programs' => null,
        'start_date_time' => 'date-time',
        'end_date_time' => 'date-time',
        'bookable_end_date_time' => 'date-time',
        'location' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'staff' => 'Staff',
        'session_type' => 'SessionType',
        'programs' => 'Programs',
        'start_date_time' => 'StartDateTime',
        'end_date_time' => 'EndDateTime',
        'bookable_end_date_time' => 'BookableEndDateTime',
        'location' => 'Location'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'staff' => 'setStaff',
        'session_type' => 'setSessionType',
        'programs' => 'setPrograms',
        'start_date_time' => 'setStartDateTime',
        'end_date_time' => 'setEndDateTime',
        'bookable_end_date_time' => 'setBookableEndDateTime',
        'location' => 'setLocation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'staff' => 'getStaff',
        'session_type' => 'getSessionType',
        'programs' => 'getPrograms',
        'start_date_time' => 'getStartDateTime',
        'end_date_time' => 'getEndDateTime',
        'bookable_end_date_time' => 'getBookableEndDateTime',
        'location' => 'getLocation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['staff'] = isset($data['staff']) ? $data['staff'] : null;
        $this->container['session_type'] = isset($data['session_type']) ? $data['session_type'] : null;
        $this->container['programs'] = isset($data['programs']) ? $data['programs'] : null;
        $this->container['start_date_time'] = isset($data['start_date_time']) ? $data['start_date_time'] : null;
        $this->container['end_date_time'] = isset($data['end_date_time']) ? $data['end_date_time'] : null;
        $this->container['bookable_end_date_time'] = isset($data['bookable_end_date_time']) ? $data['bookable_end_date_time'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the availability.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets staff
     *
     * @return \Swagger\Client\Model\Staff
     */
    public function getStaff()
    {
        return $this->container['staff'];
    }

    /**
     * Sets staff
     *
     * @param \Swagger\Client\Model\Staff $staff Contains information about staff members.
     *
     * @return $this
     */
    public function setStaff($staff)
    {
        $this->container['staff'] = $staff;

        return $this;
    }

    /**
     * Gets session_type
     *
     * @return \Swagger\Client\Model\SessionType
     */
    public function getSessionType()
    {
        return $this->container['session_type'];
    }

    /**
     * Sets session_type
     *
     * @param \Swagger\Client\Model\SessionType $session_type Contains information about the types of sessions.
     *
     * @return $this
     */
    public function setSessionType($session_type)
    {
        $this->container['session_type'] = $session_type;

        return $this;
    }

    /**
     * Gets programs
     *
     * @return \Swagger\Client\Model\Program[]
     */
    public function getPrograms()
    {
        return $this->container['programs'];
    }

    /**
     * Sets programs
     *
     * @param \Swagger\Client\Model\Program[] $programs Contains information about the programs.
     *
     * @return $this
     */
    public function setPrograms($programs)
    {
        $this->container['programs'] = $programs;

        return $this;
    }

    /**
     * Gets start_date_time
     *
     * @return \DateTime
     */
    public function getStartDateTime()
    {
        return $this->container['start_date_time'];
    }

    /**
     * Sets start_date_time
     *
     * @param \DateTime $start_date_time The date and time the availability starts.
     *
     * @return $this
     */
    public function setStartDateTime($start_date_time)
    {
        $this->container['start_date_time'] = $start_date_time;

        return $this;
    }

    /**
     * Gets end_date_time
     *
     * @return \DateTime
     */
    public function getEndDateTime()
    {
        return $this->container['end_date_time'];
    }

    /**
     * Sets end_date_time
     *
     * @param \DateTime $end_date_time The date and time the availability ends.
     *
     * @return $this
     */
    public function setEndDateTime($end_date_time)
    {
        $this->container['end_date_time'] = $end_date_time;

        return $this;
    }

    /**
     * Gets bookable_end_date_time
     *
     * @return \DateTime
     */
    public function getBookableEndDateTime()
    {
        return $this->container['bookable_end_date_time'];
    }

    /**
     * Sets bookable_end_date_time
     *
     * @param \DateTime $bookable_end_date_time The time of day that the last appointment can start.
     *
     * @return $this
     */
    public function setBookableEndDateTime($bookable_end_date_time)
    {
        $this->container['bookable_end_date_time'] = $bookable_end_date_time;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\Location
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\Location $location Contains information about the location.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


