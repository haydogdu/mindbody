<?php
/**
 * PurchaseGiftCardRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * PurchaseGiftCardRequest Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PurchaseGiftCardRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PurchaseGiftCardRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'test' => 'bool',
        'location_id' => 'int',
        'layout_id' => 'int',
        'purchaser_client_id' => 'string',
        'gift_card_id' => 'int',
        'send_email_receipt' => 'bool',
        'recipient_email' => 'string',
        'recipient_name' => 'string',
        'title' => 'string',
        'gift_message' => 'string',
        'delivery_date' => '\DateTime',
        'payment_info' => '\Swagger\Client\Model\CheckoutPaymentInfo'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'test' => null,
        'location_id' => 'int32',
        'layout_id' => 'int32',
        'purchaser_client_id' => null,
        'gift_card_id' => 'int32',
        'send_email_receipt' => null,
        'recipient_email' => null,
        'recipient_name' => null,
        'title' => null,
        'gift_message' => null,
        'delivery_date' => 'date-time',
        'payment_info' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'test' => 'Test',
        'location_id' => 'LocationId',
        'layout_id' => 'LayoutId',
        'purchaser_client_id' => 'PurchaserClientId',
        'gift_card_id' => 'GiftCardId',
        'send_email_receipt' => 'SendEmailReceipt',
        'recipient_email' => 'RecipientEmail',
        'recipient_name' => 'RecipientName',
        'title' => 'Title',
        'gift_message' => 'GiftMessage',
        'delivery_date' => 'DeliveryDate',
        'payment_info' => 'PaymentInfo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'test' => 'setTest',
        'location_id' => 'setLocationId',
        'layout_id' => 'setLayoutId',
        'purchaser_client_id' => 'setPurchaserClientId',
        'gift_card_id' => 'setGiftCardId',
        'send_email_receipt' => 'setSendEmailReceipt',
        'recipient_email' => 'setRecipientEmail',
        'recipient_name' => 'setRecipientName',
        'title' => 'setTitle',
        'gift_message' => 'setGiftMessage',
        'delivery_date' => 'setDeliveryDate',
        'payment_info' => 'setPaymentInfo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'test' => 'getTest',
        'location_id' => 'getLocationId',
        'layout_id' => 'getLayoutId',
        'purchaser_client_id' => 'getPurchaserClientId',
        'gift_card_id' => 'getGiftCardId',
        'send_email_receipt' => 'getSendEmailReceipt',
        'recipient_email' => 'getRecipientEmail',
        'recipient_name' => 'getRecipientName',
        'title' => 'getTitle',
        'gift_message' => 'getGiftMessage',
        'delivery_date' => 'getDeliveryDate',
        'payment_info' => 'getPaymentInfo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['test'] = isset($data['test']) ? $data['test'] : null;
        $this->container['location_id'] = isset($data['location_id']) ? $data['location_id'] : null;
        $this->container['layout_id'] = isset($data['layout_id']) ? $data['layout_id'] : null;
        $this->container['purchaser_client_id'] = isset($data['purchaser_client_id']) ? $data['purchaser_client_id'] : null;
        $this->container['gift_card_id'] = isset($data['gift_card_id']) ? $data['gift_card_id'] : null;
        $this->container['send_email_receipt'] = isset($data['send_email_receipt']) ? $data['send_email_receipt'] : null;
        $this->container['recipient_email'] = isset($data['recipient_email']) ? $data['recipient_email'] : null;
        $this->container['recipient_name'] = isset($data['recipient_name']) ? $data['recipient_name'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['gift_message'] = isset($data['gift_message']) ? $data['gift_message'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['payment_info'] = isset($data['payment_info']) ? $data['payment_info'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['location_id'] === null) {
            $invalidProperties[] = "'location_id' can't be null";
        }
        if ($this->container['purchaser_client_id'] === null) {
            $invalidProperties[] = "'purchaser_client_id' can't be null";
        }
        if ($this->container['gift_card_id'] === null) {
            $invalidProperties[] = "'gift_card_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets test
     *
     * @return bool
     */
    public function getTest()
    {
        return $this->container['test'];
    }

    /**
     * Sets test
     *
     * @param bool $test When `true`, allows you to test the request without affecting the database.<br />  When `false`, the request is carried out and the database is affected.
     *
     * @return $this
     */
    public function setTest($test)
    {
        $this->container['test'] = $test;

        return $this;
    }

    /**
     * Gets location_id
     *
     * @return int
     */
    public function getLocationId()
    {
        return $this->container['location_id'];
    }

    /**
     * Sets location_id
     *
     * @param int $location_id The ID of the location where the gift card is being sold.
     *
     * @return $this
     */
    public function setLocationId($location_id)
    {
        $this->container['location_id'] = $location_id;

        return $this;
    }

    /**
     * Gets layout_id
     *
     * @return int
     */
    public function getLayoutId()
    {
        return $this->container['layout_id'];
    }

    /**
     * Sets layout_id
     *
     * @param int $layout_id The ID of the layout used for the gift cardâ€™s image.
     *
     * @return $this
     */
    public function setLayoutId($layout_id)
    {
        $this->container['layout_id'] = $layout_id;

        return $this;
    }

    /**
     * Gets purchaser_client_id
     *
     * @return string
     */
    public function getPurchaserClientId()
    {
        return $this->container['purchaser_client_id'];
    }

    /**
     * Sets purchaser_client_id
     *
     * @param string $purchaser_client_id The RSSID of the client who is purchasing the gift card.
     *
     * @return $this
     */
    public function setPurchaserClientId($purchaser_client_id)
    {
        $this->container['purchaser_client_id'] = $purchaser_client_id;

        return $this;
    }

    /**
     * Gets gift_card_id
     *
     * @return int
     */
    public function getGiftCardId()
    {
        return $this->container['gift_card_id'];
    }

    /**
     * Sets gift_card_id
     *
     * @param int $gift_card_id The product ID of the gift card being purchased.
     *
     * @return $this
     */
    public function setGiftCardId($gift_card_id)
    {
        $this->container['gift_card_id'] = $gift_card_id;

        return $this;
    }

    /**
     * Gets send_email_receipt
     *
     * @return bool
     */
    public function getSendEmailReceipt()
    {
        return $this->container['send_email_receipt'];
    }

    /**
     * Sets send_email_receipt
     *
     * @param bool $send_email_receipt When `true`, indicates that a purchase receipt email should be sent to the purchasing client, if all settings are correctly configured.<br />  When `false`, no email is sent to the purchaser.
     *
     * @return $this
     */
    public function setSendEmailReceipt($send_email_receipt)
    {
        $this->container['send_email_receipt'] = $send_email_receipt;

        return $this;
    }

    /**
     * Gets recipient_email
     *
     * @return string
     */
    public function getRecipientEmail()
    {
        return $this->container['recipient_email'];
    }

    /**
     * Sets recipient_email
     *
     * @param string $recipient_email The email address to send the gift card image to. This parameter is required if the `LayoutId` is not 0.<br />  Maximum length: **100**
     *
     * @return $this
     */
    public function setRecipientEmail($recipient_email)
    {
        $this->container['recipient_email'] = $recipient_email;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string $recipient_name The name of the person who is to receive the gift card. This parameter is required if the `LayoutId` is not 0.<br />  Maximum length: **20**
     *
     * @return $this
     */
    public function setRecipientName($recipient_name)
    {
        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The text to use as the title of the gift card, for example: Happy Birthday, Maria! This parameter is required if the `LayoutId` is not 0.<br />  Maximum length: **20**
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets gift_message
     *
     * @return string
     */
    public function getGiftMessage()
    {
        return $this->container['gift_message'];
    }

    /**
     * Sets gift_message
     *
     * @param string $gift_message A personal message to include in the gift card.<br />  Maximum length: **300**
     *
     * @return $this
     */
    public function setGiftMessage($gift_message)
    {
        $this->container['gift_message'] = $gift_message;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime $delivery_date The date that the gift cardâ€™s image is to be delivered to the recipient. This parameter cannot be set to a date in the past. This parameter is required if the `LayoutId` is not 0.  Default: **today**  Minimum: **today**
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets payment_info
     *
     * @return \Swagger\Client\Model\CheckoutPaymentInfo
     */
    public function getPaymentInfo()
    {
        return $this->container['payment_info'];
    }

    /**
     * Sets payment_info
     *
     * @param \Swagger\Client\Model\CheckoutPaymentInfo $payment_info Contains information about the payment.
     *
     * @return $this
     */
    public function setPaymentInfo($payment_info)
    {
        $this->container['payment_info'] = $payment_info;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


