<?php
/**
 * AppointmentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AppointmentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AppointmentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation appointmentAddApppointment
     *
     * Book a new appointment.
     *
     * @param  \Swagger\Client\Model\AddAppointmentRequest $request request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\AddAppointmentResponse
     */
    public function appointmentAddApppointment($request, $site_id, $version, $authorization = '')
    {
        list($response) = $this->appointmentAddApppointmentWithHttpInfo($request, $site_id, $version, $authorization);
        return $response;
    }

    /**
     * Operation appointmentAddApppointmentWithHttpInfo
     *
     * Book a new appointment.
     *
     * @param  \Swagger\Client\Model\AddAppointmentRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\AddAppointmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentAddApppointmentWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\AddAppointmentResponse';
        $request = $this->appointmentAddApppointmentRequest($request, $site_id, $version, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\AddAppointmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentAddApppointmentAsync
     *
     * Book a new appointment.
     *
     * @param  \Swagger\Client\Model\AddAppointmentRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentAddApppointmentAsync($request, $site_id, $version, $authorization = '')
    {
        return $this->appointmentAddApppointmentAsyncWithHttpInfo($request, $site_id, $version, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentAddApppointmentAsyncWithHttpInfo
     *
     * Book a new appointment.
     *
     * @param  \Swagger\Client\Model\AddAppointmentRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentAddApppointmentAsyncWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\AddAppointmentResponse';
        $request = $this->appointmentAddApppointmentRequest($request, $site_id, $version, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentAddApppointment'
     *
     * @param  \Swagger\Client\Model\AddAppointmentRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentAddApppointmentRequest($request, $site_id, $version, $authorization = '')
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling appointmentAddApppointment'
            );
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling appointmentAddApppointment'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling appointmentAddApppointment'
            );
        }

        $resourcePath = '/public/v{version}/appointment/addappointment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentGetActiveSessionTimes
     *
     * Get active session times.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_time Filters results to times that end on or before this time on the current date. Any date provided is ignored..  &lt;br /&gt;Default: **23:59:59** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string $request_schedule_type Filters on the provided the schedule type. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  int[] $request_session_type_ids Filters on the provided session type IDs. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  \DateTime $request_start_time Filters results to times that start on or after this time on the current date. Any date provided is ignored.  &lt;br /&gt;Default: **00:00:00** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetActiveSessionTimesResponse
     */
    public function appointmentGetActiveSessionTimes($site_id, $version, $authorization = '', $request_end_time = null, $request_limit = null, $request_offset = null, $request_schedule_type = null, $request_session_type_ids = null, $request_start_time = null)
    {
        list($response) = $this->appointmentGetActiveSessionTimesWithHttpInfo($site_id, $version, $authorization, $request_end_time, $request_limit, $request_offset, $request_schedule_type, $request_session_type_ids, $request_start_time);
        return $response;
    }

    /**
     * Operation appointmentGetActiveSessionTimesWithHttpInfo
     *
     * Get active session times.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_time Filters results to times that end on or before this time on the current date. Any date provided is ignored..  &lt;br /&gt;Default: **23:59:59** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string $request_schedule_type Filters on the provided the schedule type. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  int[] $request_session_type_ids Filters on the provided session type IDs. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  \DateTime $request_start_time Filters results to times that start on or after this time on the current date. Any date provided is ignored.  &lt;br /&gt;Default: **00:00:00** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetActiveSessionTimesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentGetActiveSessionTimesWithHttpInfo($site_id, $version, $authorization = '', $request_end_time = null, $request_limit = null, $request_offset = null, $request_schedule_type = null, $request_session_type_ids = null, $request_start_time = null)
    {
        $returnType = '\Swagger\Client\Model\GetActiveSessionTimesResponse';
        $request = $this->appointmentGetActiveSessionTimesRequest($site_id, $version, $authorization, $request_end_time, $request_limit, $request_offset, $request_schedule_type, $request_session_type_ids, $request_start_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetActiveSessionTimesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentGetActiveSessionTimesAsync
     *
     * Get active session times.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_time Filters results to times that end on or before this time on the current date. Any date provided is ignored..  &lt;br /&gt;Default: **23:59:59** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string $request_schedule_type Filters on the provided the schedule type. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  int[] $request_session_type_ids Filters on the provided session type IDs. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  \DateTime $request_start_time Filters results to times that start on or after this time on the current date. Any date provided is ignored.  &lt;br /&gt;Default: **00:00:00** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetActiveSessionTimesAsync($site_id, $version, $authorization = '', $request_end_time = null, $request_limit = null, $request_offset = null, $request_schedule_type = null, $request_session_type_ids = null, $request_start_time = null)
    {
        return $this->appointmentGetActiveSessionTimesAsyncWithHttpInfo($site_id, $version, $authorization, $request_end_time, $request_limit, $request_offset, $request_schedule_type, $request_session_type_ids, $request_start_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentGetActiveSessionTimesAsyncWithHttpInfo
     *
     * Get active session times.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_time Filters results to times that end on or before this time on the current date. Any date provided is ignored..  &lt;br /&gt;Default: **23:59:59** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string $request_schedule_type Filters on the provided the schedule type. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  int[] $request_session_type_ids Filters on the provided session type IDs. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  \DateTime $request_start_time Filters results to times that start on or after this time on the current date. Any date provided is ignored.  &lt;br /&gt;Default: **00:00:00** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetActiveSessionTimesAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_end_time = null, $request_limit = null, $request_offset = null, $request_schedule_type = null, $request_session_type_ids = null, $request_start_time = null)
    {
        $returnType = '\Swagger\Client\Model\GetActiveSessionTimesResponse';
        $request = $this->appointmentGetActiveSessionTimesRequest($site_id, $version, $authorization, $request_end_time, $request_limit, $request_offset, $request_schedule_type, $request_session_type_ids, $request_start_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentGetActiveSessionTimes'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_time Filters results to times that end on or before this time on the current date. Any date provided is ignored..  &lt;br /&gt;Default: **23:59:59** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string $request_schedule_type Filters on the provided the schedule type. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  int[] $request_session_type_ids Filters on the provided session type IDs. Either &#x60;SessionTypeIds&#x60; or &#x60;ScheduleType&#x60; must be provided. (optional)
     * @param  \DateTime $request_start_time Filters results to times that start on or after this time on the current date. Any date provided is ignored.  &lt;br /&gt;Default: **00:00:00** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentGetActiveSessionTimesRequest($site_id, $version, $authorization = '', $request_end_time = null, $request_limit = null, $request_offset = null, $request_schedule_type = null, $request_session_type_ids = null, $request_start_time = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling appointmentGetActiveSessionTimes'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling appointmentGetActiveSessionTimes'
            );
        }

        $resourcePath = '/public/v{version}/appointment/activesessiontimes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_end_time !== null) {
            $queryParams['request.endTime'] = ObjectSerializer::toQueryValue($request_end_time);
        }
        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if ($request_schedule_type !== null) {
            $queryParams['request.scheduleType'] = ObjectSerializer::toQueryValue($request_schedule_type);
        }
        // query params
        if (is_array($request_session_type_ids)) {
            $request_session_type_ids = ObjectSerializer::serializeCollection($request_session_type_ids, 'multi', true);
        }
        if ($request_session_type_ids !== null) {
            $queryParams['request.sessionTypeIds'] = ObjectSerializer::toQueryValue($request_session_type_ids);
        }
        // query params
        if ($request_start_time !== null) {
            $queryParams['request.startTime'] = ObjectSerializer::toQueryValue($request_start_time);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentGetAppointmentOptions
     *
     * Get appointment-related settings.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetAppointmentOptionsResponse
     */
    public function appointmentGetAppointmentOptions($site_id, $version, $authorization = '')
    {
        list($response) = $this->appointmentGetAppointmentOptionsWithHttpInfo($site_id, $version, $authorization);
        return $response;
    }

    /**
     * Operation appointmentGetAppointmentOptionsWithHttpInfo
     *
     * Get appointment-related settings.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetAppointmentOptionsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentGetAppointmentOptionsWithHttpInfo($site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\GetAppointmentOptionsResponse';
        $request = $this->appointmentGetAppointmentOptionsRequest($site_id, $version, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetAppointmentOptionsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentGetAppointmentOptionsAsync
     *
     * Get appointment-related settings.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetAppointmentOptionsAsync($site_id, $version, $authorization = '')
    {
        return $this->appointmentGetAppointmentOptionsAsyncWithHttpInfo($site_id, $version, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentGetAppointmentOptionsAsyncWithHttpInfo
     *
     * Get appointment-related settings.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetAppointmentOptionsAsyncWithHttpInfo($site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\GetAppointmentOptionsResponse';
        $request = $this->appointmentGetAppointmentOptionsRequest($site_id, $version, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentGetAppointmentOptions'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentGetAppointmentOptionsRequest($site_id, $version, $authorization = '')
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling appointmentGetAppointmentOptions'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling appointmentGetAppointmentOptions'
            );
        }

        $resourcePath = '/public/v{version}/appointment/appointmentoptions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentGetBookableItems
     *
     * Get staff appointment availability.
     *
     * @param  int[] $request_session_type_ids A list of the requested session type IDs. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_appointment_id If provided, filters out the appointment with this ID. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  bool $request_ignore_default_session_length When &#x60;true&#x60;, availabilities that are non-default return, for example, a 30-minute availability with a 60-minute default session length.&lt;br /&gt;  When &#x60;false&#x60;, only availabilities that have the default session length return. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of the requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetBookableItemsResponse
     */
    public function appointmentGetBookableItems($request_session_type_ids, $site_id, $version, $authorization = '', $request_appointment_id = null, $request_end_date = null, $request_ignore_default_session_length = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        list($response) = $this->appointmentGetBookableItemsWithHttpInfo($request_session_type_ids, $site_id, $version, $authorization, $request_appointment_id, $request_end_date, $request_ignore_default_session_length, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date);
        return $response;
    }

    /**
     * Operation appointmentGetBookableItemsWithHttpInfo
     *
     * Get staff appointment availability.
     *
     * @param  int[] $request_session_type_ids A list of the requested session type IDs. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_appointment_id If provided, filters out the appointment with this ID. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  bool $request_ignore_default_session_length When &#x60;true&#x60;, availabilities that are non-default return, for example, a 30-minute availability with a 60-minute default session length.&lt;br /&gt;  When &#x60;false&#x60;, only availabilities that have the default session length return. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of the requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetBookableItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentGetBookableItemsWithHttpInfo($request_session_type_ids, $site_id, $version, $authorization = '', $request_appointment_id = null, $request_end_date = null, $request_ignore_default_session_length = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        $returnType = '\Swagger\Client\Model\GetBookableItemsResponse';
        $request = $this->appointmentGetBookableItemsRequest($request_session_type_ids, $site_id, $version, $authorization, $request_appointment_id, $request_end_date, $request_ignore_default_session_length, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetBookableItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentGetBookableItemsAsync
     *
     * Get staff appointment availability.
     *
     * @param  int[] $request_session_type_ids A list of the requested session type IDs. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_appointment_id If provided, filters out the appointment with this ID. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  bool $request_ignore_default_session_length When &#x60;true&#x60;, availabilities that are non-default return, for example, a 30-minute availability with a 60-minute default session length.&lt;br /&gt;  When &#x60;false&#x60;, only availabilities that have the default session length return. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of the requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetBookableItemsAsync($request_session_type_ids, $site_id, $version, $authorization = '', $request_appointment_id = null, $request_end_date = null, $request_ignore_default_session_length = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        return $this->appointmentGetBookableItemsAsyncWithHttpInfo($request_session_type_ids, $site_id, $version, $authorization, $request_appointment_id, $request_end_date, $request_ignore_default_session_length, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentGetBookableItemsAsyncWithHttpInfo
     *
     * Get staff appointment availability.
     *
     * @param  int[] $request_session_type_ids A list of the requested session type IDs. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_appointment_id If provided, filters out the appointment with this ID. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  bool $request_ignore_default_session_length When &#x60;true&#x60;, availabilities that are non-default return, for example, a 30-minute availability with a 60-minute default session length.&lt;br /&gt;  When &#x60;false&#x60;, only availabilities that have the default session length return. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of the requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetBookableItemsAsyncWithHttpInfo($request_session_type_ids, $site_id, $version, $authorization = '', $request_appointment_id = null, $request_end_date = null, $request_ignore_default_session_length = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        $returnType = '\Swagger\Client\Model\GetBookableItemsResponse';
        $request = $this->appointmentGetBookableItemsRequest($request_session_type_ids, $site_id, $version, $authorization, $request_appointment_id, $request_end_date, $request_ignore_default_session_length, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentGetBookableItems'
     *
     * @param  int[] $request_session_type_ids A list of the requested session type IDs. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_appointment_id If provided, filters out the appointment with this ID. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  bool $request_ignore_default_session_length When &#x60;true&#x60;, availabilities that are non-default return, for example, a 30-minute availability with a 60-minute default session length.&lt;br /&gt;  When &#x60;false&#x60;, only availabilities that have the default session length return. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of the requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentGetBookableItemsRequest($request_session_type_ids, $site_id, $version, $authorization = '', $request_appointment_id = null, $request_end_date = null, $request_ignore_default_session_length = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        // verify the required parameter 'request_session_type_ids' is set
        if ($request_session_type_ids === null || (is_array($request_session_type_ids) && count($request_session_type_ids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_session_type_ids when calling appointmentGetBookableItems'
            );
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling appointmentGetBookableItems'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling appointmentGetBookableItems'
            );
        }

        $resourcePath = '/public/v{version}/appointment/bookableitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($request_session_type_ids)) {
            $request_session_type_ids = ObjectSerializer::serializeCollection($request_session_type_ids, 'multi', true);
        }
        if ($request_session_type_ids !== null) {
            $queryParams['request.sessionTypeIds'] = ObjectSerializer::toQueryValue($request_session_type_ids);
        }
        // query params
        if ($request_appointment_id !== null) {
            $queryParams['request.appointmentId'] = ObjectSerializer::toQueryValue($request_appointment_id);
        }
        // query params
        if ($request_end_date !== null) {
            $queryParams['request.endDate'] = ObjectSerializer::toQueryValue($request_end_date);
        }
        // query params
        if ($request_ignore_default_session_length !== null) {
            $queryParams['request.ignoreDefaultSessionLength'] = ObjectSerializer::toQueryValue($request_ignore_default_session_length);
        }
        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if (is_array($request_location_ids)) {
            $request_location_ids = ObjectSerializer::serializeCollection($request_location_ids, 'multi', true);
        }
        if ($request_location_ids !== null) {
            $queryParams['request.locationIds'] = ObjectSerializer::toQueryValue($request_location_ids);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if (is_array($request_staff_ids)) {
            $request_staff_ids = ObjectSerializer::serializeCollection($request_staff_ids, 'multi', true);
        }
        if ($request_staff_ids !== null) {
            $queryParams['request.staffIds'] = ObjectSerializer::toQueryValue($request_staff_ids);
        }
        // query params
        if ($request_start_date !== null) {
            $queryParams['request.startDate'] = ObjectSerializer::toQueryValue($request_start_date);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentGetScheduleItems
     *
     * Get appointment schedule.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     * @param  bool $request_ignore_prep_finish_times When &#x60;true&#x60;, appointment preparation and finish unavailabilities are not returned.   &lt;br /&gt;Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetScheduleItemsResponse
     */
    public function appointmentGetScheduleItems($site_id, $version, $authorization = '', $request_end_date = null, $request_ignore_prep_finish_times = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        list($response) = $this->appointmentGetScheduleItemsWithHttpInfo($site_id, $version, $authorization, $request_end_date, $request_ignore_prep_finish_times, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date);
        return $response;
    }

    /**
     * Operation appointmentGetScheduleItemsWithHttpInfo
     *
     * Get appointment schedule.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     * @param  bool $request_ignore_prep_finish_times When &#x60;true&#x60;, appointment preparation and finish unavailabilities are not returned.   &lt;br /&gt;Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetScheduleItemsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentGetScheduleItemsWithHttpInfo($site_id, $version, $authorization = '', $request_end_date = null, $request_ignore_prep_finish_times = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        $returnType = '\Swagger\Client\Model\GetScheduleItemsResponse';
        $request = $this->appointmentGetScheduleItemsRequest($site_id, $version, $authorization, $request_end_date, $request_ignore_prep_finish_times, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetScheduleItemsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentGetScheduleItemsAsync
     *
     * Get appointment schedule.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     * @param  bool $request_ignore_prep_finish_times When &#x60;true&#x60;, appointment preparation and finish unavailabilities are not returned.   &lt;br /&gt;Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetScheduleItemsAsync($site_id, $version, $authorization = '', $request_end_date = null, $request_ignore_prep_finish_times = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        return $this->appointmentGetScheduleItemsAsyncWithHttpInfo($site_id, $version, $authorization, $request_end_date, $request_ignore_prep_finish_times, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentGetScheduleItemsAsyncWithHttpInfo
     *
     * Get appointment schedule.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     * @param  bool $request_ignore_prep_finish_times When &#x60;true&#x60;, appointment preparation and finish unavailabilities are not returned.   &lt;br /&gt;Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetScheduleItemsAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_end_date = null, $request_ignore_prep_finish_times = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        $returnType = '\Swagger\Client\Model\GetScheduleItemsResponse';
        $request = $this->appointmentGetScheduleItemsRequest($site_id, $version, $authorization, $request_end_date, $request_ignore_prep_finish_times, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentGetScheduleItems'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     * @param  bool $request_ignore_prep_finish_times When &#x60;true&#x60;, appointment preparation and finish unavailabilities are not returned.   &lt;br /&gt;Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids A list of requested staff IDs. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentGetScheduleItemsRequest($site_id, $version, $authorization = '', $request_end_date = null, $request_ignore_prep_finish_times = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling appointmentGetScheduleItems'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling appointmentGetScheduleItems'
            );
        }

        $resourcePath = '/public/v{version}/appointment/scheduleitems';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_end_date !== null) {
            $queryParams['request.endDate'] = ObjectSerializer::toQueryValue($request_end_date);
        }
        // query params
        if ($request_ignore_prep_finish_times !== null) {
            $queryParams['request.ignorePrepFinishTimes'] = ObjectSerializer::toQueryValue($request_ignore_prep_finish_times);
        }
        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if (is_array($request_location_ids)) {
            $request_location_ids = ObjectSerializer::serializeCollection($request_location_ids, 'multi', true);
        }
        if ($request_location_ids !== null) {
            $queryParams['request.locationIds'] = ObjectSerializer::toQueryValue($request_location_ids);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if (is_array($request_staff_ids)) {
            $request_staff_ids = ObjectSerializer::serializeCollection($request_staff_ids, 'multi', true);
        }
        if ($request_staff_ids !== null) {
            $queryParams['request.staffIds'] = ObjectSerializer::toQueryValue($request_staff_ids);
        }
        // query params
        if ($request_start_date !== null) {
            $queryParams['request.startDate'] = ObjectSerializer::toQueryValue($request_start_date);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentGetStaffAppointments
     *
     * Get appointments grouped by staff member.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_appointment_ids A list of the requested appointment IDs. (optional)
     * @param  string[] $request_client_ids List of client IDs to be returned. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids List of staff IDs to be returned. Use a value of zero to return all staff appointments. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range. If omitted, the default is used.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetStaffAppointmentsResponse
     */
    public function appointmentGetStaffAppointments($site_id, $version, $authorization = '', $request_appointment_ids = null, $request_client_ids = null, $request_end_date = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        list($response) = $this->appointmentGetStaffAppointmentsWithHttpInfo($site_id, $version, $authorization, $request_appointment_ids, $request_client_ids, $request_end_date, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date);
        return $response;
    }

    /**
     * Operation appointmentGetStaffAppointmentsWithHttpInfo
     *
     * Get appointments grouped by staff member.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_appointment_ids A list of the requested appointment IDs. (optional)
     * @param  string[] $request_client_ids List of client IDs to be returned. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids List of staff IDs to be returned. Use a value of zero to return all staff appointments. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range. If omitted, the default is used.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetStaffAppointmentsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentGetStaffAppointmentsWithHttpInfo($site_id, $version, $authorization = '', $request_appointment_ids = null, $request_client_ids = null, $request_end_date = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        $returnType = '\Swagger\Client\Model\GetStaffAppointmentsResponse';
        $request = $this->appointmentGetStaffAppointmentsRequest($site_id, $version, $authorization, $request_appointment_ids, $request_client_ids, $request_end_date, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetStaffAppointmentsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentGetStaffAppointmentsAsync
     *
     * Get appointments grouped by staff member.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_appointment_ids A list of the requested appointment IDs. (optional)
     * @param  string[] $request_client_ids List of client IDs to be returned. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids List of staff IDs to be returned. Use a value of zero to return all staff appointments. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range. If omitted, the default is used.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetStaffAppointmentsAsync($site_id, $version, $authorization = '', $request_appointment_ids = null, $request_client_ids = null, $request_end_date = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        return $this->appointmentGetStaffAppointmentsAsyncWithHttpInfo($site_id, $version, $authorization, $request_appointment_ids, $request_client_ids, $request_end_date, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentGetStaffAppointmentsAsyncWithHttpInfo
     *
     * Get appointments grouped by staff member.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_appointment_ids A list of the requested appointment IDs. (optional)
     * @param  string[] $request_client_ids List of client IDs to be returned. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids List of staff IDs to be returned. Use a value of zero to return all staff appointments. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range. If omitted, the default is used.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentGetStaffAppointmentsAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_appointment_ids = null, $request_client_ids = null, $request_end_date = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        $returnType = '\Swagger\Client\Model\GetStaffAppointmentsResponse';
        $request = $this->appointmentGetStaffAppointmentsRequest($site_id, $version, $authorization, $request_appointment_ids, $request_client_ids, $request_end_date, $request_limit, $request_location_ids, $request_offset, $request_staff_ids, $request_start_date);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentGetStaffAppointments'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_appointment_ids A list of the requested appointment IDs. (optional)
     * @param  string[] $request_client_ids List of client IDs to be returned. (optional)
     * @param  \DateTime $request_end_date The end date of the requested date range.   &lt;br /&gt;Default: **StartDate** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int[] $request_location_ids A list of the requested location IDs. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_staff_ids List of staff IDs to be returned. Use a value of zero to return all staff appointments. (optional)
     * @param  \DateTime $request_start_date The start date of the requested date range. If omitted, the default is used.   &lt;br /&gt;Default: **today’s date** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentGetStaffAppointmentsRequest($site_id, $version, $authorization = '', $request_appointment_ids = null, $request_client_ids = null, $request_end_date = null, $request_limit = null, $request_location_ids = null, $request_offset = null, $request_staff_ids = null, $request_start_date = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling appointmentGetStaffAppointments'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling appointmentGetStaffAppointments'
            );
        }

        $resourcePath = '/public/v{version}/appointment/staffappointments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($request_appointment_ids)) {
            $request_appointment_ids = ObjectSerializer::serializeCollection($request_appointment_ids, 'multi', true);
        }
        if ($request_appointment_ids !== null) {
            $queryParams['request.appointmentIds'] = ObjectSerializer::toQueryValue($request_appointment_ids);
        }
        // query params
        if (is_array($request_client_ids)) {
            $request_client_ids = ObjectSerializer::serializeCollection($request_client_ids, 'multi', true);
        }
        if ($request_client_ids !== null) {
            $queryParams['request.clientIds'] = ObjectSerializer::toQueryValue($request_client_ids);
        }
        // query params
        if ($request_end_date !== null) {
            $queryParams['request.endDate'] = ObjectSerializer::toQueryValue($request_end_date);
        }
        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if (is_array($request_location_ids)) {
            $request_location_ids = ObjectSerializer::serializeCollection($request_location_ids, 'multi', true);
        }
        if ($request_location_ids !== null) {
            $queryParams['request.locationIds'] = ObjectSerializer::toQueryValue($request_location_ids);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if (is_array($request_staff_ids)) {
            $request_staff_ids = ObjectSerializer::serializeCollection($request_staff_ids, 'multi', true);
        }
        if ($request_staff_ids !== null) {
            $queryParams['request.staffIds'] = ObjectSerializer::toQueryValue($request_staff_ids);
        }
        // query params
        if ($request_start_date !== null) {
            $queryParams['request.startDate'] = ObjectSerializer::toQueryValue($request_start_date);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation appointmentUpdateApppointment
     *
     * Update an existing appointment.
     *
     * @param  \Swagger\Client\Model\UpdateAppointmentRequest $request request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UpdateAppointmentResponse
     */
    public function appointmentUpdateApppointment($request, $site_id, $version, $authorization = '')
    {
        list($response) = $this->appointmentUpdateApppointmentWithHttpInfo($request, $site_id, $version, $authorization);
        return $response;
    }

    /**
     * Operation appointmentUpdateApppointmentWithHttpInfo
     *
     * Update an existing appointment.
     *
     * @param  \Swagger\Client\Model\UpdateAppointmentRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UpdateAppointmentResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function appointmentUpdateApppointmentWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\UpdateAppointmentResponse';
        $request = $this->appointmentUpdateApppointmentRequest($request, $site_id, $version, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UpdateAppointmentResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation appointmentUpdateApppointmentAsync
     *
     * Update an existing appointment.
     *
     * @param  \Swagger\Client\Model\UpdateAppointmentRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentUpdateApppointmentAsync($request, $site_id, $version, $authorization = '')
    {
        return $this->appointmentUpdateApppointmentAsyncWithHttpInfo($request, $site_id, $version, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation appointmentUpdateApppointmentAsyncWithHttpInfo
     *
     * Update an existing appointment.
     *
     * @param  \Swagger\Client\Model\UpdateAppointmentRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function appointmentUpdateApppointmentAsyncWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\UpdateAppointmentResponse';
        $request = $this->appointmentUpdateApppointmentRequest($request, $site_id, $version, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'appointmentUpdateApppointment'
     *
     * @param  \Swagger\Client\Model\UpdateAppointmentRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function appointmentUpdateApppointmentRequest($request, $site_id, $version, $authorization = '')
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling appointmentUpdateApppointment'
            );
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling appointmentUpdateApppointment'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling appointmentUpdateApppointment'
            );
        }

        $resourcePath = '/public/v{version}/appointment/updateappointment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
