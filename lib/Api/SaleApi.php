<?php
/**
 * SaleApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SaleApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SaleApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation saleCheckoutShoppingCart
     *
     * Purchase pricing options, packages, retail products, or tips for a client.
     *
     * @param  \Swagger\Client\Model\CheckoutShoppingCartRequest $request request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function saleCheckoutShoppingCart($request, $site_id, $version, $authorization = '')
    {
        list($response) = $this->saleCheckoutShoppingCartWithHttpInfo($request, $site_id, $version, $authorization);
        return $response;
    }

    /**
     * Operation saleCheckoutShoppingCartWithHttpInfo
     *
     * Purchase pricing options, packages, retail products, or tips for a client.
     *
     * @param  \Swagger\Client\Model\CheckoutShoppingCartRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function saleCheckoutShoppingCartWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = 'object';
        $request = $this->saleCheckoutShoppingCartRequest($request, $site_id, $version, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleCheckoutShoppingCartAsync
     *
     * Purchase pricing options, packages, retail products, or tips for a client.
     *
     * @param  \Swagger\Client\Model\CheckoutShoppingCartRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleCheckoutShoppingCartAsync($request, $site_id, $version, $authorization = '')
    {
        return $this->saleCheckoutShoppingCartAsyncWithHttpInfo($request, $site_id, $version, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleCheckoutShoppingCartAsyncWithHttpInfo
     *
     * Purchase pricing options, packages, retail products, or tips for a client.
     *
     * @param  \Swagger\Client\Model\CheckoutShoppingCartRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleCheckoutShoppingCartAsyncWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = 'object';
        $request = $this->saleCheckoutShoppingCartRequest($request, $site_id, $version, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleCheckoutShoppingCart'
     *
     * @param  \Swagger\Client\Model\CheckoutShoppingCartRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saleCheckoutShoppingCartRequest($request, $site_id, $version, $authorization = '')
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling saleCheckoutShoppingCart'
            );
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling saleCheckoutShoppingCart'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saleCheckoutShoppingCart'
            );
        }

        $resourcePath = '/public/v{version}/sale/checkoutshoppingcart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saleGetAcceptedCardTypes
     *
     * Get credit cards types that a site accepts.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string[]
     */
    public function saleGetAcceptedCardTypes($site_id, $version, $authorization = '')
    {
        list($response) = $this->saleGetAcceptedCardTypesWithHttpInfo($site_id, $version, $authorization);
        return $response;
    }

    /**
     * Operation saleGetAcceptedCardTypesWithHttpInfo
     *
     * Get credit cards types that a site accepts.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string[], HTTP status code, HTTP response headers (array of strings)
     */
    public function saleGetAcceptedCardTypesWithHttpInfo($site_id, $version, $authorization = '')
    {
        $returnType = 'string[]';
        $request = $this->saleGetAcceptedCardTypesRequest($site_id, $version, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleGetAcceptedCardTypesAsync
     *
     * Get credit cards types that a site accepts.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetAcceptedCardTypesAsync($site_id, $version, $authorization = '')
    {
        return $this->saleGetAcceptedCardTypesAsyncWithHttpInfo($site_id, $version, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleGetAcceptedCardTypesAsyncWithHttpInfo
     *
     * Get credit cards types that a site accepts.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetAcceptedCardTypesAsyncWithHttpInfo($site_id, $version, $authorization = '')
    {
        $returnType = 'string[]';
        $request = $this->saleGetAcceptedCardTypesRequest($site_id, $version, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleGetAcceptedCardTypes'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saleGetAcceptedCardTypesRequest($site_id, $version, $authorization = '')
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling saleGetAcceptedCardTypes'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saleGetAcceptedCardTypes'
            );
        }

        $resourcePath = '/public/v{version}/sale/acceptedcardtypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saleGetContracts
     *
     * Get contracts available for purchase at a site.
     *
     * @param  int $request_location_id The ID of the location that has the requested contracts and AutoPay options. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_consumer_id The ID of the client. (optional)
     * @param  int[] $request_contract_ids When included, the response only contains details about the specified contract IDs. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, the response only contains details about contracts and AutoPay options that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, only contracts that are not intended to be sold online are returned.&lt;br /&gt;  Default: **all contracts** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetContractsResponse
     */
    public function saleGetContracts($request_location_id, $site_id, $version, $authorization = '', $request_consumer_id = null, $request_contract_ids = null, $request_limit = null, $request_offset = null, $request_sold_online = null)
    {
        list($response) = $this->saleGetContractsWithHttpInfo($request_location_id, $site_id, $version, $authorization, $request_consumer_id, $request_contract_ids, $request_limit, $request_offset, $request_sold_online);
        return $response;
    }

    /**
     * Operation saleGetContractsWithHttpInfo
     *
     * Get contracts available for purchase at a site.
     *
     * @param  int $request_location_id The ID of the location that has the requested contracts and AutoPay options. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_consumer_id The ID of the client. (optional)
     * @param  int[] $request_contract_ids When included, the response only contains details about the specified contract IDs. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, the response only contains details about contracts and AutoPay options that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, only contracts that are not intended to be sold online are returned.&lt;br /&gt;  Default: **all contracts** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetContractsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saleGetContractsWithHttpInfo($request_location_id, $site_id, $version, $authorization = '', $request_consumer_id = null, $request_contract_ids = null, $request_limit = null, $request_offset = null, $request_sold_online = null)
    {
        $returnType = '\Swagger\Client\Model\GetContractsResponse';
        $request = $this->saleGetContractsRequest($request_location_id, $site_id, $version, $authorization, $request_consumer_id, $request_contract_ids, $request_limit, $request_offset, $request_sold_online);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetContractsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleGetContractsAsync
     *
     * Get contracts available for purchase at a site.
     *
     * @param  int $request_location_id The ID of the location that has the requested contracts and AutoPay options. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_consumer_id The ID of the client. (optional)
     * @param  int[] $request_contract_ids When included, the response only contains details about the specified contract IDs. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, the response only contains details about contracts and AutoPay options that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, only contracts that are not intended to be sold online are returned.&lt;br /&gt;  Default: **all contracts** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetContractsAsync($request_location_id, $site_id, $version, $authorization = '', $request_consumer_id = null, $request_contract_ids = null, $request_limit = null, $request_offset = null, $request_sold_online = null)
    {
        return $this->saleGetContractsAsyncWithHttpInfo($request_location_id, $site_id, $version, $authorization, $request_consumer_id, $request_contract_ids, $request_limit, $request_offset, $request_sold_online)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleGetContractsAsyncWithHttpInfo
     *
     * Get contracts available for purchase at a site.
     *
     * @param  int $request_location_id The ID of the location that has the requested contracts and AutoPay options. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_consumer_id The ID of the client. (optional)
     * @param  int[] $request_contract_ids When included, the response only contains details about the specified contract IDs. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, the response only contains details about contracts and AutoPay options that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, only contracts that are not intended to be sold online are returned.&lt;br /&gt;  Default: **all contracts** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetContractsAsyncWithHttpInfo($request_location_id, $site_id, $version, $authorization = '', $request_consumer_id = null, $request_contract_ids = null, $request_limit = null, $request_offset = null, $request_sold_online = null)
    {
        $returnType = '\Swagger\Client\Model\GetContractsResponse';
        $request = $this->saleGetContractsRequest($request_location_id, $site_id, $version, $authorization, $request_consumer_id, $request_contract_ids, $request_limit, $request_offset, $request_sold_online);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleGetContracts'
     *
     * @param  int $request_location_id The ID of the location that has the requested contracts and AutoPay options. (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_consumer_id The ID of the client. (optional)
     * @param  int[] $request_contract_ids When included, the response only contains details about the specified contract IDs. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, the response only contains details about contracts and AutoPay options that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, only contracts that are not intended to be sold online are returned.&lt;br /&gt;  Default: **all contracts** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saleGetContractsRequest($request_location_id, $site_id, $version, $authorization = '', $request_consumer_id = null, $request_contract_ids = null, $request_limit = null, $request_offset = null, $request_sold_online = null)
    {
        // verify the required parameter 'request_location_id' is set
        if ($request_location_id === null || (is_array($request_location_id) && count($request_location_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request_location_id when calling saleGetContracts'
            );
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling saleGetContracts'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saleGetContracts'
            );
        }

        $resourcePath = '/public/v{version}/sale/contracts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_consumer_id !== null) {
            $queryParams['request.consumerId'] = ObjectSerializer::toQueryValue($request_consumer_id);
        }
        // query params
        if (is_array($request_contract_ids)) {
            $request_contract_ids = ObjectSerializer::serializeCollection($request_contract_ids, 'multi', true);
        }
        if ($request_contract_ids !== null) {
            $queryParams['request.contractIds'] = ObjectSerializer::toQueryValue($request_contract_ids);
        }
        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if ($request_sold_online !== null) {
            $queryParams['request.soldOnline'] = ObjectSerializer::toQueryValue($request_sold_online);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saleGetCustomPaymentMethods
     *
     * Get payment methods that can be used to pay for sales at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetCustomPaymentMethodsResponse
     */
    public function saleGetCustomPaymentMethods($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        list($response) = $this->saleGetCustomPaymentMethodsWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset);
        return $response;
    }

    /**
     * Operation saleGetCustomPaymentMethodsWithHttpInfo
     *
     * Get payment methods that can be used to pay for sales at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetCustomPaymentMethodsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saleGetCustomPaymentMethodsWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        $returnType = '\Swagger\Client\Model\GetCustomPaymentMethodsResponse';
        $request = $this->saleGetCustomPaymentMethodsRequest($site_id, $version, $authorization, $request_limit, $request_offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetCustomPaymentMethodsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleGetCustomPaymentMethodsAsync
     *
     * Get payment methods that can be used to pay for sales at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetCustomPaymentMethodsAsync($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        return $this->saleGetCustomPaymentMethodsAsyncWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleGetCustomPaymentMethodsAsyncWithHttpInfo
     *
     * Get payment methods that can be used to pay for sales at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetCustomPaymentMethodsAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        $returnType = '\Swagger\Client\Model\GetCustomPaymentMethodsResponse';
        $request = $this->saleGetCustomPaymentMethodsRequest($site_id, $version, $authorization, $request_limit, $request_offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleGetCustomPaymentMethods'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saleGetCustomPaymentMethodsRequest($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling saleGetCustomPaymentMethods'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saleGetCustomPaymentMethods'
            );
        }

        $resourcePath = '/public/v{version}/sale/custompaymentmethods';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saleGetGiftCards
     *
     * Get gift cards available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_ids Filters the results to the requested gift card IDs.&lt;br /&gt;  Default: **all** gift cards. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When included, returns gift cards that are sold at the provided location ID. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, only returns gift cards that are sold online.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetGiftCardResponse
     */
    public function saleGetGiftCards($site_id, $version, $authorization = '', $request_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_sold_online = null)
    {
        list($response) = $this->saleGetGiftCardsWithHttpInfo($site_id, $version, $authorization, $request_ids, $request_limit, $request_location_id, $request_offset, $request_sold_online);
        return $response;
    }

    /**
     * Operation saleGetGiftCardsWithHttpInfo
     *
     * Get gift cards available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_ids Filters the results to the requested gift card IDs.&lt;br /&gt;  Default: **all** gift cards. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When included, returns gift cards that are sold at the provided location ID. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, only returns gift cards that are sold online.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetGiftCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saleGetGiftCardsWithHttpInfo($site_id, $version, $authorization = '', $request_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_sold_online = null)
    {
        $returnType = '\Swagger\Client\Model\GetGiftCardResponse';
        $request = $this->saleGetGiftCardsRequest($site_id, $version, $authorization, $request_ids, $request_limit, $request_location_id, $request_offset, $request_sold_online);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetGiftCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleGetGiftCardsAsync
     *
     * Get gift cards available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_ids Filters the results to the requested gift card IDs.&lt;br /&gt;  Default: **all** gift cards. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When included, returns gift cards that are sold at the provided location ID. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, only returns gift cards that are sold online.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetGiftCardsAsync($site_id, $version, $authorization = '', $request_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_sold_online = null)
    {
        return $this->saleGetGiftCardsAsyncWithHttpInfo($site_id, $version, $authorization, $request_ids, $request_limit, $request_location_id, $request_offset, $request_sold_online)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleGetGiftCardsAsyncWithHttpInfo
     *
     * Get gift cards available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_ids Filters the results to the requested gift card IDs.&lt;br /&gt;  Default: **all** gift cards. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When included, returns gift cards that are sold at the provided location ID. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, only returns gift cards that are sold online.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetGiftCardsAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_sold_online = null)
    {
        $returnType = '\Swagger\Client\Model\GetGiftCardResponse';
        $request = $this->saleGetGiftCardsRequest($site_id, $version, $authorization, $request_ids, $request_limit, $request_location_id, $request_offset, $request_sold_online);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleGetGiftCards'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_ids Filters the results to the requested gift card IDs.&lt;br /&gt;  Default: **all** gift cards. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When included, returns gift cards that are sold at the provided location ID. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_sold_online When &#x60;true&#x60;, only returns gift cards that are sold online.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saleGetGiftCardsRequest($site_id, $version, $authorization = '', $request_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_sold_online = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling saleGetGiftCards'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saleGetGiftCards'
            );
        }

        $resourcePath = '/public/v{version}/sale/giftcards';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($request_ids)) {
            $request_ids = ObjectSerializer::serializeCollection($request_ids, 'multi', true);
        }
        if ($request_ids !== null) {
            $queryParams['request.ids'] = ObjectSerializer::toQueryValue($request_ids);
        }
        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if ($request_sold_online !== null) {
            $queryParams['request.soldOnline'] = ObjectSerializer::toQueryValue($request_sold_online);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saleGetPackages
     *
     * Get packages available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_package_ids A list of the packages IDs to filter by. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only returns products that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetPackagesResponse
     */
    public function saleGetPackages($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_package_ids = null, $request_sell_online = null)
    {
        list($response) = $this->saleGetPackagesWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset, $request_package_ids, $request_sell_online);
        return $response;
    }

    /**
     * Operation saleGetPackagesWithHttpInfo
     *
     * Get packages available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_package_ids A list of the packages IDs to filter by. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only returns products that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetPackagesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saleGetPackagesWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_package_ids = null, $request_sell_online = null)
    {
        $returnType = '\Swagger\Client\Model\GetPackagesResponse';
        $request = $this->saleGetPackagesRequest($site_id, $version, $authorization, $request_limit, $request_offset, $request_package_ids, $request_sell_online);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetPackagesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleGetPackagesAsync
     *
     * Get packages available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_package_ids A list of the packages IDs to filter by. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only returns products that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetPackagesAsync($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_package_ids = null, $request_sell_online = null)
    {
        return $this->saleGetPackagesAsyncWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset, $request_package_ids, $request_sell_online)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleGetPackagesAsyncWithHttpInfo
     *
     * Get packages available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_package_ids A list of the packages IDs to filter by. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only returns products that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetPackagesAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_package_ids = null, $request_sell_online = null)
    {
        $returnType = '\Swagger\Client\Model\GetPackagesResponse';
        $request = $this->saleGetPackagesRequest($site_id, $version, $authorization, $request_limit, $request_offset, $request_package_ids, $request_sell_online);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleGetPackages'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_package_ids A list of the packages IDs to filter by. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only returns products that can be sold online.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saleGetPackagesRequest($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_package_ids = null, $request_sell_online = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling saleGetPackages'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saleGetPackages'
            );
        }

        $resourcePath = '/public/v{version}/sale/packages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if (is_array($request_package_ids)) {
            $request_package_ids = ObjectSerializer::serializeCollection($request_package_ids, 'multi', true);
        }
        if ($request_package_ids !== null) {
            $queryParams['request.packageIds'] = ObjectSerializer::toQueryValue($request_package_ids);
        }
        // query params
        if ($request_sell_online !== null) {
            $queryParams['request.sellOnline'] = ObjectSerializer::toQueryValue($request_sell_online);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saleGetProducts
     *
     * Get retail products available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_category_ids A list of category IDs to filter by. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location ID to use to determine the tax for the products that this request returns.&lt;br /&gt;  Default: **online store** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string[] $request_product_ids An ID filter for products. (optional)
     * @param  string $request_search_text A search filter, used for searching by term. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only products that can be sold online are returned.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_sub_category_ids A list of subcategory IDs to filter by. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetProductsResponse
     */
    public function saleGetProducts($site_id, $version, $authorization = '', $request_category_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_product_ids = null, $request_search_text = null, $request_sell_online = null, $request_sub_category_ids = null)
    {
        list($response) = $this->saleGetProductsWithHttpInfo($site_id, $version, $authorization, $request_category_ids, $request_limit, $request_location_id, $request_offset, $request_product_ids, $request_search_text, $request_sell_online, $request_sub_category_ids);
        return $response;
    }

    /**
     * Operation saleGetProductsWithHttpInfo
     *
     * Get retail products available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_category_ids A list of category IDs to filter by. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location ID to use to determine the tax for the products that this request returns.&lt;br /&gt;  Default: **online store** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string[] $request_product_ids An ID filter for products. (optional)
     * @param  string $request_search_text A search filter, used for searching by term. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only products that can be sold online are returned.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_sub_category_ids A list of subcategory IDs to filter by. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetProductsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saleGetProductsWithHttpInfo($site_id, $version, $authorization = '', $request_category_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_product_ids = null, $request_search_text = null, $request_sell_online = null, $request_sub_category_ids = null)
    {
        $returnType = '\Swagger\Client\Model\GetProductsResponse';
        $request = $this->saleGetProductsRequest($site_id, $version, $authorization, $request_category_ids, $request_limit, $request_location_id, $request_offset, $request_product_ids, $request_search_text, $request_sell_online, $request_sub_category_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetProductsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleGetProductsAsync
     *
     * Get retail products available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_category_ids A list of category IDs to filter by. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location ID to use to determine the tax for the products that this request returns.&lt;br /&gt;  Default: **online store** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string[] $request_product_ids An ID filter for products. (optional)
     * @param  string $request_search_text A search filter, used for searching by term. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only products that can be sold online are returned.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_sub_category_ids A list of subcategory IDs to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetProductsAsync($site_id, $version, $authorization = '', $request_category_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_product_ids = null, $request_search_text = null, $request_sell_online = null, $request_sub_category_ids = null)
    {
        return $this->saleGetProductsAsyncWithHttpInfo($site_id, $version, $authorization, $request_category_ids, $request_limit, $request_location_id, $request_offset, $request_product_ids, $request_search_text, $request_sell_online, $request_sub_category_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleGetProductsAsyncWithHttpInfo
     *
     * Get retail products available for purchase at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_category_ids A list of category IDs to filter by. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location ID to use to determine the tax for the products that this request returns.&lt;br /&gt;  Default: **online store** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string[] $request_product_ids An ID filter for products. (optional)
     * @param  string $request_search_text A search filter, used for searching by term. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only products that can be sold online are returned.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_sub_category_ids A list of subcategory IDs to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetProductsAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_category_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_product_ids = null, $request_search_text = null, $request_sell_online = null, $request_sub_category_ids = null)
    {
        $returnType = '\Swagger\Client\Model\GetProductsResponse';
        $request = $this->saleGetProductsRequest($site_id, $version, $authorization, $request_category_ids, $request_limit, $request_location_id, $request_offset, $request_product_ids, $request_search_text, $request_sell_online, $request_sub_category_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleGetProducts'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int[] $request_category_ids A list of category IDs to filter by. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location ID to use to determine the tax for the products that this request returns.&lt;br /&gt;  Default: **online store** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  string[] $request_product_ids An ID filter for products. (optional)
     * @param  string $request_search_text A search filter, used for searching by term. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, only products that can be sold online are returned.&lt;br /&gt;  When &#x60;false&#x60;, all products are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_sub_category_ids A list of subcategory IDs to filter by. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saleGetProductsRequest($site_id, $version, $authorization = '', $request_category_ids = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_product_ids = null, $request_search_text = null, $request_sell_online = null, $request_sub_category_ids = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling saleGetProducts'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saleGetProducts'
            );
        }

        $resourcePath = '/public/v{version}/sale/products';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (is_array($request_category_ids)) {
            $request_category_ids = ObjectSerializer::serializeCollection($request_category_ids, 'multi', true);
        }
        if ($request_category_ids !== null) {
            $queryParams['request.categoryIds'] = ObjectSerializer::toQueryValue($request_category_ids);
        }
        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if (is_array($request_product_ids)) {
            $request_product_ids = ObjectSerializer::serializeCollection($request_product_ids, 'multi', true);
        }
        if ($request_product_ids !== null) {
            $queryParams['request.productIds'] = ObjectSerializer::toQueryValue($request_product_ids);
        }
        // query params
        if ($request_search_text !== null) {
            $queryParams['request.searchText'] = ObjectSerializer::toQueryValue($request_search_text);
        }
        // query params
        if ($request_sell_online !== null) {
            $queryParams['request.sellOnline'] = ObjectSerializer::toQueryValue($request_sell_online);
        }
        // query params
        if (is_array($request_sub_category_ids)) {
            $request_sub_category_ids = ObjectSerializer::serializeCollection($request_sub_category_ids, 'multi', true);
        }
        if ($request_sub_category_ids !== null) {
            $queryParams['request.subCategoryIds'] = ObjectSerializer::toQueryValue($request_sub_category_ids);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saleGetSales
     *
     * Get sales completed at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetSalesResponse
     */
    public function saleGetSales($site_id, $version, $authorization = '')
    {
        list($response) = $this->saleGetSalesWithHttpInfo($site_id, $version, $authorization);
        return $response;
    }

    /**
     * Operation saleGetSalesWithHttpInfo
     *
     * Get sales completed at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetSalesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saleGetSalesWithHttpInfo($site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\GetSalesResponse';
        $request = $this->saleGetSalesRequest($site_id, $version, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetSalesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleGetSalesAsync
     *
     * Get sales completed at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetSalesAsync($site_id, $version, $authorization = '')
    {
        return $this->saleGetSalesAsyncWithHttpInfo($site_id, $version, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleGetSalesAsyncWithHttpInfo
     *
     * Get sales completed at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetSalesAsyncWithHttpInfo($site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\GetSalesResponse';
        $request = $this->saleGetSalesRequest($site_id, $version, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleGetSales'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saleGetSalesRequest($site_id, $version, $authorization = '')
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling saleGetSales'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saleGetSales'
            );
        }

        $resourcePath = '/public/v{version}/sale/sales';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation saleGetServices
     *
     * Get pricing options available for purchase at a site
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_class_id Filters to the pricing options for the specified class ID. (optional)
     * @param  int $request_class_schedule_id Filters to the pricing options for the specified class schedule ID. (optional)
     * @param  bool $request_hide_related_programs When &#x60;true&#x60;, indicates that pricing options of related programs are omitted from the response.&lt;br /&gt;  Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When specified, for each returned pricing option, &#x60;TaxRate&#x60; and &#x60;TaxIncluded&#x60; are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the &#x60;TaxRate&#x60; is set to zero. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_program_ids Filters to pricing options with the specified program IDs. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, filters to the pricing options that can be sold online.&lt;br /&gt;  Default: **false** (optional)
     * @param  string[] $request_service_ids Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably. (optional)
     * @param  int[] $request_session_type_ids Filters to the pricing options with the specified session types IDs. (optional)
     * @param  int $request_staff_id Sets &#x60;Price&#x60; and &#x60;OnlinePrice&#x60; to the particular pricing of a specific staff member, if allowed by the business. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetServicesResponse
     */
    public function saleGetServices($site_id, $version, $authorization = '', $request_class_id = null, $request_class_schedule_id = null, $request_hide_related_programs = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_program_ids = null, $request_sell_online = null, $request_service_ids = null, $request_session_type_ids = null, $request_staff_id = null)
    {
        list($response) = $this->saleGetServicesWithHttpInfo($site_id, $version, $authorization, $request_class_id, $request_class_schedule_id, $request_hide_related_programs, $request_limit, $request_location_id, $request_offset, $request_program_ids, $request_sell_online, $request_service_ids, $request_session_type_ids, $request_staff_id);
        return $response;
    }

    /**
     * Operation saleGetServicesWithHttpInfo
     *
     * Get pricing options available for purchase at a site
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_class_id Filters to the pricing options for the specified class ID. (optional)
     * @param  int $request_class_schedule_id Filters to the pricing options for the specified class schedule ID. (optional)
     * @param  bool $request_hide_related_programs When &#x60;true&#x60;, indicates that pricing options of related programs are omitted from the response.&lt;br /&gt;  Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When specified, for each returned pricing option, &#x60;TaxRate&#x60; and &#x60;TaxIncluded&#x60; are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the &#x60;TaxRate&#x60; is set to zero. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_program_ids Filters to pricing options with the specified program IDs. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, filters to the pricing options that can be sold online.&lt;br /&gt;  Default: **false** (optional)
     * @param  string[] $request_service_ids Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably. (optional)
     * @param  int[] $request_session_type_ids Filters to the pricing options with the specified session types IDs. (optional)
     * @param  int $request_staff_id Sets &#x60;Price&#x60; and &#x60;OnlinePrice&#x60; to the particular pricing of a specific staff member, if allowed by the business. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetServicesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function saleGetServicesWithHttpInfo($site_id, $version, $authorization = '', $request_class_id = null, $request_class_schedule_id = null, $request_hide_related_programs = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_program_ids = null, $request_sell_online = null, $request_service_ids = null, $request_session_type_ids = null, $request_staff_id = null)
    {
        $returnType = '\Swagger\Client\Model\GetServicesResponse';
        $request = $this->saleGetServicesRequest($site_id, $version, $authorization, $request_class_id, $request_class_schedule_id, $request_hide_related_programs, $request_limit, $request_location_id, $request_offset, $request_program_ids, $request_sell_online, $request_service_ids, $request_session_type_ids, $request_staff_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetServicesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation saleGetServicesAsync
     *
     * Get pricing options available for purchase at a site
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_class_id Filters to the pricing options for the specified class ID. (optional)
     * @param  int $request_class_schedule_id Filters to the pricing options for the specified class schedule ID. (optional)
     * @param  bool $request_hide_related_programs When &#x60;true&#x60;, indicates that pricing options of related programs are omitted from the response.&lt;br /&gt;  Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When specified, for each returned pricing option, &#x60;TaxRate&#x60; and &#x60;TaxIncluded&#x60; are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the &#x60;TaxRate&#x60; is set to zero. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_program_ids Filters to pricing options with the specified program IDs. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, filters to the pricing options that can be sold online.&lt;br /&gt;  Default: **false** (optional)
     * @param  string[] $request_service_ids Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably. (optional)
     * @param  int[] $request_session_type_ids Filters to the pricing options with the specified session types IDs. (optional)
     * @param  int $request_staff_id Sets &#x60;Price&#x60; and &#x60;OnlinePrice&#x60; to the particular pricing of a specific staff member, if allowed by the business. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetServicesAsync($site_id, $version, $authorization = '', $request_class_id = null, $request_class_schedule_id = null, $request_hide_related_programs = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_program_ids = null, $request_sell_online = null, $request_service_ids = null, $request_session_type_ids = null, $request_staff_id = null)
    {
        return $this->saleGetServicesAsyncWithHttpInfo($site_id, $version, $authorization, $request_class_id, $request_class_schedule_id, $request_hide_related_programs, $request_limit, $request_location_id, $request_offset, $request_program_ids, $request_sell_online, $request_service_ids, $request_session_type_ids, $request_staff_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation saleGetServicesAsyncWithHttpInfo
     *
     * Get pricing options available for purchase at a site
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_class_id Filters to the pricing options for the specified class ID. (optional)
     * @param  int $request_class_schedule_id Filters to the pricing options for the specified class schedule ID. (optional)
     * @param  bool $request_hide_related_programs When &#x60;true&#x60;, indicates that pricing options of related programs are omitted from the response.&lt;br /&gt;  Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When specified, for each returned pricing option, &#x60;TaxRate&#x60; and &#x60;TaxIncluded&#x60; are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the &#x60;TaxRate&#x60; is set to zero. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_program_ids Filters to pricing options with the specified program IDs. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, filters to the pricing options that can be sold online.&lt;br /&gt;  Default: **false** (optional)
     * @param  string[] $request_service_ids Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably. (optional)
     * @param  int[] $request_session_type_ids Filters to the pricing options with the specified session types IDs. (optional)
     * @param  int $request_staff_id Sets &#x60;Price&#x60; and &#x60;OnlinePrice&#x60; to the particular pricing of a specific staff member, if allowed by the business. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function saleGetServicesAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_class_id = null, $request_class_schedule_id = null, $request_hide_related_programs = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_program_ids = null, $request_sell_online = null, $request_service_ids = null, $request_session_type_ids = null, $request_staff_id = null)
    {
        $returnType = '\Swagger\Client\Model\GetServicesResponse';
        $request = $this->saleGetServicesRequest($site_id, $version, $authorization, $request_class_id, $request_class_schedule_id, $request_hide_related_programs, $request_limit, $request_location_id, $request_offset, $request_program_ids, $request_sell_online, $request_service_ids, $request_session_type_ids, $request_staff_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'saleGetServices'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_class_id Filters to the pricing options for the specified class ID. (optional)
     * @param  int $request_class_schedule_id Filters to the pricing options for the specified class schedule ID. (optional)
     * @param  bool $request_hide_related_programs When &#x60;true&#x60;, indicates that pricing options of related programs are omitted from the response.&lt;br /&gt;  Default: **false** (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id When specified, for each returned pricing option, &#x60;TaxRate&#x60; and &#x60;TaxIncluded&#x60; are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the &#x60;TaxRate&#x60; is set to zero. (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_program_ids Filters to pricing options with the specified program IDs. (optional)
     * @param  bool $request_sell_online When &#x60;true&#x60;, filters to the pricing options that can be sold online.&lt;br /&gt;  Default: **false** (optional)
     * @param  string[] $request_service_ids Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably. (optional)
     * @param  int[] $request_session_type_ids Filters to the pricing options with the specified session types IDs. (optional)
     * @param  int $request_staff_id Sets &#x60;Price&#x60; and &#x60;OnlinePrice&#x60; to the particular pricing of a specific staff member, if allowed by the business. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function saleGetServicesRequest($site_id, $version, $authorization = '', $request_class_id = null, $request_class_schedule_id = null, $request_hide_related_programs = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_program_ids = null, $request_sell_online = null, $request_service_ids = null, $request_session_type_ids = null, $request_staff_id = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling saleGetServices'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling saleGetServices'
            );
        }

        $resourcePath = '/public/v{version}/sale/services';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_class_id !== null) {
            $queryParams['request.classId'] = ObjectSerializer::toQueryValue($request_class_id);
        }
        // query params
        if ($request_class_schedule_id !== null) {
            $queryParams['request.classScheduleId'] = ObjectSerializer::toQueryValue($request_class_schedule_id);
        }
        // query params
        if ($request_hide_related_programs !== null) {
            $queryParams['request.hideRelatedPrograms'] = ObjectSerializer::toQueryValue($request_hide_related_programs);
        }
        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if (is_array($request_program_ids)) {
            $request_program_ids = ObjectSerializer::serializeCollection($request_program_ids, 'multi', true);
        }
        if ($request_program_ids !== null) {
            $queryParams['request.programIds'] = ObjectSerializer::toQueryValue($request_program_ids);
        }
        // query params
        if ($request_sell_online !== null) {
            $queryParams['request.sellOnline'] = ObjectSerializer::toQueryValue($request_sell_online);
        }
        // query params
        if (is_array($request_service_ids)) {
            $request_service_ids = ObjectSerializer::serializeCollection($request_service_ids, 'multi', true);
        }
        if ($request_service_ids !== null) {
            $queryParams['request.serviceIds'] = ObjectSerializer::toQueryValue($request_service_ids);
        }
        // query params
        if (is_array($request_session_type_ids)) {
            $request_session_type_ids = ObjectSerializer::serializeCollection($request_session_type_ids, 'multi', true);
        }
        if ($request_session_type_ids !== null) {
            $queryParams['request.sessionTypeIds'] = ObjectSerializer::toQueryValue($request_session_type_ids);
        }
        // query params
        if ($request_staff_id !== null) {
            $queryParams['request.staffId'] = ObjectSerializer::toQueryValue($request_staff_id);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salePurchaseContract
     *
     * Purchase a contract for a client.
     *
     * @param  \Swagger\Client\Model\PurchaseContractRequest $request request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PurchaseContractResponse
     */
    public function salePurchaseContract($request, $site_id, $version, $authorization = '')
    {
        list($response) = $this->salePurchaseContractWithHttpInfo($request, $site_id, $version, $authorization);
        return $response;
    }

    /**
     * Operation salePurchaseContractWithHttpInfo
     *
     * Purchase a contract for a client.
     *
     * @param  \Swagger\Client\Model\PurchaseContractRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PurchaseContractResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function salePurchaseContractWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\PurchaseContractResponse';
        $request = $this->salePurchaseContractRequest($request, $site_id, $version, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PurchaseContractResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salePurchaseContractAsync
     *
     * Purchase a contract for a client.
     *
     * @param  \Swagger\Client\Model\PurchaseContractRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salePurchaseContractAsync($request, $site_id, $version, $authorization = '')
    {
        return $this->salePurchaseContractAsyncWithHttpInfo($request, $site_id, $version, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salePurchaseContractAsyncWithHttpInfo
     *
     * Purchase a contract for a client.
     *
     * @param  \Swagger\Client\Model\PurchaseContractRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salePurchaseContractAsyncWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\PurchaseContractResponse';
        $request = $this->salePurchaseContractRequest($request, $site_id, $version, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salePurchaseContract'
     *
     * @param  \Swagger\Client\Model\PurchaseContractRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salePurchaseContractRequest($request, $site_id, $version, $authorization = '')
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling salePurchaseContract'
            );
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling salePurchaseContract'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling salePurchaseContract'
            );
        }

        $resourcePath = '/public/v{version}/sale/purchasecontract';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation salePurchaseGiftCard
     *
     * Purchase a gift card for a client.
     *
     * @param  \Swagger\Client\Model\PurchaseGiftCardRequest $request request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\PurchaseGiftCardResponse
     */
    public function salePurchaseGiftCard($request, $site_id, $version, $authorization = '')
    {
        list($response) = $this->salePurchaseGiftCardWithHttpInfo($request, $site_id, $version, $authorization);
        return $response;
    }

    /**
     * Operation salePurchaseGiftCardWithHttpInfo
     *
     * Purchase a gift card for a client.
     *
     * @param  \Swagger\Client\Model\PurchaseGiftCardRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\PurchaseGiftCardResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function salePurchaseGiftCardWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\PurchaseGiftCardResponse';
        $request = $this->salePurchaseGiftCardRequest($request, $site_id, $version, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\PurchaseGiftCardResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation salePurchaseGiftCardAsync
     *
     * Purchase a gift card for a client.
     *
     * @param  \Swagger\Client\Model\PurchaseGiftCardRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salePurchaseGiftCardAsync($request, $site_id, $version, $authorization = '')
    {
        return $this->salePurchaseGiftCardAsyncWithHttpInfo($request, $site_id, $version, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation salePurchaseGiftCardAsyncWithHttpInfo
     *
     * Purchase a gift card for a client.
     *
     * @param  \Swagger\Client\Model\PurchaseGiftCardRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function salePurchaseGiftCardAsyncWithHttpInfo($request, $site_id, $version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\PurchaseGiftCardResponse';
        $request = $this->salePurchaseGiftCardRequest($request, $site_id, $version, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'salePurchaseGiftCard'
     *
     * @param  \Swagger\Client\Model\PurchaseGiftCardRequest $request (required)
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function salePurchaseGiftCardRequest($request, $site_id, $version, $authorization = '')
    {
        // verify the required parameter 'request' is set
        if ($request === null || (is_array($request) && count($request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $request when calling salePurchaseGiftCard'
            );
        }
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling salePurchaseGiftCard'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling salePurchaseGiftCard'
            );
        }

        $resourcePath = '/public/v{version}/sale/purchasegiftcard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
