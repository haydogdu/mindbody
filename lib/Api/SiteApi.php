<?php
/**
 * SiteApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * MINDBODY Public API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.6
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SiteApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SiteApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation siteGetActivationCode
     *
     * Get an activation code for a site.
     *
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetActivationCodeResponse
     */
    public function siteGetActivationCode($version, $authorization = '')
    {
        list($response) = $this->siteGetActivationCodeWithHttpInfo($version, $authorization);
        return $response;
    }

    /**
     * Operation siteGetActivationCodeWithHttpInfo
     *
     * Get an activation code for a site.
     *
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetActivationCodeResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteGetActivationCodeWithHttpInfo($version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\GetActivationCodeResponse';
        $request = $this->siteGetActivationCodeRequest($version, $authorization);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetActivationCodeResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation siteGetActivationCodeAsync
     *
     * Get an activation code for a site.
     *
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetActivationCodeAsync($version, $authorization = '')
    {
        return $this->siteGetActivationCodeAsyncWithHttpInfo($version, $authorization)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation siteGetActivationCodeAsyncWithHttpInfo
     *
     * Get an activation code for a site.
     *
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetActivationCodeAsyncWithHttpInfo($version, $authorization = '')
    {
        $returnType = '\Swagger\Client\Model\GetActivationCodeResponse';
        $request = $this->siteGetActivationCodeRequest($version, $authorization);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'siteGetActivationCode'
     *
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function siteGetActivationCodeRequest($version, $authorization = '')
    {
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling siteGetActivationCode'
            );
        }

        $resourcePath = '/public/v{version}/site/activationcode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteGetLocations
     *
     * Get locations for a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetLocationsResponse
     */
    public function siteGetLocations($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        list($response) = $this->siteGetLocationsWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset);
        return $response;
    }

    /**
     * Operation siteGetLocationsWithHttpInfo
     *
     * Get locations for a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetLocationsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteGetLocationsWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        $returnType = '\Swagger\Client\Model\GetLocationsResponse';
        $request = $this->siteGetLocationsRequest($site_id, $version, $authorization, $request_limit, $request_offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetLocationsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation siteGetLocationsAsync
     *
     * Get locations for a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetLocationsAsync($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        return $this->siteGetLocationsAsyncWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation siteGetLocationsAsyncWithHttpInfo
     *
     * Get locations for a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetLocationsAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        $returnType = '\Swagger\Client\Model\GetLocationsResponse';
        $request = $this->siteGetLocationsRequest($site_id, $version, $authorization, $request_limit, $request_offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'siteGetLocations'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function siteGetLocationsRequest($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling siteGetLocations'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling siteGetLocations'
            );
        }

        $resourcePath = '/public/v{version}/site/locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteGetPrograms
     *
     * Get service categories offered at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only If &#x60;true&#x60;, filters results to show only those programs that are shown online.&lt;br /&gt;  If &#x60;false&#x60;, all programs are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  string $request_schedule_type A schedule type used to filter the returned results. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetProgramsResponse
     */
    public function siteGetPrograms($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_schedule_type = null)
    {
        list($response) = $this->siteGetProgramsWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset, $request_online_only, $request_schedule_type);
        return $response;
    }

    /**
     * Operation siteGetProgramsWithHttpInfo
     *
     * Get service categories offered at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only If &#x60;true&#x60;, filters results to show only those programs that are shown online.&lt;br /&gt;  If &#x60;false&#x60;, all programs are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  string $request_schedule_type A schedule type used to filter the returned results. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetProgramsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteGetProgramsWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_schedule_type = null)
    {
        $returnType = '\Swagger\Client\Model\GetProgramsResponse';
        $request = $this->siteGetProgramsRequest($site_id, $version, $authorization, $request_limit, $request_offset, $request_online_only, $request_schedule_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetProgramsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation siteGetProgramsAsync
     *
     * Get service categories offered at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only If &#x60;true&#x60;, filters results to show only those programs that are shown online.&lt;br /&gt;  If &#x60;false&#x60;, all programs are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  string $request_schedule_type A schedule type used to filter the returned results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetProgramsAsync($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_schedule_type = null)
    {
        return $this->siteGetProgramsAsyncWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset, $request_online_only, $request_schedule_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation siteGetProgramsAsyncWithHttpInfo
     *
     * Get service categories offered at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only If &#x60;true&#x60;, filters results to show only those programs that are shown online.&lt;br /&gt;  If &#x60;false&#x60;, all programs are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  string $request_schedule_type A schedule type used to filter the returned results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetProgramsAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_schedule_type = null)
    {
        $returnType = '\Swagger\Client\Model\GetProgramsResponse';
        $request = $this->siteGetProgramsRequest($site_id, $version, $authorization, $request_limit, $request_offset, $request_online_only, $request_schedule_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'siteGetPrograms'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only If &#x60;true&#x60;, filters results to show only those programs that are shown online.&lt;br /&gt;  If &#x60;false&#x60;, all programs are returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  string $request_schedule_type A schedule type used to filter the returned results. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function siteGetProgramsRequest($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_schedule_type = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling siteGetPrograms'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling siteGetPrograms'
            );
        }

        $resourcePath = '/public/v{version}/site/programs';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if ($request_online_only !== null) {
            $queryParams['request.onlineOnly'] = ObjectSerializer::toQueryValue($request_online_only);
        }
        // query params
        if ($request_schedule_type !== null) {
            $queryParams['request.scheduleType'] = ObjectSerializer::toQueryValue($request_schedule_type);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteGetResources
     *
     * Get resources used at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date_time The time the resource ends. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location of the resource. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set.&lt;br /&gt;  Default: **all** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_session_type_ids List of session type IDs.&lt;br /&gt;  Default: **all** (optional)
     * @param  \DateTime $request_start_date_time The time the resource starts. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetResourcesResponse
     */
    public function siteGetResources($site_id, $version, $authorization = '', $request_end_date_time = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_session_type_ids = null, $request_start_date_time = null)
    {
        list($response) = $this->siteGetResourcesWithHttpInfo($site_id, $version, $authorization, $request_end_date_time, $request_limit, $request_location_id, $request_offset, $request_session_type_ids, $request_start_date_time);
        return $response;
    }

    /**
     * Operation siteGetResourcesWithHttpInfo
     *
     * Get resources used at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date_time The time the resource ends. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location of the resource. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set.&lt;br /&gt;  Default: **all** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_session_type_ids List of session type IDs.&lt;br /&gt;  Default: **all** (optional)
     * @param  \DateTime $request_start_date_time The time the resource starts. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetResourcesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteGetResourcesWithHttpInfo($site_id, $version, $authorization = '', $request_end_date_time = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_session_type_ids = null, $request_start_date_time = null)
    {
        $returnType = '\Swagger\Client\Model\GetResourcesResponse';
        $request = $this->siteGetResourcesRequest($site_id, $version, $authorization, $request_end_date_time, $request_limit, $request_location_id, $request_offset, $request_session_type_ids, $request_start_date_time);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetResourcesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation siteGetResourcesAsync
     *
     * Get resources used at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date_time The time the resource ends. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location of the resource. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set.&lt;br /&gt;  Default: **all** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_session_type_ids List of session type IDs.&lt;br /&gt;  Default: **all** (optional)
     * @param  \DateTime $request_start_date_time The time the resource starts. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetResourcesAsync($site_id, $version, $authorization = '', $request_end_date_time = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_session_type_ids = null, $request_start_date_time = null)
    {
        return $this->siteGetResourcesAsyncWithHttpInfo($site_id, $version, $authorization, $request_end_date_time, $request_limit, $request_location_id, $request_offset, $request_session_type_ids, $request_start_date_time)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation siteGetResourcesAsyncWithHttpInfo
     *
     * Get resources used at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date_time The time the resource ends. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location of the resource. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set.&lt;br /&gt;  Default: **all** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_session_type_ids List of session type IDs.&lt;br /&gt;  Default: **all** (optional)
     * @param  \DateTime $request_start_date_time The time the resource starts. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetResourcesAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_end_date_time = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_session_type_ids = null, $request_start_date_time = null)
    {
        $returnType = '\Swagger\Client\Model\GetResourcesResponse';
        $request = $this->siteGetResourcesRequest($site_id, $version, $authorization, $request_end_date_time, $request_limit, $request_location_id, $request_offset, $request_session_type_ids, $request_start_date_time);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'siteGetResources'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  \DateTime $request_end_date_time The time the resource ends. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_location_id The location of the resource. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set.&lt;br /&gt;  Default: **all** (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_session_type_ids List of session type IDs.&lt;br /&gt;  Default: **all** (optional)
     * @param  \DateTime $request_start_date_time The time the resource starts. This parameter is ignored if &#x60;EndDateTime&#x60; or &#x60;LocationID&#x60; is not set. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function siteGetResourcesRequest($site_id, $version, $authorization = '', $request_end_date_time = null, $request_limit = null, $request_location_id = null, $request_offset = null, $request_session_type_ids = null, $request_start_date_time = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling siteGetResources'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling siteGetResources'
            );
        }

        $resourcePath = '/public/v{version}/site/resources';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_end_date_time !== null) {
            $queryParams['request.endDateTime'] = ObjectSerializer::toQueryValue($request_end_date_time);
        }
        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_location_id !== null) {
            $queryParams['request.locationId'] = ObjectSerializer::toQueryValue($request_location_id);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if (is_array($request_session_type_ids)) {
            $request_session_type_ids = ObjectSerializer::serializeCollection($request_session_type_ids, 'multi', true);
        }
        if ($request_session_type_ids !== null) {
            $queryParams['request.sessionTypeIds'] = ObjectSerializer::toQueryValue($request_session_type_ids);
        }
        // query params
        if ($request_start_date_time !== null) {
            $queryParams['request.startDateTime'] = ObjectSerializer::toQueryValue($request_start_date_time);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteGetSessionTypes
     *
     * Get the session types used at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only When &#x60;true&#x60;, indicates that only the session types that can be booked online should be returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_program_i_ds Filters results to session types that belong to one of the given program IDs. If omitted, all program IDs return. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetSessionTypesResponse
     */
    public function siteGetSessionTypes($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_program_i_ds = null)
    {
        list($response) = $this->siteGetSessionTypesWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset, $request_online_only, $request_program_i_ds);
        return $response;
    }

    /**
     * Operation siteGetSessionTypesWithHttpInfo
     *
     * Get the session types used at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only When &#x60;true&#x60;, indicates that only the session types that can be booked online should be returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_program_i_ds Filters results to session types that belong to one of the given program IDs. If omitted, all program IDs return. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetSessionTypesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteGetSessionTypesWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_program_i_ds = null)
    {
        $returnType = '\Swagger\Client\Model\GetSessionTypesResponse';
        $request = $this->siteGetSessionTypesRequest($site_id, $version, $authorization, $request_limit, $request_offset, $request_online_only, $request_program_i_ds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetSessionTypesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation siteGetSessionTypesAsync
     *
     * Get the session types used at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only When &#x60;true&#x60;, indicates that only the session types that can be booked online should be returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_program_i_ds Filters results to session types that belong to one of the given program IDs. If omitted, all program IDs return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetSessionTypesAsync($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_program_i_ds = null)
    {
        return $this->siteGetSessionTypesAsyncWithHttpInfo($site_id, $version, $authorization, $request_limit, $request_offset, $request_online_only, $request_program_i_ds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation siteGetSessionTypesAsyncWithHttpInfo
     *
     * Get the session types used at a site.
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only When &#x60;true&#x60;, indicates that only the session types that can be booked online should be returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_program_i_ds Filters results to session types that belong to one of the given program IDs. If omitted, all program IDs return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetSessionTypesAsyncWithHttpInfo($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_program_i_ds = null)
    {
        $returnType = '\Swagger\Client\Model\GetSessionTypesResponse';
        $request = $this->siteGetSessionTypesRequest($site_id, $version, $authorization, $request_limit, $request_offset, $request_online_only, $request_program_i_ds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'siteGetSessionTypes'
     *
     * @param  string $site_id ID of the site from which to pull data. (required)
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  bool $request_online_only When &#x60;true&#x60;, indicates that only the session types that can be booked online should be returned.&lt;br /&gt;  Default: **false** (optional)
     * @param  int[] $request_program_i_ds Filters results to session types that belong to one of the given program IDs. If omitted, all program IDs return. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function siteGetSessionTypesRequest($site_id, $version, $authorization = '', $request_limit = null, $request_offset = null, $request_online_only = null, $request_program_i_ds = null)
    {
        // verify the required parameter 'site_id' is set
        if ($site_id === null || (is_array($site_id) && count($site_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $site_id when calling siteGetSessionTypes'
            );
        }
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling siteGetSessionTypes'
            );
        }

        $resourcePath = '/public/v{version}/site/sessiontypes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if ($request_online_only !== null) {
            $queryParams['request.onlineOnly'] = ObjectSerializer::toQueryValue($request_online_only);
        }
        // query params
        if (is_array($request_program_i_ds)) {
            $request_program_i_ds = ObjectSerializer::serializeCollection($request_program_i_ds, 'multi', true);
        }
        if ($request_program_i_ds !== null) {
            $queryParams['request.programIDs'] = ObjectSerializer::toQueryValue($request_program_i_ds);
        }
        // header params
        if ($site_id !== null) {
            $headerParams['siteId'] = ObjectSerializer::toHeaderValue($site_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation siteGetSites
     *
     * Get all sites that can be accessed by an API Key.
     *
     * @param  string $version version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_site_ids List of the requested site IDs. When omitted, returns all sites that the source has access to. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\GetSitesResponse
     */
    public function siteGetSites($version, $authorization = '', $request_limit = null, $request_offset = null, $request_site_ids = null)
    {
        list($response) = $this->siteGetSitesWithHttpInfo($version, $authorization, $request_limit, $request_offset, $request_site_ids);
        return $response;
    }

    /**
     * Operation siteGetSitesWithHttpInfo
     *
     * Get all sites that can be accessed by an API Key.
     *
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_site_ids List of the requested site IDs. When omitted, returns all sites that the source has access to. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\GetSitesResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function siteGetSitesWithHttpInfo($version, $authorization = '', $request_limit = null, $request_offset = null, $request_site_ids = null)
    {
        $returnType = '\Swagger\Client\Model\GetSitesResponse';
        $request = $this->siteGetSitesRequest($version, $authorization, $request_limit, $request_offset, $request_site_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\GetSitesResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation siteGetSitesAsync
     *
     * Get all sites that can be accessed by an API Key.
     *
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_site_ids List of the requested site IDs. When omitted, returns all sites that the source has access to. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetSitesAsync($version, $authorization = '', $request_limit = null, $request_offset = null, $request_site_ids = null)
    {
        return $this->siteGetSitesAsyncWithHttpInfo($version, $authorization, $request_limit, $request_offset, $request_site_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation siteGetSitesAsyncWithHttpInfo
     *
     * Get all sites that can be accessed by an API Key.
     *
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_site_ids List of the requested site IDs. When omitted, returns all sites that the source has access to. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function siteGetSitesAsyncWithHttpInfo($version, $authorization = '', $request_limit = null, $request_offset = null, $request_site_ids = null)
    {
        $returnType = '\Swagger\Client\Model\GetSitesResponse';
        $request = $this->siteGetSitesRequest($version, $authorization, $request_limit, $request_offset, $request_site_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'siteGetSites'
     *
     * @param  string $version (required)
     * @param  string $authorization A staff user authorization token. (optional, default to )
     * @param  int $request_limit Number of results to include, defaults to 100 (optional)
     * @param  int $request_offset Page offset, defaults to 0. (optional)
     * @param  int[] $request_site_ids List of the requested site IDs. When omitted, returns all sites that the source has access to. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function siteGetSitesRequest($version, $authorization = '', $request_limit = null, $request_offset = null, $request_site_ids = null)
    {
        // verify the required parameter 'version' is set
        if ($version === null || (is_array($version) && count($version) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $version when calling siteGetSites'
            );
        }

        $resourcePath = '/public/v{version}/site/sites';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($request_limit !== null) {
            $queryParams['request.limit'] = ObjectSerializer::toQueryValue($request_limit);
        }
        // query params
        if ($request_offset !== null) {
            $queryParams['request.offset'] = ObjectSerializer::toQueryValue($request_offset);
        }
        // query params
        if (is_array($request_site_ids)) {
            $request_site_ids = ObjectSerializer::serializeCollection($request_site_ids, 'multi', true);
        }
        if ($request_site_ids !== null) {
            $queryParams['request.siteIds'] = ObjectSerializer::toQueryValue($request_site_ids);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }

        // path params
        if ($version !== null) {
            $resourcePath = str_replace(
                '{' . 'version' . '}',
                ObjectSerializer::toPathValue($version),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
